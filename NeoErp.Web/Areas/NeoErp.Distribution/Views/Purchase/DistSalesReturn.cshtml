
@using NeoErp.Core.Models;
@using NeoErp.Core;
@using NeoErp.Core.Infrastructure;
@{
    ViewBag.Title = "Dist Sales Return";
    Layout = null;
    var workingContent = EngineContext.Current.Resolve<IWorkContext>
        ();
}
@*<link href="@Styles.Url("~/Areas/NeoERP.DocumentTemplate/Content/salesreturnPra.css")" rel="stylesheet" media="print" />*@

<style type="text/css">


    /*.thumbnail:hover {
        position: relative;
        top: -25px;
        left: -35px;
        width: 500px;
        height: auto;
        display: block;
        z-index: 999;
    }*/

    /*img {
        transition: transform 0.25s ease;
    }

        img:hover {
            -webkit-transform: scale(1.5);
            transform: scale(1.5);
        }*/

    /*#rightImage {
        height: 275px;
        float: left;
        position: relative;
    }*/

        /*#rightImage:hover img {
            height: 300px;
        }*/

    .k-multiselect-wrap.k-floatwrap {
        height: auto !important;
    }

    #mytable {
        width: 98%;
        margin: 1%;
    }

    #POEditWindow-dialog {
        width: 90%;
    }

    .btn-group {
        margin-right: 7px;
    }

    span.fa.fa-truck {
        margin-right: 5px;
    }

    a#RunQuery {
        margin-right: 5px;
    }

    #grid {
        height: 100%;
    }

    div.k-grid-header th.k-header, tr.k-filter-row > th {
        text-align: center;
    }

  
    .k-grid table {
        table-layout: fixed;
    }

    .no-data {
        background-color: red;
    }

  
    .k-grid td {
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .k-grid-content, .k-grid-header {
        font-size: 10px;
    }

    .k-grid-footer {
        font-size: 10px;
    }

    .floatright {
        float: right;
        margin-top: 2px !important;
    }

    a.k-button.k-button-icontext.k-grid-excel {
        float: right;
    }


    /* loader css*/
    .busy-loader {
        height: 150%;
        width: 100%;
        display: none;
        position: absolute;
        background-color: rgba(51, 51, 51, 0.41);
        z-index: 999;
    }

    .preloader {
        position: absolute;
        top: 20%;
        left: 40%;
        background-color: rgba(0,0,0,0.81);
        width: 23px;
        height: 23px;
    }

    .loader {
        border: 10px solid #f2f2f2;
        border-radius: 50% !important;
        border-top: 10px solid #3d807c;
        width: 50px;
        height: 50px;
        -webkit-animation: spin 2s linear infinite;
        animation: spin 2s linear infinite;
        position: absolute;
        top: 25%;
        left: 50%;
    }

    .k-grid tbody .k-button, .k-ie8 .k-grid tbody button.k-button {
        padding: 0px 4px 0px 4px !important;
        min-width: 5px;
    }

    #grid .k-button-icontext {
        padding-right: 4px;
    }

    @@media print{
        .printFooter{
            margin-top:100cm;
        }

        #top_part{
            margin-bottom:100cm;
            visibility:hidden;
        }
    }

</style> 


<div id="POEditWindow" class="modal fade" tabindex="-1" aria-labelledby="POEditWindow" role="dialog">
    <div class="modal-dialog" id="POEditWindow-dialog">
        <div class="modal-content">
            <form name="POForm" id="POForm" novalidate>
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Edit Purchase Order</h4>
                </div>
                <div class="modal-body" id="POModalBody">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="UpdatePO()">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="SalesPrintWindow" class="modal prettyprint" tabindex="-1" aria-labelledby="SalesPrintWindow" role="dialog">
    <div class="modal-dialog" id="SalesPrintWindow-dialog">
        <div class="modal-content">
            <form name="SalesReturnPrintForm" id="SalesReturnPrintForm" novalidate>
                <div class="modal-body" id="SalesPrintFormBody">

                </div>
                <div class="modal-footer">
                    <a onclick="printDiv('SalesPrintFormBody')" class="btn btn-sm btn-green" id="savedocumentformdata" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing..." href="javascript:;">
                        <i class="fa fa-floppy-o"></i> Print
                    </a>
                    <a class="btn btn-sm btn-default" id="cancelPrint" @*ng-click="cancelPrint(event)*@ onclick="cnlPrint()" data-dismiss="modal">Cancel Print</a>
                </div>
            </form>
        </div>
    </div>
</div>

<script id="POItemTemplate" type="text/x-kendo-template">
    <div class="portlet-body form">
        <div class="row">
            <div class="col-md-12 col-sm-12">
                <div class="row">
                    <div class="col-md-3 col-sm-3">
                        <div class="form-group">
                            <label class="control-label" for="orderNumber">
                                Order Number
                            </label>
                            <input type="hidden" value="#:data.COMPANY_CODE#" id="ItemCompany" />
                            <input type="hidden" value="#:data.BRANCH_CODE#" id="ItemBranch" />
                            <input type="hidden" value="#:data.PO_CONVERSION_FACTOR#" id="POConversionFactor" />
                            <input type="hidden" value="#:data.PO_CONVERSION_UNIT#" id="POConversionUnit" />
                            <input type="hidden" value="#:data.PO_CUSTOM_RATE#" id="POCustomRate" />
                            <input id="orderNumber" name="orderNumber" value="#:data.ORDER_NO#" class="form-control input-sm" placeholder="Order Number" disabled />
                        </div>
                    </div>

                    <div class="col-md-3 col-sm-3">
                        <div class="form-group">
                            <label class="control-label" for="customerName">
                                Customer
                            </label>
                            <input type="hidden" value="#:data.CUSTOMER_CODE#" id="CustomerCode" />
                            <input id="customerName" name="customerName" value="#:data.CUSTOMER_EDESC#" class="form-control input-sm" placeholder="Customer" disabled />
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-3">
                        <div class="form-group">
                            <label class="control-label" for="salesPerson">
                                Sales Person
                            </label>
                            <input type="hidden" id="spCode" value="#:data.CREATED_BY#" />
                            <input id="salesPerson" name="salesPerson" value="#:data.EMPLOYEE_EDESC#" class="form-control input-sm" placeholder="Sales Person" disabled />
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-3">
                        <div class="form-group">
                            <label class="control-label" for="orderRemarks">
                                Remarks
                            </label>
                            <input id="orderRemarks" name="orderRemarks" value="#:(data.ITEMS[0].REMARKS)?data.ITEMS[0].REMARKS:''#" class="form-control input-sm" placeholder="Remarks" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <table class="table table-bordered table-hover" id="mytable">
                        <thead class="table-info font-green">
                            <tr>
                                <td class="col-md-2">Item</td>
                                <td class="col-md-2">Req. Unit</td>
                                <td class="col-md-1">Req. Qty</td>
                                <td class="col-md-1">Unit Price</td>
                                # if(data.PO_CONVERSION_FACTOR == "Y") { #
                                <td class="col-md-1">C. Unit</td>
                                <td class="col-md-1">C. Qty</td>
                                # } #
                                <td class="col-md-1">Total Price</td>
                                <td class="col-md-1">
                                    <button class="btn btn-xs btn-success pull-right" onclick="AddPoItem(this)">
                                        [<i class="fa fa-plus"></i>] Add
                                    </button>
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            # for (var i = 0; i < data.ITEMS.length; i++) { #
                            <tr>
                                <td>
                                    <select id="ItemsMultiselect_#:i+1#" multiple="multiple"></select>
                                </td>
                                <td>
                                    #: data.ITEMS[i].MU_CODE #
                                </td>
                                <td>
                                    <input type="number" class="form-control input-sm" value="#:data.ITEMS[i].QUANTITY#" id="Quantity_#:i+1#" onchange="Calculate(this)" style="width:100%;text-align:right;" />
                                    @*#: data.ITEMS[i].QUANTITY #*@
                                </td>
                                <td>
                                    <input type="text" class="form-control input-sm" value="#:data.ITEMS[i].UNIT_PRICE#" id="UnitPrice_#:i+1#" disabled style="width:100%;text-align:right;" />
                                    <input type="hidden" value="#:data.ITEMS[i].CONVERSION_FACTOR#" id="ConversionFactor_#:i+1#" />
                                </td>
                                # if(data.PO_CONVERSION_FACTOR == "Y") { #
                                <td>
                                    #: data.ITEMS[i].CONVERSION_MU_CODE #
                                </td>
                                <td style="text-align:right;">
                                    #: data.ITEMS[i].QUANTITY * data.ITEMS[i].CONVERSION_FACTOR #
                                </td>
                                # } #
                                <td id="Total_#:i+1#" style="text-align:right;">
                                    #: data.ITEMS[i].TOTAL_PRICE #
                                </td>
                                @*<td>
                                        #: (data.ITEMS[i].REMARKS)?data.ITEMS[i].REMARKS:'' #
                                    </td>*@
                                <td></td>
                            </tr>
                            # } #
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</script>

<script id="SalesReturnPrintTemplate" type="text/x-kendo-template">
    @Html.Partial("~/Areas/NeoErp.Distribution/Views/Shared/PrintTemplate/_distSalesReturnPrint.cshtml")
</script>


<div class="content">

    <div class="page-bar">
        <ul class="page-breadcrumb">
            @*
                <li>
                    <i class="fa fa-home"></i>
                    <a href="/sales/SalesHome/Dashboard">Home</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <a href="#/Sales/FinalSalesReport">Purchase Order</a>
                    <i class="fa fa-angle-right"></i>
                </li>*@

        </ul>
        <div class="page-toolbar">
            <div class="btn-group pull-right">

                <div class="actions">

                    <div class="btn-group">
                        <div class="btn-group">
                            <a class="btn btn-circle btn-icon-only btn-default" data-toggle="modal" data-target="#resellerSourceModal" title="Filter Return">
                                <i class="fa fa-archive"></i>
                            </a>
                        </div>
                        <div id="resellerSourceModal" class="modal fade" role="dialog">
                                <div class="modal-dialog">
                                   <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                                            <h4 class="modal-title">
                                                Filter Return
                                            </h4>
                                        </div>
                                <div class="modal-body">
                                    <div class="row form-group">
                                        <div class="col-md-4 col-sm-4" style="text-align:right">
                                            <label for="sourceSelect">Select Status</label>
                                        </div>
                                        <div class="col-md-6 col-sm-6">
                                            <select id="sourceSelect" name="sourceSelect" style="width:100%">
                                                <option value="N">Pending</option>
                                                <option value="A">Approved</option>
                                                <option value="C">Cancel</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-green" onclick="filterSalesReturn()">Apply</button>
                            </div>
                </div>
            </div>
        </div>
                    </div>

                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/DateField.cshtml", false)
                    </div>

                    @Html.Partial("~/Views/Shared/Controls/ConsolidateFilter.cshtml", true)

                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/_AdvancedFilter.cshtml", new AdvancedFilterSettingsModel()
                        {
                        ShowSalesPersonFilter = true,
                        ShowCustomerFilter = true,
                        })
                    </div>

                   

                    <a class="btn btn-circle btn-icon-only btn-default" id="RunQuery" href="#">
                        <i class="icon-control-play"></i>
                    </a>
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/_ReportConfig.cshtml", "DistPoIndex")
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="busy-loader">
        <div id="preloader" class="loader"></div>
    </div>
    <!-- END PAGE HEADER-->
    <!-- BEGIN PAGE CONTENT-->
    <div class="row collapse in" id="demo">
        <div class="col-md-12">
            <div class="portlet light bordered">
                <div class="portlet-body form">
                    <div class="row">
                        <div id="grid"></div>
                        <script type="text/x-kendo-template" id="template">
                            <div class="tabstrip">

                                <div>
                                    <div class="orders"></div>
                                </div>

                            </div>

                        </script>
                        @Html.Partial("~/Views/Shared/Controls/_GridToolbar.cshtml")
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script id="confirmationTemplate" type="text/x-kendo-template">
    <div class="popupMessage"></div>
    <br/>
    <hr />
    <div class="dialog_buttons">
        <input type="button" class="confirm_yes k-button" value="Yes" style="width: 70px" />
        &nbsp;
        <input type="button" class="confirm_no k-button" value="No" style="width: 70px" />
    </div>
</script>
<script src="@Scripts.Url("~/JS/reportFilter.js?V1")"></script>
<script src="@Scripts.Url("~/JS/DateFilter.js?v5")" type="text/javascript"></script>

@*<script src="@Scripts.Url("~/JS/DashboardChartFilter/reportFilter.js")" type="text/javascript"></script>*@

<script type="text/javascript">
    $(function () {
        $("#itemImage").click(function (e) {
            this.t = this.title;
            this.title = "";
            var c = (this.t != "") ? "<br/>" + this.t : "";
            $("body").append("<p id='preview'><img src='" + this.href + "' alt='Image preview' />" + c + "</p>");
            $("#preview")
                .css("top", (e.pageY - xOffset) + "px")
                .css("left", (e.pageX + yOffset) + "px")
                .fadeIn("slow");
        },

            function () {
                this.title = this.t;
                $("#preview").remove();
            });

        $("a.preview").mousemove(function (e) {
            $("#preview")
                .css("top", (e.pageY - xOffset) + "px")
                .css("left", (e.pageX + yOffset) + "px");
        });
    });



    //Expanding child as per selected url
    try {
        var a = location.hash;
        var b = location.pathname;
        var url = (b + a);
        $(".active").removeClass();
        $("a[href='" + url + "']").parent().addClass("active");
        $("a[href='" + url + "']").parent().parent().slideDown("slow");
    }
    catch (ex) { }



    function filterSalesReturn() {
        var selectedVal = $('#sourceSelect').val();
        var prodProidGrid = $("#grid").data("kendoGrid");
        prodProidGrid.dataSource.transport.options.read.url = window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/FilterDistributionSalesReturn?value=" + selectedVal;
        prodProidGrid.dataSource.read();
    }

   

    // Configuration of the x and y offsets
    function ShowImagePreview() {
        xOffset = -20;
        yOffset = 40;
       
    };
   

</script>

<script>
    var creditlimit = false;
    var expandedDetailRow = "";
    function showConfirmationWindow(message) {
        return showWindow('#confirmationTemplate', message)
    };

    function showWindow(template, message) {

        var dfd = new jQuery.Deferred();
        var result = false;

        $("<div id='popupWindow'></div>")
            .appendTo("body")
            .kendoWindow({
                width: "200px",
                modal: true,
                title: "",
                modal: true,
                visible: false,
                close: function (e) {
                    this.destroy();
                    dfd.resolve(result);
                }
            }).data('kendoWindow').content($(template).html()).center().open();

        $('.popupMessage').html(message);

        $('#popupWindow .confirm_yes').val('OK');
        $('#popupWindow .confirm_no').val('Cancel');

        $('#popupWindow .confirm_no').click(function () {
            $('#popupWindow').data('kendoWindow').close();
        });

        $('#popupWindow .confirm_yes').click(function () {
            result = true;
            $('#popupWindow').data('kendoWindow').close();
        });

        return dfd.promise();
    };

    $("#showcreditremark").on("click", function () {
        var creditlimit = $("#limittextbox").val();
        console.log(creditlimit);
        if (creditlimit == '') {
            $("#errorforcreditlimit").html('<div class="alert alert-success"><a class="close" data-dismiss="alert" aria-label="close">&times;</a> <strong>Error!</strong>Your Credit Limit is exceed. Please give Remarks</div>')

        }
        else {
            var win = $('#creditliimitwindows').data("kendoWindow");
            win.close();
        }

    });

</script>

<script>
    var reportConfig = GetReportSetting("DistPoIndex");
    //var urltest = window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/GetDistributionPurchaseOrder";
    var urltest = window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/GetDistributionSalesReturn";
    var formCode = "0";

    $(".applydp").on("click", function (evt) {
        evt.preventDefault();
        console.log("UrlTest=====================>>>>" + urltest);
        KendoGridRefresh(urltest);
        $(this).closest("#applydp").modal('hide');
    });

    $("#loadAdvancedFilters").on("click", function (evt) {
        evt.preventDefault();
        KendoGridRefresh(urltest);
    });

    //Close the Print Dialog
    function cnlPrint() {
        $("#SalesPrintWindow").toggle();
    }


    $("#grid").on("keyup", "input[name='APPROVEQTY']", function (evt) {
        evt.preventDefault();
        CalculateAmount($(this), "input");
    });

    $("#grid").on("change", "input[type='checkbox']", function (evt) {

        if ($(this).prop("checked") == false)
        {
            var node = $($(this).parents()[10]).prev();
            var nodeList = $(this).closest("tr").parent().find("tr");
            $('.alert').hide();
            node.removeClass("k-alt bg-success bg-danger text-white");
            node.find(".k-grid-mydelete").removeAttr("disabled");
            CalcAggregateAfterChange($(this), nodeList, "APPROVEQTY");
            return false;
        }
        else {
            $(".busy-loader").css("display", "block");
            var selectedValue = $(this).closest("tr").find(".APPROVEQTY").text();
            if (selectedValue == null || selectedValue == "")
                selectedValue = $(this).closest("tr").find("input[name='APPROVEQTY']").val();
            $(this).val(selectedValue);
            CalculateAmount($(this), "checkbox");
        }

    });


    function CalculateAmount(thisValue, type) {
        var grid = thisValue.closest(".orders").data("kendoGrid");
        var selectedRow = grid.dataItem(thisValue.closest("tr"));
        var selectedParentRowNode = thisValue.closest("tr").closest(".k-detail-row").prev();
        var selectedParentRow = $("#grid").data("kendoGrid").dataItem(selectedParentRowNode);
        var changedValue = parseFloat(thisValue.val());
        var changedCQuantity = parseFloat(thisValue.closest("tr").find(".CQuantity").text());
        var totalQty = 0;
        var totalamount = 0;
        var creditlimitValue = selectedParentRow.credit_limit;
        if (creditlimitValue < 1)
            creditlimitValue = selectedParentRow.balance;
        var creditlimit = false;
        var conversionFactor = 0;
        selectedRow.dirty = true;

        var nodeList = thisValue.closest("tr").parent().find("tr");
        $.each(nodeList, function (index, node) {
            var nodeData = grid.dataItem(node);
            nodeData.APPROVED_FLAGBOOL = $(node).find("input[type='checkbox']").prop('checked');
            conversionFactor = nodeData.CONVERSION_FACTOR;
            changedValue = parseFloat($(node).closest("tr").find("input[name='APPROVEQTY']").val());
            if (isNaN(changedValue))
                changedValue = 0;
            $(node).closest("tr").find(".CQuantity").html(changedValue * conversionFactor);
            if (nodeData.APPROVED_FLAGBOOL == true) {
                if (nodeData.UNIT_PRICE == null)
                    nodeData.UNIT_PRICE = 0;
                if (selectedRow == nodeData)
                    nodeData.APPROVEQTY = changedValue;
                totalamount = totalamount + (nodeData.APPROVEQTY * nodeData.UNIT_PRICE);
                totalQty = totalQty + parseFloat($(node).closest("tr").find(".CQuantity").text());;
            }

        });



        //check if limit Cross
        if (selectedParentRow.SO_CREDIT_LIMIT_FLAG == 'Y' || selectedParentRow.SO_CREDIT_DAYS_FLAG == 'Y') {
            $.ajax({
                url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/GetCreditDaysBalance?companyCode=" + selectedParentRow.COMPANY_CODE + "&subCode=C" + selectedParentRow.CUSTOMER_CODE,
                type: 'POST',
                success: function (data) {
                    debugger;
                    var balance = 0;
                    if (typeof data.CreditDaysBalance !== 'undefined' && data.CreditDaysBalance.length > 0) {
                        var htmlcreditlimit = "Credit Days: " + data.CREDIT_DAYS + "</br> Credit Balance: " + data.CreditDaysBalance[0].DUEDAYS + "</br> Toal Paid Amt:" + data.TOTALPAIDAMT + "</br> Pending :" + data.PENDING_STATUS;
                        $("#CreditLimitmsg").html('<div class="alert alert-success"><a class="close" data-dismiss="alert" aria-label="close">&times;</a> <strong></strong>' + htmlcreditlimit + '</div>');
                    } else {
                        var htmlcreditlimit = "Credit Days: " + data.CREDIT_DAYS + "</br> Credit Balance: " + 0 + "</br> Toal Paid Amt:" + data.TOTALPAIDAMT + "</br> Pending :" + data.PENDING_STATUS;
                        $("#CreditLimitmsg").html('<div class="alert alert-success"><a class="close" data-dismiss="alert" aria-label="close">&times;</a> <strong></strong>' + htmlcreditlimit + '</div>');

                    }

                    $.each(data.CreditDaysBalance, function (i, obj) {
                        if (i === 0)
                            balance = data.TOTALPAIDAMT - obj.SALES_AMT;
                        else
                            balance = balance - obj.SALES_AMT;

                        var creditDaysCondition = selectedParentRow.SO_CREDIT_DAYS_FLAG == 'Y' && balance < 0 && obj.DUEDAYS > data.CREDIT_DAYS;
                        var creditLimitCondition = selectedParentRow.SO_CREDIT_LIMIT_FLAG == 'Y' && balance < 0 && -(balance) > creditlimitValue;
                        if (creditDaysCondition) {
                            creditlimit = true;
                            $("#aletmsg").html('<div class="alert alert-warning"><a class="close" data-dismiss="alert" aria-label="close">&times;</a> <strong>Error!</strong> Credit Days is exceed.</div>');
                            selectedParentRowNode.removeClass("k-alt bg-success text-white").addClass("bg-danger text-white");
                            selectedParentRowNode.find(".k-grid-mydelete").attr("disabled", "disabled");
                            return false;
                        }
                        else if (creditLimitCondition) {
                            creditlimit = true;
                            $("#aletmsg").html('<div class="alert alert-warning"><a class="close" data-dismiss="alert" aria-label="close">&times;</a> <strong>Error!</strong> Credit Limit is exceed.</div>');
                            selectedParentRowNode.removeClass("k-alt bg-success text-white").addClass("bg-danger text-white");
                            selectedParentRowNode.find(".k-grid-mydelete").attr("disabled", "disabled");
                            return false;
                        }

                    });
                    if (!creditlimit)
                    {
                        selectedParentRowNode.removeClass("k-alt bg-danger text-white").addClass("bg-success text-white");
                       // $('.alert').hide();
                        $('.alert-warning').hide();
                    }
                    $(".busy-loader").css("display", "none");
                }
            });
        }
        else {
            creditlimit = false;
            selectedParentRowNode.removeClass("k-alt bg-danger text-white").addClass("bg-success text-white");
            $('.alert').hide();
        }


        var amounttotalwithFormat = totalamount.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
        selectedParentRowNode.find(".approveamountclass").html(amounttotalwithFormat);



        //update aggregate Value
        CalcAggregateAfterChange(thisValue,nodeList, "APPROVEQTY")
       // CalcAggregateAfterChange(thisValue, "CQuantity")
        selectedParentRowNode.find(".ApproveCQuantity").html(totalQty);

    }

    function CalcAggregateAfterChange(thisValue,nodeList, field) {

        var footer = thisValue.closest(".orders").find(".k-footer-template");
        value = 0;
        $.each(nodeList, function (index, node) {
            if ($(node).find("input[type='checkbox']").prop("checked"))
            {
                nodeValue = $(node).find("input[name='" + field + "']").val();
                if (nodeValue == undefined)
                    nodeValue = $(node).find("." + field).text();
                value = value + parseFloat(nodeValue);
            }
        });
        if (isNaN(value))
            value = 0;
        footer.find("." + field + "SUM").text(value);
    }

    function CalcAggregate(field, field1) {

        var $grid = expandedDetailRow;
        if ($grid == "")
            $grid = $('.orders');
        var kendo = $grid.data().kendoGrid;
        var data = kendo.dataSource.data();
        var total = 0;
        if (field1 != undefined) {
            for (var i = 0; i < data.length; i++) {
                var fieldValue = parseFloat(data[i][field]);
                var fieldValue1 = parseFloat(data[i][field1]);
                if (isNaN(fieldValue) || isNaN(fieldValue1)) {
                    fieldValue = 0;
                    fieldValue1 = 0;
                }
                total = total + (fieldValue * fieldValue1);
            }
        }
        else {
            for (var i = 0; i < data.length; i++) {
                var fieldValue = parseFloat(data[i][field]);
                if (fieldValue == NaN) {
                    fieldValue = 0;
                }
                total = total + fieldValue;
            }
        }
        return total;
    }

    var win = $('#creditliimitwindows').kendoWindow({
        title: 'Please Update Credit Limit',
        visible: false,
        width: "280px",

        //height: "200px",
        activate: function () {
            $('#creditliimitwindowsComment').select();
        }
    }).data('kendoWindow');
    // init function for the data load
    //BindGrid(urltest);
    DateFilter.init(function () {
        consolidate.init(function () {
            BindGrid(urltest);
        });
    });

    $("#RunQuery").click(function (evt) {
        evt.preventDefault();
        expandedDetailRow = "";
        KendoGridRefresh(urltest);
    });

    var autoCompletedataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: window.location.protocol + "//" + window.location.host + "/api/Distribution/GetFormCode",
                dataType: "json"
            }
        }
    });
    $("#formCodeMultiSelect").kendoMultiSelect({
        dataSource: autoCompletedataSource,
        dataTextField: "FORM_EDESC",
        dataValueField: "FORM_CODE",
        maxSelectedItems: 1,
        height: 600,
        headerTemplate: '<div class="col-md-offset-3"><strong>Sales Order...</strong></div>',
        placeholder: "Select Sales Order...",
        autoClose: false,
        dataBound: function () {
            var current = this.value();
            this._savedOld = current.slice(0);
        },
    });


    function BindGrid(readurl) {
        reportConfig = GetReportSetting("DistPoIndex");
        var dataSource = new kendo.data.DataSource({
            type: "json",
            batch: true,
            transport: {
                read: {
                    url: readurl, // <-- Get data from here.
                    dataType: "json", // <-- The default was "jsonp".
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                },
                update: {
                    url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/UpdateDistributionSalesReturnDetail",
                    dataType: "json",
                    type: "post",
                    contentType: "application/json; charset=utf-8",
                    complete: function (e) {
                        if (e.responseJSON.STATUS_CODE == 404) {
                            displayPopupNotification("Voucher list is not selected", "error");
                        }
                        else if (e.responseJSON.STATUS_CODE == 304) {
                            displayPopupNotification("Error to Covert Sales Order", "error");
                        }
                        else if (e.responseJSON.STATUS_CODE == 200) {
                            displayPopupNotification("Sales Order Generated Successfully", "success");
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                destroy: {
                    url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/DeleteDistributionSalesReturnDetail?parent=true",
                    dataType: "json",
                    type: "post",
                    contentType: "application/json; charset=utf-8",
                    complete: function (e) {
                        if (e.responseJSON.STATUS_CODE == 404) {
                            displayPopupNotification("Voucher list is not selected", "error");
                        }
                        else if (e.responseJSON.STATUS_CODE == 304) {
                            displayPopupNotification("Error to Covert Sales Order", "error");
                        }
                        else if (e.responseJSON.STATUS_CODE == 500) {
                            displayPopupNotification("Sales Order No already exist", "error");
                        }
                        else if (e.responseJSON.STATUS_CODE == 200) {
                            displayPopupNotification("PO Cancel Successfully", "success");
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return JSON.stringify(options.models)
                    }
                    if (operation == "read") {
                        console.log("ReportFilter.filterAdditionalData=========================>>>" + JSON.stringify(ReportFilter.filterAdditionalData()))
                        var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));

                        delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                        delete paramMap.$format; // <-- remove format parameter.
                        return paramMap;
                    }
                }
            },
            error: function (e) {
                displayPopupNotification("Sorry error occured while processing data", "error");
            },

            schema: {
                model: {
                    id: "ORDER_NO",
                    fields: {
                        ORDER_NO: { type: "number", editable: false },

                        RESELLER_NAME: { editable: false },
                        COMPANY_EDESC: { editable: false },
                        GROUP_EDESC: { editable: false },
                        ORDER_DATE: { editable: false, nullable: true, type: "date" },
                        MITI: { editable: false, nullable: true,type:"string" },
                        CUSTOMER_EDESC: { editable: false, nullable: true },
                        CUSTOMER_CODE: { editable: false, nullable: true },
                        ITEM_CODE: { editable: false, nullable: true },
                        ITEM_EDESC: { editable: false, nullable: true },
                        MU_CODE: { editable: false, nullable: true },
                        QUANTITY: { editable: false, nullable: true, type: "number" },
                        GrantTotalAmount: { editable: false, nullable: true, type: "number" },
                        UNIT_PRICE: { editable: false, nullable: true, type: "number" },
                        TOTAL_PRICE: { editable: false, nullable: true, type: "number" },
                        CREATED_DATE: { editable: false, nullable: true, type: "date" },
                        BILLING_NAME: { editable: false, nullable: true, type: "date" },
                        APPROVED_FLAG: { editable: false, validation: { required: false } },
                        APPROVED_FLAGBOOL: { editable: true, nullable: true, type: "boolean" },
                        APPROVEQTY: { type: "number", editable: true, validation: { required: false } },
                        credit_limit: { editable: false, nullable: true, validation: { required: false }, type: "number" },
                        CREDITLIMITREMARKS: { editable: false, nullable: true, validation: { required: false } },
                        PARTY_TYPE_EDESC: { editable: false, nullable: true, validation: { required: false } },
                        EMPLOYEE_EDESC: { editable: false, nullable: true, validation: { required: false } },
                        CREDIT_LIMIT: { editable: false, nullable: true, validation: { required: false } },
                        ApprovedAmount: { editable: false, nullable: true, validation: { required: false }, type: "number" },
                        GRAND_APPROVE_QUENTITY: { editable: false, nullable: true, validation: { required: false }, type: "number" },
                        COMPLAIN_TYPE: { editable: false, nullable: true, type: "string" },
                        CONDITION: { editable: false, nullable: true, type: "string" },
                        SERIOUSNESS: { editable: false, nullable: true, type: "string" },
                    }
                }
            },
            pageSize: reportConfig.defaultPageSize,
            pageable: true,
        });


        var grid = $("#grid").kendoGrid({
            dataSource: dataSource,
            toolbar: kendo.template($("#toolbar-template").html()),
            allowCopy: true,
            height: window.innerHeight - 50,
            pageSize: reportConfig.defaultPageSize,
            pageable: {
                refresh: true,
                pageSizes: reportConfig.itemPerPage,
                buttonCount: 5
            },
            excelExport: function (e) {
                e.preventDefault();

                var workbook = e.workbook;
                detailExportPromises = [];
                var masterData = e.data;
                for (var rowIndex = 0; rowIndex < masterData.length; rowIndex++) {
                    var a = masterData[rowIndex];
                    exportChildData(a.ORDER_NO, rowIndex, a.COMPANY_CODE, a.ORDER_ENTITY);
                }

                $.when.apply(null, detailExportPromises)
                    .then(function () {
                        // get the export results
                        var detailExports = $.makeArray(arguments);
                        // sort by masterRowIndex
                        detailExports.sort(function (a, b) {
                            return a.masterRowIndex - b.masterRowIndex;
                        });
                        // add an empty column
                        workbook.sheets[0].columns.unshift({
                            width: 30
                        });

                        // prepend an empty cell to each row
                        for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                            workbook.sheets[0].rows[i].cells.unshift({});
                        }

                        // merge the detail export sheet rows with the master sheet rows
                        // loop backwards so the masterRowIndex doesn't need to be updated
                        for (var i = detailExports.length - 1; i >= 0; i--) {
                            var masterRowIndex = detailExports[i].masterRowIndex + 1; // compensate for the header row

                            var sheet = detailExports[i].sheet;

                            // prepend an empty cell to each row
                            for (var ci = 0; ci < sheet.rows.length; ci++) {
                                if (sheet.rows[ci].cells[0].value) {
                                    sheet.rows[ci].cells.unshift({});
                                }
                            }

                            // insert the detail sheet rows after the master row
                            [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                        }

                        for (var len = 1; len < workbook.sheets[0].columns.length; len++) {
                            workbook.sheets[0].columns[len].autoWidth = true;
                        }
                         //Add filter information
                        var companyName = ('@workingContent.CurrentUserinformation.company_name');
                        var fromADdate = $("#FromDateVoucher").val()
                        var toADdate = $("#ToDateVoucher").val();
                        var fromBSdate = $("#fromInputDateVoucher").val();
                        var toBSdate = $("#toInputDateVoucher").val();
                        var branches = ReportFilter.getBranchs();

                        workbook.sheets[0].rows.unshift({
                            cells: [{ value: "Purchase Order Report".split('').join(' '), colSpan: 7 }]
                        });
                        var filterText = $("#AdvanceFilter").attr('data-original-title');
                        if (filterText.indexOf('|') < 0) {
                            filterText = $((filterText).replace(/<strong>/g, "|")).text().replace('|', '').split('|').reverse();;
                            $.each(filterText, function (k, item) {
                                workbook.sheets[0].rows.unshift({
                                    cells: [{ value: item, colSpan: 7 }]
                                });
                            });
                        }
                        if (filterText.toString().indexOf('Date Range') < 0) {
                            workbook.sheets[0].rows.unshift({
                                cells: [{ value: "From :- " + fromADdate + "(" + fromBSdate + ")" + "\t To :- " + toADdate + "(" + toBSdate + ")", colSpan: 7 }]
                            });
                        }
                        for (var companyCount = 0; companyCount < branches.length; companyCount++) {
                            workbook.sheets[0].rows.unshift({
                                cells: [{ value: branches[companyCount].Company + " :- " + branches[companyCount].Branches.join(','), colSpan: 7}]
                            });
                        }
                        // save the workbook
                        kendo.saveAs({
                            dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                            fileName: "Purchase Order.xlsx"
                        });


                    });
            },
            sortable: true,
            reorderable: true,
            groupable: true,
            resizable: true,
            filterable: {
                extra: false,
                operators: {
                    number: {
                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "is greater than or equal to	",
                        gt: "is greater than",
                        lte: "is less than or equal",
                        lt: "is less than",
                    },
                    string: {

                        eq: "Is equal to",
                        neq: "Is not equal to",
                        startswith: "Starts with	",
                        contains: "Contains",
                        doesnotcontain: "Does not contain",
                        endswith: "Ends with",
                    },
                    date: {
                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "Is after or equal to",
                        gt: "Is after",
                        lte: "Is before or equal to",
                        lt: "Is before",
                    }
                }
            },
            columnMenu: true,
            columnMenuInit: function (e) {
                wordwrapmenu(e);
                checkboxItem = $(e.container).find('input[type="checkbox"]');
            },
            columnShow: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('POIndex', 'grid');
            },
            columnHide: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('POIndex', 'grid');
            },
            detailTemplate: kendo.template($("#template").html()),
            detailInit: detailInit,
            detailExpand: function (e) {

                expandedDetailRow = e.detailRow.find(".orders");
            },

            dataBound: function (o) {

                var orderNo = location.hash.substr(location.hash.indexOf("?orderNo=") + 9)

                var grid = $("#grid").data("kendoGrid");
                var dataRows = grid.items();
                // var data = $(dataRows[index]).find('td')[1].innerText
                var dataLength = dataRows.length;

                for (var i = 0; i < dataLength; i++) {
                    var data = $(dataRows[i]).find('td')[1].innerText
                    // var hehe = data.substr(0, 2);
                    if (data == orderNo) {
                        $(dataRows[i]).addClass('').css('background-color', '#00b36b');
                        return false;
                    }
                    else {
                        continue
                    }
                }


                var grid = o.sender;
                if (grid.dataSource.total() == 0) {
                    var colCount = grid.columns.length + 1;
                    $(o.sender.wrapper)
                        .find('tbody')
                        .append('<tr class="kendo-data-row" style="font-size:12px;"><td colspan="' + colCount + '" class="alert alert-danger">Sorry, no data :(</td></tr>');
                    displayPopupNotification("No Data Found Given Date Filter.", "info");
                }
                else {
                    if (grid.dataSource.data()[0].PO_CONVERSION_FACTOR == 'Y') {
                        grid.showColumn("GRAND_APPROVE_QUENTITY");
                    }
                    else {
                        grid.hideColumn("GRAND_APPROVE_QUENTITY");
                    }
                    if (grid.dataSource.data()[0].PO_PARTY_TYPE == 'Y')
                        grid.showColumn("PARTY_TYPE_EDESC");
                    else
                        grid.hideColumn("PARTY_TYPE_EDESC");
                    if (grid.dataSource.data()[0].SO_CREDIT_LIMIT_FLAG == 'Y')
                        grid.showColumn("credit_limit");
                    else
                        grid.hideColumn("credit_limit");

                }
                UpdateReportUsingSetting("POIndex", "grid");
                $('div').removeClass('.k-header k-grid-toolbar');
            },
            editable: {
                mode: "incell", // mode can be incell/inline/popup with Q1 '12 Beta Release of Kendo UI
                confirmation: "Are you sure Want to Cancel This PO?" // the confirmation message for destroy command
            },
            columns: [

                {field:"ENTITY_TYPE",hidden:true,title:"ENTITY_TYPE"},
                {
                    field: "RETURN_NO",
                    title: "Return No",
                    format: "{0:n0}",
                    width: "11%",

                },
                {
                    field: "RETURN_DATE",
                    title: "Date",
                    format: "{0: " + reportConfig.dateFormat + " hh:mm tt}",
                    //format: "{0: dd/MM/yyyy HH:mm:ss}",
                    width: "12.5%",
                    hidden: true,
                },
                {
                    field: "AREA",
                    title: "Area",
                    width:"10%",
                },
                {
                    field: "ASM_NAME",
                    title: "ASM",
                    width: "10%",
                },
                {
                    field: "COMPANY_EDESC",
                    title: "Company",
                    //format: "{0: " + reportConfig.dateFormat + " hh:mm tt}",
                    //format: "{0: dd/MM/yyyy HH:mm:ss}",
                    width: "15%",
                },
                {
                    field: "ADDRESS",
                    title: "Address",
                    //format: "{0: " + reportConfig.dateFormat + " hh:mm tt}",
                    //format: "{0: dd/MM/yyyy HH:mm:ss}",
                    width: "14%",
                },
                {
                    field: "CONTACT_NUMBER",
                    title: "Contact No",
                    width: "10%",
                    //footerTemplate: '<span style="float:right">Total Amount</span>',
                },
                {
                    field: "CUSTOMER_EDESC",
                    title: "Customer",
                    width: "15%",

                },

                {
                    command: [
                        {
                            "name": "mydelete",
                            "buttonType": "Image",
                            "text": " ",
                            "imageClass": "fa fa-check",
                            "className": "my-edit-button",
                            "title": "Click to Approve",
                            //"iconClass": "fa",
                            "click": function (e) {
                                e.preventDefault();
                                var dataItemObj = {};
                                var dataItemList = [];
                                dataItemObj = this.dataItem($(e.currentTarget).closest("tr"));
                                var returnNo = dataItemObj.RETURN_NO;
                                $.when(showConfirmationWindow('Are you sure Want approve sales return?')).then(function (confirmed) {
                                    if (confirmed) {
                                        $.ajax({
                                            url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/UpdateDistributionSalesReturn?returnNo=" + returnNo + "&updateFlag=approve",
                                            method: "POST",
                                            dataType: "JSON",
                                            success: function (response) {
                                                displayPopupNotification(response.UpdateResponse, "success");
                                                setTimeout(function (e) {
                                                    location.reload(true);
                                                }, 3000);
                                            }, error: function (errorResponse) {

                                            }
                                        });
                                    } else {
                                        bootbox.alert("Approve atleast one item first !!");
                                    }
                                });
                            },
                            visible: function (dataItem) {
                                if (dataItem.APPROVED_FLAG == "C" || dataItem.APPROVED_FLAG == "A" ) return false;
                                else return true;
                            }

                        },

                        {
                            "name": "print",
                            "buttonType": "Image",
                            "text": " ",
                            "title": "Click to Print",
                            "imageClass": "fa-print",
                            "iconClass": "fa",
                            "click": function (e) {
                                //e.preventDefault();

                                //var data = this.dataItem($(e.currentTarget).closest("tr"));
                                //var detailGrid = $(e.currentTarget).closest('tr').next('tr').find('.orders').data("kendoGrid");
                                //console.log("data============>>>" + JSON.stringify(data));
                                //console.log("datailGrid============>>>" + JSON.stringify(detailGrid));
                                //var dataItemObj = {};
                                //var dataItemList = [];
                                //dataItemObj = this.dataItem($(e.currentTarget).closest("tr"));
                                //console.log("dataItemObj================>>" + JSON.stringify(dataItemObj));
                                //var template = kendo.template($("#SalesReturnPrintTemplate").html());
                                //var result = template(dataItemObj);
                                //$("#SalesPrintFormBody").html(result);
                                //$("#SalesPrintWindow").modal('show');




                                //expand the current row
                                var btn = $(e.currentTarget).closest("tr").find("a.k-icon.k-i-expand")[0];
                                $(btn).trigger('click');

                                var data = this.dataItem($(e.currentTarget).closest("tr"));
                                var detailGrid = $(e.currentTarget).closest('tr').next('tr').find('.orders').data("kendoGrid");
                                var items = detailGrid.dataSource.data();
                                data.ITEMS = items;
                                console.log("Items====================>>>" + JSON.stringify(items));
                                console.log("data====================>>>" + JSON.stringify(data));
                                e.preventDefault();
                                var template = kendo.template($("#SalesReturnPrintTemplate").html());
                                var result = template(data);
                                $("#SalesPrintFormBody").html(result);
                                $("#SalesPrintWindow").modal('show');

                            },
                            visible: function (dataItem) {
                                if (dataItem.APPROVED_FLAG == "A") return true;
                                else return false;
                            }
                          },

                         {
                            "name": "editPO",
                            "buttonType": "Image",
                            "text": " ",
                            "title": "Click to Cancel",
                            "imageClass": "fa fa-close",
                            //"iconClass": "fa",
                            "click": function (e) {
                                e.preventDefault();
                                var dataItemObj = {};
                                var dataItemList = [];
                                dataItemObj = this.dataItem($(e.currentTarget).closest("tr"));
                                var returnNo = dataItemObj.RETURN_NO;
                                $.when(showConfirmationWindow('Are you sure Want to cancel sales return?')).then(function (confirmed) {
                                    if (confirmed) {
                                        $.ajax({
                                            url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/UpdateDistributionSalesReturn?returnNo=" + returnNo + "&updateFlag=cancel",
                                            method: "POST",
                                            dataType: "JSON",
                                            success: function (response) {
                                                displayPopupNotification(response.UpdateResponse, "success");
                                                setTimeout(function (e) {
                                                    location.reload(true);
                                                }, 3000);
                                            }, error: function (errorResponse) {

                                            }
                                        });
                                    } else {
                                        bootbox.alert("Approve atleast one item first !!");
                                    }
                                });
                             },

                            visible: function (dataItem) {
                                if (dataItem.APPROVED_FLAG == "A") return false;
                                else return true;
                            }
                        },
                    ],
                    width: "10%",
                }

            ]
        });


        function exportChildData(OrderNum, rowIndex,Company,Entity) {

            var deferred = $.Deferred();
            detailExportPromises.push(deferred);

            var localDS = new kendo.data.DataSource({
                type: "json",
                batch: true,
                transport: {
                    read: {
                        async: false,
                        url: window.location.protocol + "//" + window.location.host + "/" + "api/DistributionPurchase/GetDistributionPurchaseOrderDetail?companyCode=" + Company + "&Orderno=" + OrderNum + "&ORDER_ENTITY=" + Entity, // <-- Get data from here.
                        dataType: "json", // <-- The default was "jsonp".
                        type: "POST",
                        contentType: "application/json; charset=utf-8"
                    },
                    error: function (e) {
                        displayPopupNotification("Sorry error occured while processing data", "error");
                    },
                    schema: {
                        model: {
                            id: "ORDER_NO",
                            fields: {
                                ORDER_DATE: { editable: false, nullable: true, type: "date" },
                                CUSTOMER_EDESC: { editable: false, nullable: true },
                                CUSTOMER_CODE: { editable: false, nullable: true },
                                EMPLOYEE_EDESC: { editable: false, nullable: true },
                                ITEM_CODE: { editable: false, nullable: true },
                                ITEM_EDESC: { editable: false, nullable: true },
                                MU_CODE: { editable: false, nullable: true },
                                QUANTITY: { editable: false, nullable: true },
                                UNIT_PRICE: { editable: false, nullable: true },
                                TOTAL_PRICE: { editable: false, nullable: true },
                                REMARKS: { editable: true, nullable: true },
                                CREATED_DATE: { editable: false, nullable: true, type: "date" },
                                BILLING_NAME: { editable: false, nullable: true, type: "date" },
                                APPROVED_FLAG: { editable: false, validation: { required: false } },
                                APPROVED_FLAGBOOL: { editable: true, nullable: true, type: "boolean" },
                                ISEDITED: { editable: true, nullable: true, type: "boolean" },
                                CREDITLIMIT: { editable: true, nullable: true, type: "boolean" },
                                REJECT_FLAG: { editable: false, validation: { required: false } },
                                REJECT_FLAGBOOL: { editable: true, nullable: true, type: "boolean", validation: { required: true } },
                                APPROVEQTY: { type: "number", editable: true, validation: { required: true } },
                                CONVERSION_MU_CODE: { editable: false, nullable: true },
                                CONVERSION_QUANTITY: { editable: false, nullable: true },
                            }
                        }
                    },
                    aggregate: [
                        { field: "QUANTITY", aggregate: "sum" },
                        { field: "UNIT_PRICE", aggregate: "sum" },
                        { field: "TOTAL_PRICE", aggregate: "sum" },
                        { field: "CONVERSION_QUANTITY", aggregate: "sum" },
                        { field: "APPROVEQTY", aggregate: "sum" },
                    ]
                },
            });
            localDS.filter({ field: "ORDER_NO", operator: "eq", value: OrderNum });

            var exporter = new kendo.ExcelExporter({
                columns: [{
                    title: "Item",
                    field: "ITEM_EDESC",
                    width: "15%",
                }, {
                    title: "Unit",
                    field: "MU_CODE",
                    width: "9%",
                }, {
                    title: "Qty",
                    field: "QUANTITY",
                    width: "10%",
                }, {
                    title: "Unit Price",
                    field: "UNIT_PRICE",
                    width: "10%",
                }, {
                    title: "Total",
                    field: "TOTAL_PRICE",
                    width: "15%",
                }, {
                    title: "C. Unit",
                    field: "CONVERSION_MU_CODE",
                    width: "15%",
                }, {
                    title: "C. Qty",
                    field: "CONVERSION_QUANTITY",
                    width: "15%",
                }],
                dataSource: localDS
            });

            exporter.workbook().then(function (book, data) {
                deferred.resolve({
                    masterRowIndex: rowIndex,
                    sheet: book.sheets[0]
                });
            });
        }
    }


    function KendoGridRefresh(readUrl) {
        var grid = $('#grid').data("kendoGrid");
        grid.destroy();
        $('#grid').val('');
        $('#grid').html('');
        BindGrid(readUrl);

    }

    function detailInit(e) {
        console.log(e);
        var detailRow = e.detailRow;
        expandedDetailRow = e.detailRow.find(".orders");
        var Rowdata = e.data;
       
        var id = Rowdata.RETURN_NO;
        var ORDER_ENTITY = e.data.ORDER_ENTITY;
        var companyCode = Rowdata.COMPANY_CODE;
       
        var dataSourceITem = new kendo.data.DataSource({
            type: "json",
            batch: true,
            transport: {
                read: {
                    async: false,
                    url: window.location.protocol + "//" + window.location.host + "/" + "api/DistributionPurchase/GetDistributionSalesReturnDetail?companyCode=" + companyCode + "&returnNo=" + id, // <-- Get data from here.
                    dataType: "json", // <-- The default was "jsonp".
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                },
                update: {
                    url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/UpdateDistributionPurchaseOrderDetail",
                    dataType: "json",
                    type: "post",
                    contentType: "application/json; charset=utf-8",
                    complete: function (e) {

                    }
                },
                destroy: {
                    url: window.location.protocol + "//" + window.location.host + "/api/DistributionPurchase/DeleteDistributionPurchaseOrderDetail",
                    dataType: "json",
                    type: "post",
                    contentType: "application/json; charset=utf-8",
                    complete: function (e) {

                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return JSON.stringify(options.models);
                    }
                     if (operation == "read") {
                        console.log("ReportFilter.filterAdditionalData=========================>>>" + JSON.stringify(ReportFilter.filterAdditionalData()))
                        var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));

                        delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                        delete paramMap.$format; // <-- remove format parameter.
                        return paramMap;
                    }
                }
            },
            error: function (e) {
                displayPopupNotification("Sorry error occured while processing data", "error");
            },
            schema: {
                model: {
                    id: "ORDER_NO",
                    fields: {
                        ORDER_DATE: { editable: false, nullable: true, type: "date" },
                        CUSTOMER_EDESC: { editable: false, nullable: true },
                        CUSTOMER_CODE: { editable: false, nullable: true },
                        EMPLOYEE_EDESC: { editable: false, nullable: true },
                        ITEM_CODE: { editable: false, nullable: true },
                        ITEM_EDESC: { editable: false, nullable: true },
                        MU_CODE: { editable: false, nullable: true },
                        QUANTITY: { editable: false, nullable: true },
                        UNIT_PRICE: { editable: false, nullable: true },
                        TOTAL_PRICE: { editable: false, nullable: true },
                        REMARKS: { editable: true, nullable: true },
                        CREATED_DATE: { editable: false, nullable: true, type: "date" },
                        BILLING_NAME: { editable: false, nullable: true, type: "date" },
                        APPROVED_FLAG: { editable: false, validation: { required: false } },
                        APPROVED_FLAGBOOL: { editable: true, nullable: true, type: "boolean" },
                        ISEDITED: { editable: true, nullable: true, type: "boolean" },
                        CREDITLIMIT: { editable: true, nullable: true, type: "boolean" },
                        REJECT_FLAG: { editable: false, validation: { required: false } },
                        REJECT_FLAGBOOL: { editable: true, nullable: true, type: "boolean", validation: { required: true } },
                        APPROVEQTY: { type: "number", editable: true, validation: { required: true } },
                        CONVERSION_MU_CODE: { editable: false, nullable: true },
                        CONVERSION_QUANTITY: { editable: false, nullable: true },
                    }
                }
            },
            aggregate: [
                { field: "QUANTITY", aggregate: "sum" }
            ],
            pageSize: reportConfig.pageSize,
            pageable: true,
        });
        detailRow.find(".orders").kendoGrid({
            dataSource: dataSourceITem,
            //height: 400,
            sortable: true,
            pageable: false,
            sortable: true,
            reorderable: true,
            resizable: true,
            scrollable: {
                virtual: true
            },
            columns: [
                { field: "RETURN_NO", title: "RETURN_NO", hidden: "true" },
                { field: "ENTITY_TYPE", title: "ENTITY_TYPE", hidden: "true" },
                {
                    field: "ITEM_EDESC",
                    title: "Item Name",
                    width: "25%",
                    //footerTemplate: '<span style="float:right">Total Amount</span>',
                },
                {
                    field: "MU_CODE",
                    title: "Mu Code",
                    width: "6%",
                    // width: "55",
                    footerTemplate: '<span style="float:right">Total</span>',
                }, {
                    field: "QUANTITY",
                    title: "Req. Qty",
                    width: "8%",
                    template: '<span style="float:right">#= kendo.toString(QUANTITY) #</span>',
                    format: "{0:n}",
                    footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                },
                {
                    field: "CONVERSION_MU_CODE",
                    title: "C.Unit",
                    width: "5%",
                },
            ],

            dataBound: function (o) {

                var grid = o.sender;
                if (grid.dataSource.total() == 0) {
                    var colCount = grid.columns.length + 1;
                    $(o.sender.wrapper)
                        .find('tbody')
                        .append('<tr class="kendo-data-row" style="font-size:12px;"><td colspan="' + colCount + '" class="alert alert-danger">Sorry, no data :(</td></tr>');
                    displayPopupNotification("No Data Found Given Date Filter.", "info");
                }
            },

            editable: {
                mode: "incell", // mode can be incell/inline/popup with Q1 '12 Beta Release of Kendo UI
                confirmation: "Are you sure Want to Cancel This Item?" // the confirmation message for destroy command
            },
            edit: function (e) {
                var data = $(this).parent(".k-master-row");
                console.log(data);
                var parentRow = this.wrapper.closest("tr");
                console.log(parentRow);
                //$('#grid').data('kendoGrid').dataSource.read();
                console.log('edit started ');
                console.log(e);
                //e.preventDefault();
            },
            cancel: function (e) {
                e.preventDefault();
                e.container.data("kendoWindow").close();
            },
            update: function (e) {
                console.log('edit completed');
                console.log(e);
            },
            change: function (e) {
                console.log('a change happened not datasource one');
                console.log(e);
            },
            saveChanges: function (e) {
                console.log('a save is about to occurr');
                console.log(e);

            },
        });
    };


</script>

<script>
  
    function RemovePoItem(e) {

        var row = $(e).closest('tr')[0];
        $(row).remove();
    }

    function validateNumber(event) {

        var key = window.event ? event.keyCode : event.which;

        if (event.keyCode === 8 || event.keyCode === 127 || event.keyCode === 46) {
            return true;
        }
        else if (key < 48 || key > 57) {
            return false;
        }
        else return true;
    }


    function printDiv(divName) {

        var printContents = document.getElementById(divName).innerHTML;
      //  alert(printContents);

        var popupWin = window.open('', '_blank', 'width=750,height=650,top=0,left=10,toolbars=no,scrollbars=yes,status=no,resizable=yes');
        popupWin.document.open();

        popupWin.document.write('<html><head><title>Print Sales Return</title>');
        popupWin.document.write('<style type="text/css">' + 'table th, table td {' + 'border:1px solid #000;' + '}' +'</style>');
        popupWin.document.write('<link rel="stylesheet" type="text/css" href="/Content/printSalesReturn.css" />');
        popupWin.document.write('</head><body onload="window.print()"><div class="container">' + printContents + '</div></body></html>');
        popupWin.document.close();

    }



   

</script>

<script src="@Scripts.Url("~/Areas/NeoErp.Distribution/js/MenuNavigation.js?V2")"></script>