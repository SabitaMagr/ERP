@using NeoErp.Core.Models;
@using NeoErp.Core;
@using NeoErp.Core.Infrastructure;
@{
    ViewBag.Title = "Plan Report";
    Layout = "~/Areas/NeoERP.Planning/Views/Shared/_Layout.cshtml";
    //Layout = null;
}
@*<div class="row">
        <div ng-view></div>
    </div>*@

<style>
    /*.k-grid {
        font-size: 11px;
    }*/

    .color-notify {
        float: left;
        padding-left: 5px;
    }

    .color-box-1 {
        height: 13px;
        width: 13px;
        background-color: #91D598;
        border: 1px solid #9c9797;
        margin-top: 2px;
        float: left;
    }

    .color-box-2 {
        height: 13px;
        width: 13px;
        background-color: #D4FAB6;
        border: 1px solid #9c9797;
        margin-top: 2px;
        float: left;
    }

    .color-box-3 {
        height: 13px;
        width: 13px;
        background-color: #fff;
        border: 1px solid #9c9797;
        margin-top: 2px;
        float: left;
    }

    .plant-identification {
        padding-top: 22px;
        padding-left: 20px;
    }

    .k-list.k-reset {
        overflow: hidden !important;
    }

    #operationContent .slimScrollBar {
        display: none !important;
    }

        #operationContent .slimScrollBar:hover {
            display: block !important;
        }

    /*.k-ff input.k-textbox {
        float: right;
        margin-bottom: 5px;
        font-size: 11px;
    }*/

    #copyDetail.modal.fade.in {
        top: 40%;
        margin: auto;
        width: 470px !important;
        height: 464px !important;
        margin-left: -12% !important;
    }

    /*.gaptopmin {
        margin-top: -3px !important;
    }*/

    input#txtSearchString {
        /*border-radius: 15px !important;*/
    }
   
 
    .k-header.k-grid-toolbar {
        height:30px;
        padding: 0px;
    }

    .floatright {
        float: right;
        margin-top: 2px !important;
    }
    .planReportTable table td {
        padding: 4px 4px !important;
        font-size: 10px !important;
            white-space: nowrap;
    text-overflow: ellipsis;
    }

</style>
<div class="row">
    <div class="col-md-12">
        <div class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption">
                    <i class="icon-speech font-green-haze"></i>
                    <span class="caption-subject font-green-haze bold uppercase"> Plan Report List</span>
                    <span class="caption-helper"></span>
                </div>

                <div class="actions pull-right">
                    <div class="btn-group">
                        @Html.Partial("~/Areas/NeoERP.Planning/Views/Shared/Controls/DateField.cshtml", false)
                    </div>
                    <div class="btn-group">
                        @Html.Partial("~/Areas/NeoERP.Planning/Views/Shared/Controls/_AdvancedFilter.cshtml", new AdvancedFilterSettingsModel()
                   {
                       ShowCustomerFilter = true,
                       ShowBranchFilter = true,
                       ShowEmployeeFilter = true,
                       ShowDivisionFilter = true,
                       ShowCompanyFilter = false,

                   })
                    </div>
                    <div class="btn-group">
                        <a class="btn btn-circle btn-icon-only btn-default" id="RunQuery" href="#">
                            <i class="icon-control-play"></i>
                        </a>
                    </div>
                </div>
            </div>

            <div class="page-toolbar pull-right">
                <div class="pull-left">
                    <script type="text/x-kendo-template" id="toolbar-template">
                        <div class="k-header k-grid-toolbar">
                            <a class="k-button k-button-icontext floatright" id="collapseAllButton" title="Collapse All" onclick="CollapseAll()"><i class="fa fa-chevron-up"></i></a>
                            <a class="k-button k-button-icontext floatright" id="expandAllButton" title="Expand All" onclick="ExpandAll()"><i class="fa fa-chevron-down"></i></a>
                            <div class="search pull-right">
                                <input type="text" id="txtSearchString" class="form-control input-sm grid-search" maxlength="64" placeholder="Search..." onkeyup="onSearch(this)" />
                                <button class="btn btn-primary btn-sm search-btn fa fa-search"></button>
                            </div>
                        </div>
                    </script>
                    @*<div class="col-md-12 input-icon dataserarch-input">
                            <i class="fa fa-search searchicon"></i>
                            <input class="form-control searchbox" id="txtSearchString" ng-keyup="onSearch(this)" name="search" placeholder="search here" type="text">
                        </div>*@
                    @*<div class="col-md-12 dataserarch-input">
                            <i class="fa fa-search searchicon"></i>
                            <input class="k-textbox " type=text id="txtSearchString" ng-keyup="onSearch(this)" placeholder="search here..." />
                        </div>*@
                </div>

            </div>
            <div class="portlet-body">
                <div class="planReportTable" id="grid"></div>
                @Html.Partial("~/Views/Shared/Controls/_GridToolbar.cshtml")
            </div>
        </div>
    </div>
</div>

<div id="copyDetail" class="modal fade" tabindex="-1" data-width="760">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
        <h4 class="modal-title">Copy Plan</h4>
    </div>
    <div class="modal-body copyContentBody"></div>
    <div class="modal-footer">
        <button type="button" data-dismiss="modal" class="btn btn-outline dark">Close</button>
        <button type="button" class="btn green" id="saveCopiedPlan">Save</button>
    </div>
</div>
@section scripts{
    <script src="@Scripts.Url("~/Areas/NeoERP.Planning/Scripts/DateFilter.js")" type="text/javascript"></script>
    <script src="@Scripts.Url("~/JS/ReportFilter.js")" type="text/javascript"></script>
    <script src="@Scripts.Url("~/Areas/NeoERP.Planning/js/module/planningModule.js")"></script>
    <script>
        var planUrl = window.location.protocol + "//" + window.location.host + "/api/PlanReportApi/GetFavSalesPlanReport";
        //var planUrl = window.location.protocol + "//" + window.location.host + "/api/PlanReportApi/GetSalesPlanReport";
        $(document).ready(function () {
            //BindGrid();
            DateFilter.init(function () {
                BindPlanList(planUrl);
            });
            hideloader();
            $("#RunQuery").click(function (evt) {
                evt.preventDefault();
                
                KendoGridRefresh(planUrl);
            });
            //BindPlanList(planUrl);
        });

        $("#clearall").on('click',
            function () {
                $("#customerMultiSelect").data("kendoMultiSelect").value('');
                $("#employeeMultiSelect").data("kendoMultiSelect").value('');
                $("#divisionMultiSelect").data("kendoMultiSelect").value('');
                $("#BranchMultiSelect").data("kendoMultiSelect").value('');

            });

        $(".applydp").on("click",
            function (evt) {
                evt.preventDefault();
                $("#RunQuery").trigger("click");
            });

        $("#loadAdvancedFilters").on("click",
            function (evt) {
                evt.preventDefault();
                $("#RunQuery").trigger("click");

            });

        $("#txtSearchString").on('keyup',
            function (e) {
                onSearch(e);
            })

        function onSearch($this) {
            //
            var q = $("#txtSearchString").val();
            var grid = $("#grid").data("kendoGrid");
            grid.dataSource.query({
                page: 1,
                pageSize: 200,
                filter: {
                    logic: "or",
                    filters: [
                        { field: "PLAN_EDESC", operator: "contains", value: q },
                        { field: "ITEM_SUBGROUP_EDESC", operator: "contains", value: q },
                        { field: "ITEM_GROUP_EDESC", operator: "contains", value: q },
                        { field: "ITEM_EDESC", operator: "contains", value: q },
                        //{ field: "PER_DAY_AMOUNT", operator: "eq", value: q },
                        { field: "SALES_TYPE", operator: "contains", value: q },
                        { field: "CUSTOMER_EDESC", operator: "contains", value: q },
                        { field: "EMPLOYEE_EDESC", operator: "contains", value: q },
                        { field: "BRANCH_EDESC", operator: "contains", value: q },
                        { field: "DIVISION_EDESC", operator: "contains", value: q }
                    ]
                }
            });
        }

        function BindPlanList(pUrl) {
            $("#grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: pUrl, // <-- Get data from here.
                            dataType: "json", // <-- The default was "jsonp".
                            type: "POST",
                            contentType: "application/json; charset=utf-8"
                        },
                        parameterMap: function (options, type) {
                            
                            var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));
                            delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                            delete paramMap.$format; // <-- remove format parameter.
                            return paramMap;

                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                PLAN_EDESC: { type: "string" },
                                //START_DATE: { type: "string" },
                                ITEM_EDESC: { type: "string" },
                                PER_DAY_AMOUNT: { type: "number" },
                                PER_DAY_QUANTITY: { type: "number" },
                                CUSTOMER_EDESC: { type: "string" },
                                ITEM_GROUP_EDESC: { type: "string" },
                                ITEM_SUBGROUP_EDESC: { type: "string" }
                            }
                        },
                        total: function (data) {
                            return data[0].TotalRecord;
                        }
                    },
                    serverPaging: true,
                    //group: {
                    //    field: "PLAN_EDESC", aggregates: [
                    //        { field: "PER_DAY_AMOUNT", aggregate: "sum" },
                    //        { field: "PER_DAY_QUANTITY", aggregate: "sum" }
                    //    ]
                    //},

                    aggregate: [
                        { field: "PER_DAY_AMOUNT", aggregate: "sum" },
                        { field: "PER_DAY_QUANTITY", aggregate: "sum" },
                    ],
                    //group: {
                    //    field: "ITEM_EDESC",
                    //    aggregates: [{
                    //        field: "PER_DAY_AMOUNT", 
                    //        aggregate: "sum"
                    //    }, {
                    //        field: "PER_DAY_QUANTITY",
                    //        aggregate: "sum"
                    //    }, ]
                    //},
                    pageSize: 1000,
                    //serverPaging: true,
                    //serverFiltering: true,
                    //serverSorting: true
                },
                excel: {
                fileName: "Plan Report",
                allPages: true
            },

            excelExport: function (e) {
               // ExportToExcel(e);
                e.preventDefault();
            },

            pdf: {
                allPages: true,
                avoidLinks: true,
                paperSize: "auto",
                margin: { top: "2cm", left: "1cm", right: "1cm", bottom: "1cm" },
                landscape: true,
                repeatHeaders: true,
                width: "500px",

                scale: 0.8
            },
                toolbar: kendo.template($("#toolbar-template").html()),
                height: window.innerHeight - 100,
                sortable: true,
                reorderable: true,
                groupable: true,
                resizable: true,
                filterable: {
                    extra: false,
                    operators: {
                        number: {
                            eq: "Is equal to",
                            neq: "Is not equal to",
                            gte: "is greater than or equal to	",
                            gt: "is greater than",
                            lte: "is less than or equal",
                            lt: "is less than",
                        },
                        string: {
                            eq: "Is equal to",
                            neq: "Is not equal to",
                            startswith: "Starts with	",
                            contains: "Contains",
                            doesnotcontain: "Does not contain",
                            endswith: "Ends with",
                        },
                        date: {
                            eq: "Is equal to",
                            neq: "Is not equal to",
                            gte: "Is after or equal to",
                            gt: "Is after",
                            lte: "Is before or equal to",
                            lt: "Is before",
                        }

                    }
                },
                columnMenu: true,
                //Wordwrapmenu function calling
                columnMenuInit: function (e) {
                    //wordwrapmenu(e);
                    checkboxItem = $(e.container).find('input[type="checkbox"]');
                },
                pageable: {
                    refresh: true,
                    //pageSizes: reportConfig.itemPerPage,
                    buttonCount: 5
                },
                //  autoBind: true,
                scrollable: {
                    virtual: false
                },
                dataBinding: function () {
                    record = (this.dataSource.page() - 1) * this.dataSource.pageSize();
                },
                dataBound: function (o) {
                    var grid = o.sender;
                    if (grid.dataSource.total() == 0) {
                        var colCount = grid.columns.length;
                        $(o.sender.wrapper)
                            .find('tbody')
                            .append('<tr class="kendo-data-row" style="font-size:12px;"><td colspan="' + colCount + '" class="alert alert-danger">Sorry, no data :(</td></tr>');
                        displayPopupNotification("No Data Found Given Date Filter.", "info");
                    }
                    else {
                        var g = $("#grid").data("kendoGrid");
                        //$("#grid").find('.k-icon.k-i-collapse').trigger('click');

                        for (var i = 0; i < g.columns.length; i++) {
                            g.showColumn(i);
                        }
                        $("div.k-group-indicator").each(function (i, v) {
                            g.hideColumn($(v).data("field"));
                        });
                    }
                    $('div').removeClass('.k-header k-grid-toolbar');
                },
                columns: [
                    { title: "SN", template: "#= ++record #", width: "28px" },
                    {
                        field: "PLAN_DATE",
                        title: "Plan Date",
                        width: "100px",
                    }, {
                        field: "MITI",
                        title: "Miti",
                        width: "100px",
                    },
                    {
                        field: "PLAN_EDESC",
                        title: "Plan Name",
                        filterable: true,
                        //groupable: true,
                        width: "150px",
                        // template: "#= SetPlanLink(PLAN_EDESC,PLAN_CODE) #"
                    },
                    {
                        field: "ITEM_EDESC",
                        title: "Item Name",
                        format: "{0:n}",
                        width: "150px",
                        //aggregates: ["sum"]
                    },
                    {
                        field: "ITEM_GROUP_EDESC",
                        title: "Item Group Name",
                        width: "150px",
                        //hidden: true,

                    }, {
                        field: "ITEM_SUBGROUP_EDESC",
                        title: "Item Sub Group Name",
                         width: "150px",
                        // hidden: true,

                    },
                    {
                        field: "PER_DAY_AMOUNT",
                        title: "Amount",
                        type: "string",
                        format: "{0:n}",
                        attributes: { style: "text-align:right;" },
                        footerTemplate: "<span style='display: block; text-align: right;'> #=kendo.toString(sum, 'n')# </span>",
                        groupFooterTemplate: "<span style='display: block; text-align: right;'> #=kendo.toString(sum, 'n')# </span>",
                        aggregates: ["sum"],
                         width: "100px",
                    },
                    {
                        field: "PER_DAY_QUANTITY",
                        title: "Qty",
                        type: "string",
                        format: "{0:n}",
                        attributes: { style: "text-align:right;" },
                        footerTemplate: "<span style='display: block; text-align: right;'> #=kendo.toString(sum, 'n')# </span>",
                        groupFooterTemplate: "<span style='display: block; text-align: right;'> #=kendo.toString(sum, 'n')# </span>",
                        aggregates: ["sum"],
                         width: "100px",
                    }, {
                        field: "CUSTOMER_EDESC",
                        title: "Customer",
                        width: "150px",
                        
                    }, {
                        field: "EMPLOYEE_EDESC",
                        title: "Employee",
                        width: "150px",
                        groupable:true
                    }, {
                        field: "DIVISION_EDESC",
                        title: "Division",
                        width: "150px",
                    },
                    {
                        field: "BRANCH_EDESC",
                        title: "Branch",
                        width: "150px",
                    },
                    //{
                    //    field: "PLAN_CODE", title: "Action", sortable: false, filterable: false, width: "90px",
                    //    //template: "#= setAction(PLAN_CODE) #",
                    //    groupable: false
                    //}
                ],
                groupable: {
                    showFooter: true
                }

            });
        }


        function KendoGridRefresh(readUrl) {
            $('#grid').val('');
            $('#grid').html('');
            BindPlanList(planUrl);

        }

        function RefreshGrid() {
            $('#grid').data("kendoGrid").dataSource.read();
        }

        function CollapseAll() {
            var elementsA = document.querySelectorAll("#grid a.k-icon.k-minus");
            if (elementsA.length > 0) {

                for (var i = 0; i < elementsA.length; i++) {
                    $(elementsA[i]).trigger("click");
                }
                return;
            }
            var elementsB = document.querySelectorAll("#grid a.k-icon.k-i-collapse");
            for (var i = 0; i < elementsB.length; i++) {
                $(elementsB[i]).trigger("click");
            }
        }

        function ExpandAll() {
            var elementsB = document.querySelectorAll("#grid a.k-icon.k-i-expand");
            if (elementsB.length > 0) {

                for (var i = 0; i < elementsB.length; i++) {
                    $(elementsB[i]).trigger("click");
                }
                return;
            }
            var elementsA = document.querySelectorAll("#grid a.k-icon.k-plus");
            for (var i = 0; i < elementsA.length; i++) {
                $(elementsA[i]).trigger("click");
            }
        }

        @*function ExportToExcel(e) {

        //Report header details
        var companyName = ('@workingContent.CurrentUserinformation.company_name');
            var fromADdate = $("#FromDateVoucher").val();
        var toADdate = $("#ToDateVoucher").val();
        var fromBSdate = $("#fromInputDateVoucher").val();
        var toBSdate = $("#toInputDateVoucher").val();
        var branches = ReportFilter.getBranchs();

        //create a footer row to display totals
        var footer = [];
        footer.push({ value: "Total", colSpan: 13, textAlign: "center", bold: true, })
        var footerTemp = e.workbook.sheets[0].rows[e.workbook.sheets[0].rows.length - 1].cells;
        for (var i = 0; i < footerTemp.length; i++) {
            if (typeof (footerTemp[i].value) == "undefined" && i > 13)
                footer.push({ value: "", });
            else if (typeof (footerTemp[i].value) != "undefined" && $(footerTemp[i].value).text() != "Total")
                footer.push({ value: $(footerTemp[i].value).text(), textAlign: "right", bold: true });
        }

        var SheetRow = [];

        //Pushing the head row
        SheetRow.push({
            cells: [
                   { value: "Date", background: "#A9A7A6", },
                   { value: "Miti", background: "#A9A7A6", },
                   { value: "Customer Name", background: "#A9A7A6", },
                   { value: "Item Name", background: "#A9A7A6", },
                   { value: "From Location", background: "#A9A7A6", },
                   { value: "Manual No", background: "#A9A7A6", },
                   { value: "REMARKS", background: "#A9A7A6", },
                   { value: "Dealer", background: "#A9A7A6", },
                   { value: "Party Type", background: "#A9A7A6", },
                   { value: "Shipping Address", background: "#A9A7A6", },
                   { value: "Shipping ContactNo", background: "#A9A7A6", },
                   { value: "Unit", background: "#A9A7A6", },
                   { value: "Quantity", background: "#A9A7A6", },
                   { value: "Unit Price", background: "#A9A7A6", },
                   { value: "Total Price", background: "#A9A7A6", },
            ],
        });

        WriteData(e.data);

        //recursive function to write the grouped/ungrouped data
        function WriteData(array) {
            array.forEach(function (row, index) {
                if (typeof (row.items) != "undefined") { //if array contains nested items, write a row with group field and enter recursion
                    SheetRow.push({
                        cells: [{
                            value: row.field + " : " + row.value,
                            background: "#E1E1E1",
                            colSpan: 16,//to span the total number of columns
                            fontSize: 12,
                        }]
                    });
                    WriteData(row.items);
                }
                else { //if array contains no nested items write the row to excelsheet
                    SheetRow.push({
                        cells: [{
                            value: row.SalesDate,
                        }, {
                            value: row.Miti,
                        }, {
                            value: row.InvoiceNumber,
                        }, {
                            value: row.CustomerName,
                        }, {
                            value: row.ItemName,
                        }, {
                            value: row.LocationName,
                        }, {
                            value: row.ManualNo,
                        }, {
                            value: row.REMARKS,
                        }, {
                            value: row.Dealer,
                        }, {
                            value: row.PartyType,
                        }, {
                            value: row.ShippingAddress,
                        }, {
                            value: row.ShippingContactNo,
                        }, {
                            value: row.Unit,
                        }, {
                            value: row.Quantity,
                        }, {
                            value: row.UnitPrice,
                        }, {
                            value: row.TotalPrice,
                        }]
                    });
                }
            });
        }

        //push the footer variable containing total values
        SheetRow.push({
            cells: footer,
        });

        //pushing Report header details
        SheetRow.unshift({
            cells: [{ value: "Plan Report".split('').join(' '), colSpan: footerTemp.length }]
        });
        SheetRow.unshift({
            cells: [{ value: "From :- " + fromADdate + "(" + fromBSdate + ")" + "\t To :- " + toADdate + "(" + toBSdate + ")", colSpan: footerTemp.length }]
        });
        for (var companyCount = 0; companyCount < branches.length; companyCount++) {
            SheetRow.unshift({
                cells: [{ value: branches[companyCount].Company + " :- " + branches[companyCount].Branches.join(','), colSpan: footerTemp.length }]
            });
        }
        SheetRow.unshift({
            cells: [{ value: companyName.split('').join(' '), colSpan: footerTemp.length }]
        });

        //initializing a workbook
            var Workbook = new kendo.ooxml.Workbook({
                sheets: [{
                    columns: [
                        { width: 110 },
                        @for (int i = 0; i < 15; i++)
                        {
                            <text>{ autoWidth: true },</text>
                        }
                    ],
                    rows: SheetRow
                }]
            });

        //finally saving the excel sheet
        kendo.saveAs({
            dataURI: Workbook.toDataURL(),
            fileName: "Plan Report.xlsx"
        });
    }*@

    </script>
}




