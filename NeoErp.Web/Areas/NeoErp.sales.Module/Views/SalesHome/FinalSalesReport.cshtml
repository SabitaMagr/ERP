@using NeoErp.Core.Models;
@using NeoErp.Core.Models.CustomModels
@using NeoErp.Core;
@using NeoErp.Core.Infrastructure;
@model List<NeoErp.Sales.Modules.Services.Models.ChargesTitle>
@{
    ViewBag.Title = "Home Page";
    var ItemCharges = ViewBag.itemCharges as List<NeoErp.Sales.Modules.Services.Models.ChargesTitle>;
}
@{
    var workingContent = EngineContext.Current.Resolve<IWorkContext>();
}
@*<link href="@Styles.Url("~/Content/Kendo/styles/kendo.metro.min.css")" rel="stylesheet" />*@
<style>
        /*.btn-group {
        margin-right: 7px;
    }*/
        /*a#RunQuery {
        margin-right: 5px;
    }*/
        div.k-grid-header th.k-header, tr.k-filter-row > th {
            text-align: center;
        }
    .k-hidden {
       display:none;
    }
    /*.page-bar {
            margin-bottom: 0px !important;
        }*/
    .k-grid table {
        table-layout: fixed;
    }

        .no-data {
            background-color: red;
        }
        /*#grid thead{
             font-size:11px;
        }*/
        .k-grid td {
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        .k-grid-content {
            font-size: 10px;
        }

        .k-grid-footer {
            font-size: 10px;
        }
        /*.floatright
        {
            float:right;
            margin-top:2px !important;
        }*/

</style>
<div class="page-content">
    <div class="page-bar">
        <ul class="page-breadcrumb">
            @*<li>
                <i class="fa fa-home"></i>
                <a href="/sales/SalesHome/Dashboard">Home</a>
                <i class="fa fa-angle-right"></i>
            </li>*@
            @*<li>
                <a href="#/Sales/FinalSalesReport">Sales Register Analysis</a>
                <i class="fa fa-angle-right"></i>
            </li>*@
            @*<li>
                <a href="sales/saleshome/dashboard/Dashboard">Organiser</a>
                <i class="fa fa-angle-right"></i>
            </li>*@
        </ul>
        <div class="page-toolbar">
            <div class="btn-group pull-right">

                <div class="actions">                    
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/DateField.cshtml", false)
                    </div>
                    @Html.Partial("~/Views/Shared/Controls/ConsolidateFilter.cshtml", true)
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/_AdvancedFilter.cshtml", new AdvancedFilterSettingsModel()
                   {
                       ShowCustomerFilter = true,
                       ShowProductFilter = true,
                       ShowPartyTypeFilter = true,
                       ShowCategoryFilter = true,
                       ShowLocationFilter = false,
                       ShowDocumentFilter = true,
                       ShowEmployeeFilter = true,
                       ShowAgentFilter = false,
                       ShowDivisionFilter=true,
                       ShowAreaFilter=true,
                      
                       //ShowCompanyFilter = true,
                       //ShowBranchFilter = true
                   })
                    </div>
                    @Html.Partial("~/Views/Shared/Controls/_reportFilterSettings.cshtml", new ReportFilterSettingsModel()
               {
                   ShowAmountFigureFilter = true,
                   ShowAmountFilter = true,
                   ShowAmountRoundUpFilter = true,
                   ShowRangeAmountFilter = true,
                   ShowRangeQuantityFilter = true,
                   ShowRangeRateFilter = true
               })


                    @Html.Partial("~/Views/Shared/Controls/ComposeMail.cshtml", new FileMailAttachment() { })
                    <a class="btn btn-circle btn-icon-only btn-default" id="RunQuery" href="#" data-toggle="tooltip" data-html="true" title="Refresh" data-placement="left">
                        <i class="icon-control-play"></i>
                    </a>
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/_ReportConfig.cshtml", "FinalSalesReport")
                    </div>


                </div>
            </div>
        </div>
    </div>

    <!-- END PAGE HEADER-->
    <!-- BEGIN PAGE CONTENT-->
    <div class="row collapse in" id="demo">
        <div class="col-md-12">
            <div class="portlet light bordered">
                <div class="portlet-body form">
                    <div class="row">
                        <div id="grid"></div>
                        <script id="rowTemplate" type="text/x-kendo-tmpl">
                            <tr class="k-master-row" data-uid="#: uid #" role="row">
                                #= new Array(this.group().length + 1).join('<td class="k-group-cell"></td>') #
                                <td class="k-hierarchy-cell"><a href="javascript:;" class="k-icon k-i-expand"></a></td>                           
                                <td>
                                   #= getDateFormat(SalesDate)#
                                </td>
                                <td role="gridcell">
                                    <span>#: Miti# </span>

                                </td>
                                <td role="gridcell">
                                    #: InvoiceNumber#
                                </td>
                                <td role="gridcell">
                                    #: CustomerName#
                                </td>

                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", GrossAmount)# </span>

                                </td>
                                @foreach (var item in Model.Where(x => x.ChargesHeaderNo != "VTD"))
                                {
                                <text>

                                    <td role="gridcell">
                                        <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", myCustomFunction(data.charges,'@item.ChargesHeaderNo'))# </span>

                                    </td>

                                </text>
                                }
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", NetAmount)# </span>

                                </td>
                                @foreach (var item in Model.Where(x => x.ChargesHeaderNo == "VTD"))
                                {
                                <text>

                                    <td role="gridcell">

                                        <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", myCustomFunction(data.charges,'@item.ChargesHeaderNo'))# </span>
                                    </td>
                                </text>
                                }
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", InvoiceAmount)# </span>

                                </td>
                            </tr>
                        </script>

                        <script id="altRowTemplate" type="text/x-kendo-tmpl">
                            <tr class="k-alt k-master-row" data-uid="#: uid #" role="row">
                                #= new Array(this.group().length + 1).join('<td class="k-group-cell"></td>') #
                                @*<td class="k-group-cell"> </td>*@
                                <td class="k-hierarchy-cell"><a href="javascript:;" class="k-icon k-i-expand"></a></td>
                                <td>
                                   #= getDateFormat(SalesDate)#
                                </td>
                                <td role="gridcell">
                                    <span>#: Miti# </span>

                                </td>
                                <td role="gridcell">
                                    #: InvoiceNumber#
                                </td>
                                <td role="gridcell">
                                    #: CustomerName#
                                </td>

                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", GrossAmount)# </span>

                                </td>
                                @foreach (var item in Model.Where(x => x.ChargesHeaderNo != "VTD"))
                                {
                                <text>

                                    <td role="gridcell">
                                        <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", myCustomFunction(data.charges,'@item.ChargesHeaderNo'))# </span>

                                    </td>

                                </text>
                                }
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", NetAmount)# </span>

                                </td>
                                @foreach (var item in Model.Where(x => x.ChargesHeaderNo == "VTD"))
                                {
                                <text>

                                    <td role="gridcell">

                                        <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", myCustomFunction(data.charges,'@item.ChargesHeaderNo'))# </span>
                                    </td>
                                </text>
                                }
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", InvoiceAmount)# </span>

                                </td>

                            </tr>
                        </script>

                        <script type="text/x-kendo-template" id="template">
                            <div class="tabstrip">

                                <div>
                                    <div class="orders"></div>
                                </div>

                            </div>

                        </script>

                        <script id="DetailaltRowTemplate" type="text/x-kendo-tmpl">
                            <tr class="k-alt k-master-row" data-uid="#: uid #" role="row">
                               
                                <td role="gridcell">
                                    <span>#: ProductName# </span>

                                </td>
                                <td role="gridcell">
                                    #: UNIT#
                                </td>
                                <td role="gridcell">
                                    #: Quanity#
                                </td>
                                <td role="gridcell">
                                    #: Rate#
                                </td>
                                
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", GrossAmount)# </span>

                                </td>
                                @foreach (var item in ItemCharges.Where(x => x.ChargesHeaderNo != "VTD"))
                                {
                                    <text>

                                        <td role="gridcell">
                                            <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", myCustomiTEMFunction(data.charges,'@item.ChargesHeaderNo'))# </span>

                                        </td>

                                    </text>
                                }
                                <td role="gridcell">
                                    <span style="float:right">#= kendo.format("{0:n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString()+"}", NetAmount)# </span>

                                </td>
                             

                            </tr>
                        </script>
                        @Html.Partial("~/Views/Shared/Controls/_GridToolbar.cshtml")
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- END PAGE CONTENT-->
</div>
<script src="@Scripts.Url("~/JS/DateFilter.js?V5")" type="text/javascript"></script>
<script src="@Scripts.Url("~/JS/dynamicReport.js?V2")" type="text/javascript"></script>
<script type="text/javascript">
    var fileMailSender = new ManualEmailSender({
        gridName: "grid",
        gridRefreshTriggerName: "RunQuery",
        reportName: "FinalSalesReport"
    });


</script>
<script type="text/javascript">
    var a = location.hash;
    var b = location.pathname;
    var url = (b + a);
    $(".active").removeClass();
    $("a[href='" + url + "']").parent().addClass("active");
    $("a[href='" + url + "']").parent().parent().slideDown("slow");

</script>
<script>

    var reportConfig = GetReportSetting("FinalSalesReport");
    var urltest = window.location.protocol + "//" + window.location.host + "/api/SalesHome/GetSalesRegisterMasterReport";

    function myCustomFunction(arrey, header) {
        var result = $.grep(arrey, function (e) { return e.CHARGE_CODE === header; });

        var value = 0;
        if (result.length == 0) {

        } else if (result.length == 1) {
            value = result[0].CHARGE_AMOUNT
        }
        return value;
    }

    function getDateFormat(date) {
        return kendo.format("{0:" + reportConfig.dateFormat + "}", date)
    }

    function myCustomiTEMFunction(arrey, header) {
        var result = $.grep(arrey, function (e) { return e.CHARGE_CODE === header; });

        var value = 0;
        if (result.length == 0) {

        } else if (result.length == 1) {
            value = result[0].CHARGE_AMOUNT
        }
        return value;
    }
    function myCustomFunctionWithTitle(arrey, header) {

        var result = $.grep(arrey, function (e) { return e.CHARGE_EDESC === header; });//previosly header.value
        var value = 0;
        if (result.length == 0) {

        } else if (result.length == 1) {
            value = result[0].CHARGE_AMOUNT
        }
        return value;
    };
    function getSum(value) {
        var datasource = $("#grid").data("kendoGrid").dataSource;
        var result;
        //loops through the dataSource view
        $(datasource.view()).each(function (index, element) {
            //compares view value with the current template value
            if (element.value === value) {
                result = element.aggregates.size.sum; //gets the aggregate value
            }
        });

        return result;
    }
    function ExportToExcel(e) {

        //Report header details
        var companyName = ('@workingContent.CurrentUserinformation.company_name');
        var fromADdate = $("#FromDateVoucher").val()
        var toADdate = $("#ToDateVoucher").val();
        var fromBSdate = $("#fromInputDateVoucher").val();
        var toBSdate = $("#toInputDateVoucher").val();
        var branches = ReportFilter.getBranchs();

        //create a footer row to display totals
        var footer = [];
        footer.push({ value: "Total", colSpan: 4, textAlign: "center", bold: true, })
        var footerTemp = e.workbook.sheets[0].rows[e.workbook.sheets[0].rows.length - 1].cells;
        for (var i = 0; i < footerTemp.length; i++) {
            if (typeof (footerTemp[i].value) != "undefined" && footerTemp[i].value != "<span>Total</span>")
                footer.push({ value: $(footerTemp[i].value).text(), textAlign: "right", bold: true });
        }
        var SheetRow = [];//array to store the rows
        //push the header to row array
        SheetRow.push({
            cells: [
               
                { value: "Miti", background: "#A9A7A6", },
                 {
                    value: "Date", background: "#A9A7A6" },
                                      { value: "Invoice No", background: "#A9A7A6", },
                                      { value: "Customer Name", background: "#A9A7A6", },
                                      {
                                          value: "Gross Amount", background: "#A9A7A6", aggregates: "count",
                                          groupHeaderTemplate: "Sum size of #= value #: #= getSum(value) #"  },

                                       @foreach (var item in Model.Where(x => x.ChargesHeaderNo != "VTD"))
                                    {
                                    <text>{ value: '@item.ChargesHeaderTitle', background: "#A9A7A6", },</text>
                                    }

                                      { value: "Net Amount", background: "#A9A7A6", },

                                       @foreach (var item in Model.Where(x => x.ChargesHeaderNo == "VTD"))
                                    {
                                    <text>{ value: '@item.ChargesHeaderTitle', background: "#A9A7A6", },</text>
                                    }
                                      { value: "Invoice Total", background: "#A9A7A6", },
            ]
        });

        WriteData(e.data);

        //recursive function to write the grouped/ungrouped data
        function WriteData(array) {
            array.forEach(function (row, index) {
                if (typeof (row.items) != "undefined") { //if array contains nested items, write a row with group field and enter recursion
                    SheetRow.push({
                        cells: [{
                            value: row.field + " : " + row.value,
                            background: "#E1E1E1",
                            colSpan: footerTemp.length,//to span the total number of columns
                            fontSize: 12,
                        }]
                    });
                    WriteData(row.items);
                }
                else { //if array contains no nested items write the row to excelsheet
                    SheetRow.push({
                        cells: [ {
                            value: row.Miti,
                        },{
                            value: getDateFormat(row.SalesDate),
                        },{
                            value: row.InvoiceNumber,
                        }, {
                            value: row.CustomerName,
                        }, {
                            value: row.GrossAmount.toFixed(2), textAlign:"right",
                        },

                        @foreach (var item in Model.Where(x => x.ChargesHeaderNo != "VTD"))
                        {
                            <text>
                                {
                                    value: myCustomFunctionWithTitle(row.charges, '@item.ChargesHeaderTitle').toFixed(2), textAlign:"right",
                                },
                                </text>
                            }

                            {
                                value: row.NetAmount.toFixed(2), textAlign:"right",
                            },

                        @foreach (var item in Model.Where(x => x.ChargesHeaderNo == "VTD"))
                        {
                            <text>
                                {
                                    value: myCustomFunctionWithTitle(row.charges, '@item.ChargesHeaderTitle').toFixed(2), textAlign:"right",
                                },
                                </text>
                            }
                        {
                            value: row.InvoiceAmount.toFixed(2), textAlign:"right",
                        }]
                    });
                }
            });
        }

        //push the footer variable containing total values
        SheetRow.push({
            cells: footer,
        });

        //pushing Report header details
        SheetRow.unshift({
            cells: [{ value: "Sales Register Analysis".split('').join(' '), colSpan: footerTemp.length }]
        });
        //SheetRow.unshift({
        //    cells: [{ value: "From :- " + fromADdate + "(" + fromBSdate + ")" + "\t To :- " + toADdate + "(" + toBSdate + ")", colSpan: footerTemp.length }]
        //});
        //for (var companyCount = 0; companyCount < branches.length; companyCount++) {
        //    SheetRow.unshift({
        //        cells: [{ value: branches[companyCount].Company + " :- " + branches[companyCount].Branches.join(','), colSpan: footerTemp.length }]
        //    });
        //}
        //SheetRow.unshift({
        //    cells: [{ value: companyName.split('').join(' '), colSpan: footerTemp.length }]
        //});
        var filterText = $("#AdvanceFilter").attr('data-original-title');
        if (filterText.indexOf('|') < 0) {
            filterText = $((filterText).replace(/<strong>/g, "|")).text().replace('|', '').split('|');
            $.each(filterText, function (k,item) {
                SheetRow.unshift({
                    cells: [{ value: item, colSpan: footerTemp.length }]
                });
            });
        }
        if (filterText.indexOf('Date Range') < 0) {
            SheetRow.unshift({
                cells: [{ value: "From :- " + fromADdate + "(" + fromBSdate + ")" + "\t To :- " + toADdate + "(" + toBSdate + ")", colSpan: footerTemp.length }]
            });
        }
        for (var companyCount = 0; companyCount < branches.length; companyCount++) {
            SheetRow.unshift({
                cells: [{ value: branches[companyCount].Company + " :- " + branches[companyCount].Branches.join(','), colSpan: footerTemp.length }]
            });
        }
        //initializing a workbook with above prepared rows
        var Workbook = new kendo.ooxml.Workbook({
            sheets: [{
                columns: [
                    { width: 110 },
                    @for(int i=0;i<(Model.Where(x => x.ChargesHeaderNo != "VTD").Count()+ Model.Where(x => x.ChargesHeaderNo == "VTD").Count() + 6); i++)
                    {
                        <text>{ autoWidth: true },</text>
                    }
                ],
                rows: SheetRow,
            }]
        });
        //finally saving the excel sheet
        kendo.saveAs({
            dataURI: Workbook.toDataURL(),
            fileName: "Sales Report.xlsx"
        });
    }

    $(".applydp").on("click", function (evt) {
        evt.preventDefault();
        $("#RunQuery").trigger("click");
    });








    $("#loadAdvancedFilters").on("click", function (evt) {
        evt.preventDefault();
        $("#RunQuery").trigger("click");
    });

    $(document).ready(function () {
        // init function for the data load

        DateFilter.init(function () {
            consolidate.init(function () {
                BindGrid(urltest);
            });
        });






        $("#RunQuery").click(function (evt) {
            evt.preventDefault();
            KendoGridRefresh(urltest);
        });

        fileMailSender.init();


    });
    function BindGrid(readurl) {
        reportConfig = GetReportSetting("FinalSalesReport");
        console.log(reportConfig);
        
        var dataSource = new kendo.data.DataSource({
            type: "json",
            transport: {
                read: {
                    url: readurl, // <-- Get data from here.
                    dataType: "json", // <-- The default was "jsonp".
                    type: "POST",




                    contentType: "application/json; charset=utf-8"
                },
                parameterMap: function (options, type) {

                    var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));
                    delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                    delete paramMap.$format; // <-- remove format parameter.
                    return paramMap;

                }
            },
            error: function (e) {
                displayPopupNotification("Sorry error occured while processing data", "error");
            },
            serverFiltering: true,
            serverSorting: true,
            serverGrouping: false,
            serverAggregates: true,
            serverPaging: true,
            schema: {
                data: "gridSalesRegReport", // records are returned in the "data" field of the response
                total: "total", // total number of records is in the "total" field of the response
                aggregates: "AggregationResult",
                model: {
                    fields: {
                        MITI: { type: "string" },
                        SalesDate: { type: "string" },
                        InvoiceNumber: { type: "string" },
                        CustomerName: { type: "string" },
                        GrossAmount: { type: "number" },
                        Discount: { type: "number" },
                        NetAmount: { type: "number" },
                        Vat: { type: "number" },
                        InvoiceAmount: { type: "number" },

                    }
                }
            },

            aggregate: [
                            { field: "GrossAmount", aggregate: "sum" },
                            //{ field: "Discount", aggregate: "sum" },
                            { field: "NetAmount", aggregate: "sum" },
                            //{ field: "Vat", aggregate: "sum" },
                            { field: "InvoiceAmount", aggregate: "sum" },
                             @foreach (var item in Model)
                                {
                                    <text>
                                     {
                                         field: '@item.ChargesHeaderNo',
                                         aggregate: "sum"
                                     },
                              </text>
                                }
            ],
            pageSize: reportConfig.defaultPageSize,
        });
        
        var grid = $("#grid").kendoGrid({
            dataSource: dataSource,
            toolbar: kendo.template($("#toolbar-template").html()),
            excel: {
                fileName: "Sales Report",
                //proxyURL: "//demos.telerik.com/kendo-ui/service/export",
                allPages: true
            },
            excelExport: function (e) {

                //ExportToExcel(e);
                e.preventDefault();
                var workbook = e.workbook;
                detailExportPromises = [];
                var masterData = e.data;
                $.each(workbook.sheets[0].rows, function (i, item) {
                    if (i > 0 && i < workbook.sheets[0].rows.length - 1 && masterData[i - 1].charges.length > 0) {
                        //debugger;
                        //exporting discount amount in master form to excel
                        if (masterData[i - 1].charges.length >= 1) {
                            debugger;
                            var k = 4;
                            for (var j = 0; j < masterData[i - 1].charges.length; j++) {
                                ++k;
                                if (masterData[i - 1].charges[j].CHARGE_CODE == "SPDD")
                                    item.cells[k].value = masterData[i - 1].charges[j].CHARGE_AMOUNT == undefined ? 0 : masterData[i - 1].charges[j].CHARGE_AMOUNT;

                                 if (masterData[i - 1].charges[j].CHARGE_CODE == "EDD")
                                    item.cells[k].value = masterData[i - 1].charges[j].CHARGE_AMOUNT == undefined ? 0 : masterData[i - 1].charges[j].CHARGE_AMOUNT;

                                 if (masterData[i - 1].charges[j].CHARGE_CODE == "DCD")
                                    item.cells[k].value = masterData[i - 1].charges[j].CHARGE_AMOUNT == undefined ? 0 : masterData[i - 1].charges[j].CHARGE_AMOUNT;
                                 if (masterData[i - 1].charges[j].CHARGE_CODE == "VTD")
                                    item.cells[k+1].value = masterData[i - 1].charges[j].CHARGE_AMOUNT == undefined ? 0 : masterData[i - 1].charges[j].CHARGE_AMOUNT;
                            }
                        }
                        else
                        {
                           // debugger;
                            item.cells[5].value = 0;
                            item.cells[6].value = 0;
                            item.cells[7].value = 0;
                            item.cells[9].value = 0;

                        }

                    }
                });
                for (var rowIndex = 0; rowIndex < masterData.length; rowIndex++)
                {
                    var a = masterData[rowIndex];
                    exportChildData(a.InvoiceNumber, rowIndex, a.COMPANY_CODE);
                }

                $.when.apply(null, detailExportPromises)
                    .then(function () {
                        // get the export results
                        
                        var detailExports = $.makeArray(arguments);
                        // sort by masterRowIndex
                        detailExports.sort(function (a, b) {
                            return a.masterRowIndex - b.masterRowIndex;
                        });
                        // add an empty column
                        workbook.sheets[0].columns.unshift({
                            width: 90
                        });

                        // prepend an empty cell to each row
                        //for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                        //    workbook.sheets[0].rows[i].cells.unshift({});
                        //}

                        // merge the detail export sheet rows with the master sheet rows
                        // loop backwards so the masterRowIndex doesn't need to be updated
                        for (var i = detailExports.length - 1; i >= 0; i--) {
                            var masterRowIndex = detailExports[i].masterRowIndex + 1; // compensate for the header row

                            var sheet = detailExports[i].sheet;

                             //prepend an empty cell to each row
                            for (var ci = 0; ci < sheet.rows.length; ci++) {
                                if (sheet.rows[ci].cells[0].value) {
                                    sheet.rows[ci].cells.unshift({});
                                }
                            }

                            // insert the detail sheet rows after the master row
                            [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                        }

                        for (var len = 1; len < workbook.sheets[0].columns.length; len++) {
                            workbook.sheets[0].columns[len].length = 160;
                        }

                        //Add filter information
                        var companyName = ('@workingContent.CurrentUserinformation.company_name');
                        var fromADdate = $("#FromDateVoucher").val()
                        var toADdate = $("#ToDateVoucher").val();
                        var fromBSdate = $("#fromInputDateVoucher").val();
                        var toBSdate = $("#toInputDateVoucher").val();
                        var branches = ReportFilter.getBranchs();

                        workbook.sheets[0].rows.unshift({
                            cells: [{ value: "Sales Report".split('').join(' '), colSpan: 7 }]
                        });
                        var filterText = $("#AdvanceFilter").attr('data-original-title');
                        if (filterText.indexOf('|') < 0) {
                            filterText = $((filterText).replace(/<strong>/g, "|")).text().replace('|', '').split('|').reverse();;
                            $.each(filterText, function (k, item) {
                                workbook.sheets[0].rows.unshift({
                                    cells: [{ value: item, colSpan: 7 }]
                                });
                            });
                        }
                        if (filterText.toString().indexOf('Date Range') < 0) {
                            workbook.sheets[0].rows.unshift({
                                cells: [{ value: "From :- " + fromADdate + "(" + fromBSdate + ")" + "\t To :- " + toADdate + "(" + toBSdate + ")", colSpan: 7 }]
                            });
                        }
                        for (var companyCount = 0; companyCount < branches.length; companyCount++) {
                            workbook.sheets[0].rows.unshift({
                                cells: [{ value: branches[companyCount].Company + " :- " + branches[companyCount].Branches.join(','), colSpan: 7}]
                            });
                        }
                       
                        // save the workbook
                        kendo.saveAs({
                            dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                            fileName: "Sales Report.xlsx"
                        });


                    });
            },

            pdf: {
                allPages: true,
                avoidLinks: true,
                pageSize: "auto",
                //paperSize: [1100 , 1430],
                margin: {
                    top: "2m",
                    left: "1cm",
                    right: "1cm",
                    bottom: "1cm"
                },
                landscape: true,
                repeatHeaders: true,
                scale: 0.8,
                proxyURL: "http://demos.telerik.com/kendo-ui/service/export"
            },
            allowCopy: true,
            height: window.innerHeight - 100,
            pageable: {
                refresh: true,
                pageSizes: reportConfig.itemPerPage,
                buttonCount: 5
            },
            sortable: true,
            height: 550,
           
            reorderable: true,
            groupable: true,
            resizable: true,
            filterable: {
                extra: false,
                operators: {
                    number: {
                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "is greater than or equal to	",
                        gt: "is greater than",
                        lte: "is less than or equal",
                        lt: "is less than",
                    },
                    string: {

                        eq: "Is equal to",
                        neq: "Is not equal to",
                        startswith: "Starts with	",
                        contains: "Contains",
                        doesnotcontain: "Does not contain",
                        endswith: "Ends with",
                    },
                    date: {
                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "Is after or equal to",
                        gt: "Is after",
                        lte: "Is before or equal to",
                        lt: "Is before",
                    }
                }
            },

            rowTemplate: $.proxy(kendo.template($("#rowTemplate").html()), dataSource),
            altRowTemplate: $.proxy(kendo.template($("#altRowTemplate").html()), dataSource),
            columnMenu: true,
            columnMenuInit: function (e) {
                wordwrapmenu(e);
                checkboxItem = $(e.container).find('input[type="checkbox"]');
            },
            columnShow: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('FinalSalesReport', 'grid');
            },
            columnHide: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('FinalSalesReport', 'grid');
            },
            detailTemplate: kendo.template($("#template").html()),
            detailInit: detailInit,
            scrollable: true,
            dataBound: function (o) {

                var grid = o.sender;
                if (grid.dataSource.total() == 0) {
                    var colCount = grid.columns.length + 1;
                    $(o.sender.wrapper)
                        .find('tbody')
                        .append('<tr class="kendo-data-row" style="font-size:12px;"><td colspan="' + colCount + '" class="alert alert-danger">Sorry, no data :(</td></tr>');
                    displayPopupNotification("No Data Found Given Date Filter.", "info");
                }
                else {
                    var g = $("#grid").data("kendoGrid");
                    for (var i = 0; i < g.columns.length; i++) {
                        g.showColumn(i);
                    }
                    $("div.k-group-indicator").each(function (i, v) {
                        g.hideColumn($(v).data("field"));
                    });
                }
                $('div').removeClass('.k-header k-grid-toolbar');


                UpdateReportUsingSetting("FinalSalesReport", "grid");
            },
            columns: [
                          
                          {
                              field: "Miti",
                              title: "Miti",
                          },
                          {
                                field: "SalesDate",
                                title: "Date",
                                width: "90",
                              //  format: "{0:" + reportConfig.dateFormat + "}",
                               // template: "kendo.toString(kendo.parseDate(SalesDate, 'yyyy-MM-dd')",
                           },
                          {
                              field: "InvoiceNumber",
                              title: "Invoice No",

                          },
                          {
                              field: "CustomerName",
                              title: "Customer Name",
                              width: "150",
                              footerTemplate: "<span>Total</span>"

                              //template: '<span style="float:right">#= kendo.toString(CR_OPENING, "n") #</span>'
                          },
                           {
                               field: "GrossAmount",
                               title: "Gross Amount",
                               width: "70",
                               attributes:
                                {
                                    style: "text-align:right;"
                                },
                               //attributes: {
                               //    style: "text-align: left;"
                               //},
                               format: "{0:n}",
                               aggregates: ["sum"],
                               groupFooterTemplate: '<span style="float:right"> #=kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                               footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',

                           },
                            @foreach (var item in Model.Where(x => x.ChargesHeaderNo != "VTD"))
                               {
                                   <text>
                                    {
                                        field: '@item.ChargesHeaderNo',
                                        title: '@item.ChargesHeaderTitle',
                                        groupable: false,
                                        attributes: {
                                            style: "text-align: right;"
                                        },
                                        format: "{0:n}",
                                        aggregates: ["sum"],
                                      
                                        footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                                    },
                             </text>
                               }

                           {
                               field: "NetAmount",
                               title: "Taxable Amount",
                               width: "100",
                               attributes: {
                                   style: "text-align: right;"
                               },
                               format: "{0:n}",
                               aggregates: ["count", "min", "sum"],
                               groupFooterTemplate: '<span style="float:right"> #=kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                               footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>'

                           },
                            @foreach (var item in Model.Where(x => x.ChargesHeaderNo == "VTD"))
                                   {
                                         <text>
                                        {
                                            field: '@item.ChargesHeaderNo',
                                            title: '@item.ChargesHeaderTitle',
                                           groupable: false,
                                            attributes: {
                                                style: "text-align: right;"
                                            },
                                            format: "{0:n}",
                                            footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                                        },
                                    </text>
                                   }
                            {
                                field: "InvoiceAmount",
                                title: "Net Amount",
                                width: "100",
                                attributes: {
                                    style: "text-align: right;"
                                },
                                format: "{0:n}",
                                aggregates: ["count", "min", "sum"],
                                groupFooterTemplate: '<span style="float:right"> #=kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                                footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                            },

            ]
        });

        function exportChildData(InvoiceNumber, rowIndex, Company_Code) {
            var deferred = $.Deferred();
            detailExportPromises.push(deferred);
            var localDS = new kendo.data.DataSource({
                type: 'json',
                batch: true,
                transport: {
                    read: {
                        async: false,
                        url: window.location.protocol + "//" + window.location.host + "/" + "api/SalesHome/GetSalesRegisterChilds?SalesNo=" + InvoiceNumber + "&CompanyCode=" + Company_Code, // <-- Get data from here.
                        dataType: 'json',
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8'
                    },
                    parameterMap: function (options, type) {
                        var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));
                        delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                        delete paramMap.$format; // <-- remove format parameter.
                        return paramMap;

                    },
                    error: function (e) {
                        displayPopupNotification("Sorry error occured while processing data", "error");
                    },
                    schema: {
                        model: {
                            id: "ITEM_CODE",
                            fields: {
                                ProductName: { editable: false, nullable: true },
                                Quanity: { editable: false, nullable: true },
                                Rate: { editable: false, nullable: true },
                                GrossAmount: { editable: false, nullable: true },
                                Discount: { editable: false, nullable: true },
                                NetAmount: { editable: false, nullable: true },
                                INVOICENo: { editable: false, nullable: true },
                                UNIT: { editable: false, nullable: true },
                                ITEM_CODE: { editable: false, nullable: true },
                            }
                        }
                    },
                   aggregate: [
                            { field: "GrossAmount", aggregate: "sum" },
                            //{ field: "Discount", aggregate: "sum" },
                            { field: "NetAmount", aggregate: "sum" },

                             @foreach (var item in ItemCharges)
                            {
                                <text>
                                 {
                                     field: '@item.ChargesHeaderNo',
                                     aggregate: "sum"
                                 },
                                </text>
                            }
            ],
                }
            });
            //localDS.filter({ field: "InvoiceNumber", operator: "eq", value: InvoiceNumber });
            var exporter = new kendo.ExcelExporter({
                columns: [{
                    field: "ProductName",
                    title: "Product Name",
                    //footerTemplate: '<span style="float:right">Total Amount</span>',
                },
                {
                    field: "UNIT",
                    title: "Unit",
                    width: "150",
                    attributes: {
                        style: "text-align: center;"
                    },
                },
                {
                    field: "Quanity",
                    title: "Qty",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "5%",
                    //footerTemplate: '<span style="float:right">#= sum#</span>',
                },
                {
                    field: "Rate",
                    title: "Rate",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "10%",
                },
                {
                    field: "GrossAmount",
                    title: "Gross Amount",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "10%",
                    //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                },
                {
                    field: "Discount",
                    title: "Discount",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "10%",
                    //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                },
                  @*@foreach (var item in ItemCharges.Where(x => x.ChargesHeaderNo != "VTD"))
                               {
                                   <text>
                                    {
                                        field: '@item.ChargesHeaderNo',
                                        title: '@item.ChargesHeaderTitle',
                                        attributes: {
                                            style: "text-align: right;"
                                        },
                                        width: "10%",
                                        format: "{0:n}",
                                        //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                                    },
                             </text>
                               }*@

                           {
                               field: "NetAmount",
                               title: "Net Amount",
                               width: "15%",
                               attributes: {
                                   style: "text-align: right;"
                               },
                               format: "{0:n}",
                               aggregates: ["count", "min", "sum"],
                               //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>'

                           }],
                dataSource: localDS
            });

            exporter.workbook().then(function (book, data) {
                $.each(book.sheets[0].rows, function (i, item) {
                    if (i > 0 && data[i - 1].charges.length > 0) {
                        item.cells[5].value = data[i - 1].charges[0].CHARGE_AMOUNT;
                    }
                });
                deferred.resolve({
                    masterRowIndex: rowIndex,
                    sheet: book.sheets[0]
                });
            });
        }
    }



    function KendoGridRefresh(readUrl) {
        $('#grid').val('');
        $('#grid').html('');
        BindGrid(readUrl);

    }
    function detailInit(e) {
        
        var detailRow = e.detailRow;
        var Rowdata = e.data;
        var id = Rowdata.InvoiceNumber;
        var companyCode = Rowdata.COMPANY_CODE;

        var dataSourceITem = new kendo.data.DataSource({
            type: "json",

            transport: {
                read: {
                    url: window.location.protocol + "//" + window.location.host + "/" + "api/SalesHome/GetSalesRegisterChilds?SalesNo=" + id + "&CompanyCode=" + companyCode, // <-- Get data from here.
                    dataType: "json", // <-- The default was "jsonp".
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                },
                parameterMap: function (options, type) {
                    var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));
                    delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                    delete paramMap.$format; // <-- remove format parameter.
                    return paramMap;

                }
            },
            error: function (e) {
                displayPopupNotification("Sorry error occured while processing data", "error");
            },
            serverFiltering: false,
            serverGrouping: false,
            serverAggregates: false,
            serverPaging: false,


            aggregate: [
                            { field: "GrossAmount", aggregate: "sum" },
                            //{ field: "Discount", aggregate: "sum" },
                            { field: "NetAmount", aggregate: "sum" },

                             @foreach (var item in ItemCharges)
                            {
                                <text>
                                 {
                                     field: '@item.ChargesHeaderNo',
                                     aggregate: "sum"
                                 },
                                </text>
                            }
            ],
            pageSize: 100,
        });
        detailRow.find(".orders").kendoGrid({
            dataSource: dataSourceITem,
            rowTemplate: $.proxy(kendo.template($("#DetailaltRowTemplate").html()), dataSourceITem),
            altRowTemplate: $.proxy(kendo.template($("#DetailaltRowTemplate").html()), dataSourceITem),
            sortable: true,
            pageable: false,
            sortable: true,
            reorderable: true,
            resizable: true,
            columns: [
                {
                    field: "ProductName",
                    title: "Product Name",
                    // width: "55",
                    //footerTemplate: '<span style="float:right">Total Amount</span>',
                },
                {
                    field: "UNIT",
                    title: "Unit",
                    width: "5%",
                    attributes: {
                        style: "text-align: center;"
                    },
                },
                {
                    field: "Quanity",
                    title: "Qty",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "5%",
                    //footerTemplate: '<span style="float:right">#= sum#</span>',
                },
                {
                    field: "Rate",
                    title: "Rate",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "10%",
                },
                {
                    field: "GrossAmount",
                    title: "Gross Amount",
                    attributes: {
                        style: "text-align: right;"
                    },
                    width: "10%",
                    //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n"+ReportFilter.parseDecimalPlace("AmountRoundUpFilter").toString())#</span>',
                },
                  @foreach (var item in ItemCharges.Where(x => x.ChargesHeaderNo != "VTD"))
                               {
                                   <text>
                                    {
                                        field: '@item.ChargesHeaderNo',
                                        title: '@item.ChargesHeaderTitle',
                                        attributes: {
                                            style: "text-align: right;"
                                        },
                                        width: "5%",
                                        format: "{0:n}",
                                        //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>',
                                    },
                             </text>
                               }

                           {
                               field: "NetAmount",
                               title: "Net Amount",
                               width: "15%",
                               attributes: {
                                   style: "text-align: right;"
                               },
                               format: "{0:n}",
                               aggregates: ["count", "min", "sum"],
                               //footerTemplate: '<span style="float:right">#= kendo.toString(sum, "n")#</span>'

                           }

            ]
        });
    };

</script>

