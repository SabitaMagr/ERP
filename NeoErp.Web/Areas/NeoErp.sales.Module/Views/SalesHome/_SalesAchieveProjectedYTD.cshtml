@using NeoErp.Core.Models;
@{
    var actionPageId = "SalesAchieveProjectedYTD";
    var chartTitle = "Sales Achieved Vs Projected (YTD)";
}

<style>
    .SalesAchieveProjectedYTDTable {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
    }

        .SalesAchieveProjectedYTDTable, .SalesAchieveProjectedYTDTable > thead > tr > th {
            font-size: 9px !important;
        }

    .amountRight {
        text-align: right;
    }

    .margin-0 {
        margin-top: -15px;
        margin-bottom: -15px;
        overflow-x: hidden;
    }

    .k-chart.small-chart {
        display: inline-block;
        width: 230px;
    }

    #SalesAchieveProjectedYTD #DataTables_Table_0_length > label {
        font-size: 9px;
    }

    #SalesAchieveProjectedYTD #DataTables_Table_0_filter > label {
        font-size: 9px;
        margin: -7px 0px;
    }

        #SalesAchieveProjectedYTD #DataTables_Table_0_filter > label > input {
            height: 18px;
        }

    #DataTables_Table_0_info {
        float: left;
    }

    div.dataTables_info {
        padding-top: 0px;
    }

    div.dataTables_paginate {
        float: right;
        margin: 0px 0 20px 0;
    }

    .paginate_button:not(:last-child) {
        border-right: solid 1px #ddd;
        padding-right: 4px;
    }
</style>

<div class="modal fade" id="Model_@actionPageId" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-chart">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title"><span class="fa fa-pie-chart"></span> @chartTitle</h4>
            </div>
            <div class="modal-body bottom-gappingtwo">
                <div class="row">
                    <div class="clearfix">


                        <div class="col-md-6">
                            <div class="br"><div class="br"></div> </div>
                            <div>
                                <!-- show labels & inStack option-->
                                <div class="input-group">
                                    <div class="icheck-inline">
                                        <label>
                                            <input id="showLabel_@actionPageId" type="checkbox" checked="checked" autocomplete="off" /> Show Labels
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="filter_title">
                    <label class="filter-label">Advance Filter</label>
                </div>

                @Html.Partial("~/Views/Shared/Controls/DashboardChartFilter/_AdvancedFilter.cshtml", new AdvancedFilterSettingsModel()
                {
                ShowCustomerFilter = false,
                ShowProductFilter = false,
                ShowPartyTypeFilter = false,
                ShowCategoryFilter = false,
                ShowLocationFilter = false,
                ShowDocumentFilter = false,
                ShowCompanyFilter = false,
                ShowFiscalYearFilter = false,
                ShowEmployeeFilter = false,
                ShowAgentFilter = false,
                ShowBranchFilter = true,
                ShowDivisionFilter = false,
                IsPopUp = false,
                ActionPageId = actionPageId
                })


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-green applydp" data-dismiss="modal" id="apply_@actionPageId">Apply</button>
            </div>
        </div>
    </div>
</div>

<div class="portlet portlet-sortable light bordered" id="@actionPageId">
    <div class="portlet-title">
        <div class="caption">
            <i class="icon-bar-chart font-green-haze"></i>
            <span class="caption-subject bold uppercase font-green-haze custom-modal">@chartTitle</span>
        </div>
        <div class="tools">
            <a href="javascript:;" class="collapse"></a>
            <div class="btn-group">
                <a class="btn dropdown-toggle download-btn" data-title="Download" data-toggle="dropdown" href="#">
                    <i class="icon-arrow-down Thirdcustom"></i>
                </a>
                <ul class="dropdown-menu custom">
                    <div class="btn-group-custom">
                        <button type="button" data-id="SalesAchieveProjectedYTDChart" class="export-pdf btn default red-stripe"><i class="fa fa-file-pdf-o"></i>PDF</button>
                        <button type="button" data-id="SalesAchieveProjectedYTDChart" class="export-img btn default blue-stripe"><i class="fa fa-image-o"></i>Image</button>
                        <button type="button" data-id="SalesAchieveProjectedYTDChart" class="export-svg btn default green-stripe">SVG</button>
                    </div>
                </ul>
            </div>
            <a href="#Model_@actionPageId" data-toggle="modal" class="config"></a>
            <a href="javascript:;" class="reload"></a>
            <a href="javascript:;" class="fullscreen"></a>
            <a href="javascript:;" class="remove"></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="margin-0">
            <table class="SalesAchieveProjectedYTDTable table table-hover table-responsive table-bordered">
                <thead>
                    <tr rowspan="2">
                        <td></td>
                        <td colspan="3" class="text-center">YTD</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>Sales Achieved</td>
                        <td>Sales Projected</td>
                        <td>Total</td>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <script type="text/x-kendo-template" id="toolbar-template">
            <div class="k-header k-grid-toolbar pull-right">

                <a class="k-button k-button-icontext k-grid-excel" href="javascript:">
                    <i class="fa fa-file-excel-o"></i>
                </a>
        </script>
        <div class="k-content wide">
            <div id="SalesAchieveProjectedYTDChart"></div>
            <div class="overlay"><div>No data available</div></div>
            <div class="AmountFigureType"></div>
            <div class="DisplayFilterContent"><a href="javascript:;" data-toggle="tooltip" title=""></a></div>
        </div>
    </div>

    <script>
        var pageId_SalesAchieveProjectedYTD = '@actionPageId';
        var SalesAchieveProjectedYTD = (function () {
            //initialize variables

            var config = {
                url: window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAchieveProjected",
                series: [{
                    field: "Percentage",
                    categoryField: "COLUMN",
                }],
                color: ["#0000FF", "#7FFF00", "#006400", "#9932CC", "#C71585", "#FF0000", "#FFFF00"],

                isStack: false,
                fieldValue: $("input[name=fieldType_SalesAchieveProjectedYTD]:checked").val(),
                showLabel: $("#showLabel_SalesAchieveProjectedYTD").prop("checked"),
                seriesType: "pie",//$("input[name=seriesType_SalesAchieveProjectedYTD]:checked").val(),

                _oldData: {
                    dateFormat: $("input[name=DateFormat_SalesAchieveProjectedYTD]:checked").val(),
                    fieldValue: $("input[name=fieldType_SalesAchieveProjectedYTD]:checked").val()
                },

            };
            var _oldConfig = JSON.stringify(config);

            function loadDataSource() {
                reportFilter = reportFilter == undefined ? ReportFilter.filterAdditionalData() : reportFilter;
                var filter = $.extend(true, {}, reportFilter);
                config.dateFormat = $("input[name=DateFormat_SalesAchieveProjectedYTD]:checked").val();
                // config.url = window.location.protocol + "//" + window.location.host + "/api/SalesDashboard/GetSalesMonthlyFiscalYearReport?DateFormat=" + $("input[name=DateFormat_SalesAchieveProjectedYTD]:checked").val();
                config.showLabel = $("#showLabel_SalesAchieveProjectedYTD").prop("checked");
                var dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: Arg.url(config.url, { duration: "This Year" }),
                            dataType: "json", // <-- The default was "jsonp".
                            type: "POST",
                            contentType: "application/json; charset=utf-8"
                        },
                        parameterMap: function (options, type) {
                            var paramMap = JSON.stringify($.extend(options, filter));
                            delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                            delete paramMap.$format; // <-- remove format parameter.
                            return paramMap;
                        }
                    },
                    requestStart: function () {
                        if (IsDataGrid != "Grid") {
                            kendo.ui.progress($("#SalesAchieveProjectedYTDChart"), true);
                        }
                    },
                    requestEnd: function () {
                        kendo.ui.progress($("#SalesAchieveProjectedYTDChart"), false);
                    },
                    schema: {
                        parse: function (items) {
                            var result = [];
                            if (items.length != 0) //third level
                            {
                                if (!_.isEmpty(items[0].ITEM_EDESC)) {
                                    $.each(items, function (i, obj) {
                                        if (obj.TARGET == 0) {
                                            obj["Sales_Achieved_Percent"] = 100;
                                        }
                                        else {
                                            obj["Sales_Achieved_Percent"] = (obj.SALES_ACHIEVE / obj.TARGET * 100);
                                        }
                                    });
                                    result = items;
                                }
                                else if (!_.isEmpty(items[0].BRANCH_CODE)) //second level
                                    result = items;
                                else //first level
                                {
                                    items = items[0];
                                    if (items.TARGET == 0) {
                                        result.push({ Percentage: 100, "COLUMN": "Sales Achieved", "SALES_AMOUNT": items.SALES_ACHIEVE });
                                        result.push({ Percentage: items.Projected, "COLUMN": "Sales Projected", "SALES_AMOUNT": items.SALES_PROJECTED });
                                    }
                                    else {
                                        var salesAchievePercentage = (items.SALES_ACHIEVE /items.TARGET * 100);
                                        result.push({ Percentage: salesAchievePercentage, "COLUMN": "Sales Achieved", "SALES_AMOUNT": items.SALES_ACHIEVE });
                                        result.push({ Percentage: items.Projected, "COLUMN": "Sales Projected", "SALES_AMOUNT": items.SALES_PROJECTED });
                                    }
                                }

                            }
                            return result;
                        }
                    },
                });
                $("#SalesAchieveProjectedYTD .DisplayFilterContent a").text("");
                var IsDataGrid = $('.btnGrid_SalesAchieveProjectedYTD').data("type");
                if (IsDataGrid == "Grid") {
                    CreateGrid(dataSource);
                    return;
                }
                fullScreenHandle();
                CreateChart(dataSource);
            }
            function CreateChart(dataSource) {
                $('.btnGrid_SalesAchieveProjectedYTD').data("type", "Chart");
                var node = $("#SalesAchieveProjectedYTDChart").parent();
                node.html(
                    '<div id= "SalesAchieveProjectedYTDChart"></div>' +
                    '<div class="overlay"><div>No data available</div></div>' +
                    '<div class="AmountFigureType"></div>' +
                    '<div class="DisplayFilterContent"><a href="javascript:;" data-toggle="tooltip" title=""></a></div>');
                $("#SalesAchieveProjectedYTDChart").kendoChart({
                    chartArea: {
                        height: ($("#SalesAchieveProjectedYTDChart").hasClass("portlet-fullscreen")) ? 450 : config.seriesType == 'pie' ? 250 : 500,
                    },
                    onDrag: function (e) {
                        var chart = e.sender;
                        var ds = chart.dataSource;
                        var options = chart.options;

                        var categoryRange = e.axisRanges.CategoryAxis;

                        if (categoryRange) {
                            var xMin = categoryRange.min;
                            var xMax = categoryRange.max;

                            options.categoryAxis.min = xMin;
                            options.categoryAxis.max = xMax;

                            ds.filter(viewModel.getFilter(xMin, xMax));
                        }
                    },
                    pannable: {
                        lock: "y"
                    },
                    zoomable: {
                        mousewheel: {
                            lock: "y"
                        },
                        selection: {
                            lock: "y"
                        }
                    },
                    dataSource: dataSource,

                    legend: {
                        position: "bottom"
                    },
                    seriesColors: config.color,
                    seriesDefaults: {
                        type: config.seriesType,
                        labels: {
                            visible: config.showLabel,
                            //template: "#= kendo.format('{0:n}', value)# %",
                            //position: "center",
                            position: "outsideEnd",
                            visible: true,
                            background: "transparent",
                            rotation: config.seriesType == 'pie' ? 0 : -90,
                            template: function (dataItem) {

                                var acValue = dataItem.dataItem.COLUMN + ": " + dataItem.dataItem.Percentage.toFixed(2) + " % / " + dataItem.dataItem.SALES_AMOUNT.toFixed(2);
                                return acValue
                            },
                        },
                        style: "smooth",
                    },
                    series: config.series,
                    categoryAxis: {
                        min: 0,
                        max: 10,
                        field: "ITEM_EDESC",
                        labels: {
                            rotation: -45,
                        },
                        title: { text: $("#SalesAchieveProjectedYTDChart").data("kendoChart") == undefined ? "" : $("#SalesAchieveProjectedYTDChart").data("kendoChart").options.categoryAxis.title.text }
                    },
                    valueAxis: {
                        line: {
                            visible: true
                        },
                        labels: {
                            rotation: 'auto',
                            template: "#= FormatLabels(value)#"
                        },
                        title: { text: amountFigureType }
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}",
                        //template: "#= category #: \n #= FormatLabels(value)# %"
                        template: function (dataItem) {
                            var acValue = dataItem.dataItem.COLUMN + ":" + dataItem.dataItem.Percentage.toFixed(2) + " % / " + dataItem.dataItem.SALES_AMOUNT.toFixed(2);
                            return acValue
                        },
                        rotation: 310
                    },
                    dataBound: function (e) {

                        var maxValue = getMaxValueFromDataSource(e);
                        var majorunit = Math.max(6, maxValue / 6);
                        e.sender.options.valueAxis.majorUnit = majorunit;
                        e.sender.options.valueAxis.max = maxValue + majorunit;
                        e.sender.options.valueAxis.axisCrossingValue = [0, -(maxValue + majorunit)];
                        $("#SalesAchieveProjectedYTDChart").next(".overlay").toggle(maxValue <= 0);
                        //e.sender.options.categoryAxis.categories = getCategoryFromDataSource(e);

                        CreateTable(e.sender.dataSource.data());
                    },
                    seriesClick: function (e) {
                        var count = _.filter(e.sender.dataSource.data(), function (x) {
                            return x.COLUMN == "Sales Achieved" && x.Percentage > 0;
                        }).length;
                        if (count > 0) {
                            config.url = window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAchieveBranchProjection";
                            loadDataSource();
                        }

                    },
                });
            }
            function CreateTable(data) {
                debugger
                var tablebody = "";
                $(".SalesAchieveProjectedYTDTable").DataTable().destroy();
                $.each(data, function (i, o) {

                    if (!_.isEmpty(o.ITEM_EDESC)) {
                        var targetnotsetClass = "";
                        var percentage = 100;
                        if (o.TARGET <= 1) {
                            o.TARGET = o.SALES_ACHIEVE;
                            targetnotsetClass = "font-red-haze";
                        }
                        if (o.TARGET > 0)
                            percentage = (o.SALES_ACHIEVE /o.TARGET * 100);
                        tablebody += "<tr><td>" + o.ITEM_EDESC + "</td> " +
                            "<td class='amountRight'> " + kendo.format('{0:n}', percentage) + " % / " + o.SALES_ACHIEVE + "</td> " +
                            "<td class='amountRight " + targetnotsetClass + "'>" + kendo.format('{0:n}', (100 - percentage)) + " % / " + o.SALES_PROJECTED + "</td> " +
                            "<td class='amountRight'>100 %</td></tr>";
                        ////add
                        $(".SalesAchieveProjectedYTDTable").find("tbody > tr").html("");
                        $(".SalesAchieveProjectedYTDTable").find("tbody").html(tablebody);
                        setTimeout(function () {
                            $(".SalesAchieveProjectedYTDTable").DataTable();
                            $(".SalesAchieveProjectedYTDTable").css({ "width": "100%" });
                        });

                    }
                    else if (!_.isEmpty(o.BRANCH_EDESC)) {
                        var targetnotsetClass = "";
                        var percentage = 100;
                        if (o.TARGET <= 1) {
                            o.TARGET = o.SALES_ACHIEVE;
                            targetnotsetClass = "font-red-haze";
                        }
                        if (o.TARGET > 0)
                            percentage = (o.SALES_ACHIEVE /o.TARGET * 100);


                        tablebody += "<tr><td>" + o.BRANCH_EDESC + "</td> " +
                            "<td class='amountRight'> " + kendo.format('{0:n}', percentage) + " % / " + o.SALES_ACHIEVE + "</td> " +
                            "<td class='amountRight " + targetnotsetClass + "'>" + kendo.format('{0:n}', (o.Projected)) + " % / " + o.SALES_PROJECTED + "</td> " +
                            "<td class='amountRight'>100 %</td></tr>";
                        ////add
                        $(".SalesAchieveProjectedYTDTable").find("tbody > tr").html("");
                        $(".SalesAchieveProjectedYTDTable").find("tbody").html(tablebody);

                        CreateSmallCharts(data, o.BRANCH_EDESC);
                    }
                    else {
                        console.log(data);
                        tablebody = "<tr><td>Percentage</td> " +
                            "<td class='amountRight'> " + kendo.format('{0:n}', data[i].Percentage) + " % / " + data[i].SALES_AMOUNT + "</td> " +
                            "<td class='amountRight'>" + kendo.format('{0:n}', data[i + 1].Percentage) + " % / " + data[i + 1].SALES_AMOUNT + "</td> " +
                            "<td class='amountRight'>100 %</td></tr>";
                        ////add
                        $(".SalesAchieveProjectedYTDTable").find("tbody > tr").html("");
                        $(".SalesAchieveProjectedYTDTable").find("tbody").html(tablebody);
                        return false;
                    }

                });




            }
            function CreateSmallCharts(data, branch) {
                var data = _.filter(data, function (x) {
                    return x.BRANCH_EDESC == branch;
                });
                var branchAbbr = branch.replace(/ /g, '_');
                var node = $("#SalesAchieveProjectedYTDChart").parent();
                node.find(".overlay").hide();
                $("#SalesAchieveProjectedYTDChart").remove();
                node.prepend("<div id='SalesAchieveProjectedYTDChart'><div class='br'></div><div class='br'></div></div>");
                node.append("<div id='SalesAchieveProjectedYTDChart_" + branchAbbr + "' class='small-chart'></div>");
                $("#SalesAchieveProjectedYTDChart_" + branchAbbr).kendoChart({
                    chartArea: {
                        height: ($("#SalesAchieveProjectedYTDChart_" + branchAbbr).hasClass("portlet-fullscreen")) ? 450 : 250,
                    },
                    title: {
                        text: branch,
                    },
                    dataSource: {
                        data: data,
                        schema: {
                            parse: function (items) {
                                var result = [];
                                items = items[0];
                                if (items.TARGET == 0)
                                    items.TARGET = items.SALES_ACHIEVE;
                                var salesAchievePercentage = (items.SALES_ACHIEVE /items.TARGET * 100);
                                result.push({ Percentage: salesAchievePercentage, "COLUMN": "Sales Achieved", BRANCH_CODE: items.BRANCH_CODE, SALES_AMOUNT: items.SALES_ACHIEVE });
                                result.push({ Percentage: items.Projected, "COLUMN": "Sales Projected", BRANCH_CODE: items.BRANCH_CODE, SALES_AMOUNT: items.SALES_PROJECTED });
                                return result;
                            }
                        },
                    },
                    legend: {
                        position: "bottom",
                        //visible: false,
                    },
                    seriesColors: config.color,
                    seriesDefaults: {
                        type: config.seriesType,
                        labels: {
                            visible: config.showLabel,
                            template: "#= kendo.format('{0:n}', value)# %",
                            //position: "center",
                            //template: function (dataItem) {
                            //    debugger;
                            //    var acValue = dataItem.dataItem.COLUMN + ":" + dataItem.dataItem.Percentage.toFixed(2) + " % / " + dataItem.dataItem.SALES_AMOUNT;
                            //    return acValue
                            //},
                            position: "insideEnd",
                            visible: true,
                            // background: "transparent"

                        },
                        style: "smooth",
                    },
                    series: config.series,
                    valueAxis: {
                        line: {
                            visible: true
                        },
                        labels: {
                            rotation: 'auto',
                            template: "#= FormatLabels(value)#"
                        },
                        title: { text: amountFigureType }
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}",
                        //template: "#= category #: \n #= FormatLabels(value)# %",
                        template: function (dataItem) {

                            var acValue = dataItem.dataItem.COLUMN + ": " + dataItem.dataItem.Percentage.toFixed(2) + " % / " + dataItem.dataItem.SALES_AMOUNT;
                            return acValue
                        },
                    },
                    seriesClick: function (e) {
                        //config.url = window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAchieveItemwise?branch=" + e.dataItem.BRANCH_CODE;
                        //config.seriesType = "column";
                        //config.series = [{
                        //    field: "Sales_Achieved_Percent",
                        //   name: "Itemwise Sales Achieved"
                        //}];
                        ////config.group = { field: "ITEM_EDESC" };
                        //loadDataSource();
                        //$(window).scrollTop($($('#SalesAchieveProjectedYTDChart').parents()[2]).offset().top);
                    },
                });

            }
            function refreshChart(flag) {
                //check if showlevel and stack changed
                if (flag != undefined && flag.data == false) {
                    if ($(".btnGrid_SalesAchieveProjectedYTD").data("type") == "Grid") {
                        $(".btnGrid_SalesAchieveProjectedYTD").data("type", "Chart");
                        loadDataSource();
                        return;
                    }
                }
                //check if series type changed
                if (flag != undefined && flag.data.options != undefined) {
                    if ($(".btnGrid_SalesAchieveProjectedYTD").data("type") == "Grid") {
                        chart_grid_option_change("btnGrid_SalesAchieveProjectedYTD", SalesAchieveProjectedYTD.init);
                        return;
                    }
                }
                var chart = $("#SalesAchieveProjectedYTDChart").data("kendoChart"),
                    type = config.seriesType,
                    stack = $("#Stack_SalesAchieveProjectedYTD").prop("checked"),
                    IsLebelShow = $("#showLabel_SalesAchieveProjectedYTD").prop("checked"),
                    fieldValue = $("input[name=fieldType_SalesAchieveProjectedYTD]:checked").val();

                for (var i = 0, length = chart.options.series.length; i < length; i++) {
                    chart.options.series[i].type = type;
                    chart.options.series[i].labels.visible = IsLebelShow;
                    if (type == "column") {
                        chart.options.series[i].labels.rotation = -90;
                    }
                    if (type == "bar") {
                        chart.options.series[i].labels.rotation = 0;
                    }


                };
                chart.refresh();
            }

            //event Bind
            function applyClickEvent() {
                var checkedDateFormat = $("input[name=DateFormat_SalesAchieveProjectedYTD]:checked").val();
                var checkedFieldValue = $("input[name=fieldType_SalesAchieveProjectedYTD]:checked").val();
                var IsChanged = false;

                ChartFilter('SalesAchieveProjectedYTD', SalesAchieveProjectedYTD.init, true);
            }
            function reloadClickEvent() {
                RefreshChartFilterControl('SalesAchieveProjectedYTD');
                config = JSON.parse(_oldConfig);
                loadDataSource();
            }
            function chartGridSwitchEvent() {
                var datasource = $("#SalesAchieveProjectedYTDChart").data("kendoChart").dataSource;
                $('.btnGrid_SalesAchieveProjectedYTD').data("type") == "Chart" ? CreateGrid(datasource) : CreateChart(datasource);
                $("i", this).toggleClass("icon-bar-chart");
            }
            //handle full screen
            function fullScreenHandle() {
                // handle portlet fullscreen
                $('body').on('click', '.portlet > .portlet-title .fullscreen', function (e) {
                    e.preventDefault();
                    var portlet = $(this).closest(".portlet");
                    var chart = portlet.find('.portlet-body > .k-content.wide > div').data("kendoChart");
                    if (portlet.hasClass('portlet-fullscreen')) {
                        chart.options.chartArea.height = 450;
                    } else {
                        chart.options.chartArea.height = 250;
                    }
                    //change chart height

                    chart.redraw();

                });
            }



            return {
                init: loadDataSource,
                refreshChart: refreshChart,
                applyClick: applyClickEvent,
                reloadClick: reloadClickEvent,
            };
        })();

        $(document).ready(function () {
            SalesAchieveProjectedYTD.init();

            //start Binding
            $(document).bind("kendo:skinChange", SalesAchieveProjectedYTD.init);
            $('#SalesAchieveProjectedYTDChart').closest('.portlet').find('.reload').bind("click", SalesAchieveProjectedYTD.reloadClick);
            $('#apply_SalesAchieveProjectedYTD').bind("click", SalesAchieveProjectedYTD.applyClick);
            $("#showLabel_SalesAchieveProjectedYTD").bind("change", true, SalesAchieveProjectedYTD.refreshChart);
            $('#Stack_SalesAchieveProjectedYTD').bind('click', true, SalesAchieveProjectedYTD.refreshChart);
            $(".options_SalesAchieveProjectedYTD").bind("change", { "options": true }, SalesAchieveProjectedYTD.refreshChart);
        });
    </script>
</div>
