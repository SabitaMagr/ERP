@model  List<NeoErp.Core.Models.CustomModels.MetricWidgetsModel>

@{
    Layout = null;
    int b = 0;
    int a = 0;
    var sttaticDashboard =(bool)TempData["static"];
    var WidgetCount = 0;
    var childWidgets = 0;
    var loadedWidget = new List<string>();
}
@if (sttaticDashboard)
{
    if(Model.Where(x => x.MODULE_CODE == "01").ToList().Count > 0)
    {
        <style>
                    /*.demo_dashboard h5 {
                font-size: 16px;
                background-color: #ddd;
                padding: 5px 15px;
                margin-bottom: 0px;

                color: #fff;
                font-weight: 600;
                border-radius: 5px 5px 0px 0px;
            }*/
            .grid-stack-item {
                text-align: center;
                display: inline-flex;
            }
            
            
            .demo_dashboard .f-details {
                border-radius: 0px 0px 5px 5px !important;
            }

                    .demo_dashboard {
                        border-radius: 5px 5px 0px 0px;
                    }


                        .demo_dashboard h6 {
                            padding: 7px 15px;
                            margin-bottom: 0px;
                            font-size: 15px;
                            color: #fff
                        }



                    .o-details {
                        background-color: #ddd;
                    }

                        .o-details div {
                            /*background-color: #b9b2b2;*/
                            text-align: center;
                            font-size: 25px;
                            padding: 20px;
                            color: #fff;
                        }
                    .dboard_one h5 {
                        background-color: #aab8b9;
                    }
                    .dboard_one .o-details {
                        background-color: #95a5a5;
                    }
                    .dboard_one .f-details {
                        background-color: #aab8b9;
                    }
                    .dboard_two h5 {
                        background-color: #51ce9e;
                    }
                    .dboard_two .o-details {
                        background-color: #37bf8d;
                    }

                    .dboard_two .f-details {
                        background-color: #2eb37e;
                    }




                    .dboard_three h5 {
                        background-color: #75a6cf;
                    }

                    .dboard_three .o-details {
                        background-color: #6c9ac1;
                    }


                    .dboard_three .f-details {
                        background-color: #5394ca;
                    }


                    .dboard_four h5 {
                        background-color: #445c78;
                    }

                    .dboard_four .o-details {
                        background-color: #34495e;
                    }

                    .dboard_four .f-details {
                        background-color: #323d51;
                    }

                    .f-details h6 {
                        margin-top: 0px;
                    }

                    .topdashboard span {
                        float: right;
                    }

                    .dashboard_charts {
                        margin-top: 15px;
                        margin-bottom: 15px;
                    }





                    .dlist i {
                        font-size: 32px;
                        color: #fff;
                        float: left;
                        padding-right: 20px;
                        margin-top: 36px;
                    }


                    h3.dlist_title {
                        color: #fff;
                        font-weight: 600;
                        display: inline-grid;
                        font-size: 14px;
                    }



                    .dlist_title span {
                        font-size: 11px !important;
                        display: inline-grid;
                        padding-top: 4px;
                    }

                    .dicon {
                        width: 20%;
                    }

                    .bgbox {
                        background-color: #66b155;
                    }

                    .dlist {
                        border-bottom: solid #45a131 1px;
                    }

                        .dlist:last-child {
                            border-bottom: none;
                        }

                    .headtitle {
                        color: #fff;
                        font-weight: 600;
                        display: inline-block;
                        font-size: 22px;
                        text-align: center;
                    }

                        .headtitle span {
                            font-size: 11px !important;
                            display: inline-block;
                            padding-top: 4px;
                        }

                    .bgbox_center {
                        min-height: 220px;
                        box-shadow: 2px 0px 2px #4c923c;
                        text-align: center
                    }

                    .bgbox_right {
                        min-height: 220px;
                        text-align: center
                    }

                    .boxicon {
                        font-size: 8em;
                        color: #fff;
                        text-align: center;
                        display: block;
                        margin-top: 60px;
                        opacity: 0.1;
                    }

                    .dahboard_row {
                        margin-left: 0px;
                        margin-right: 0px;
                        background-color: #43a12e;
                        box-shadow: 1px 3px 3px 0px #43a12e;
                        -moz-box-shadow: 1px 3px 3px 0px #43a12e;
                        -o-box-shadow: 1px 3px 3px 0px #43a12e;
                        -webkit-box-shadow: 1px 3px 3px 0px #43a12e;
                    }

                    .dashboard_charts .portlet.light.bordered > .portlet-title {
                        border-bottom: 1px solid #eee;
                        background-color: #f6f6f6;
                        padding: 0px 16px !important;
                    }

                    .dashboard_charts .portlet.light.bordered {
                        padding: 0px 0px !important;
                        border-bottom: solid #ddd 3px !important;
                        box-shadow: 5px 5px 8px -5px #ddd;
                        -moz-box-shadow: 5px 5px 8px -5px #ddd;
                        -webkit-box-shadow: 5px 5px 8px -5px #ddd;
                        -o-box-shadow: 5px 5px 8px -5px #ddd;
                    }

                    .dashboard_charts .portlet-body {
                        padding: 0px 16px !important;
                    }

                    .dashboard_charts img {
                        margin-top: 80px;
                    }


                    .dynamicbar, .lineinbar, .line {
                        display: table;
                        text-align: center;
                        margin: 10px auto;
                    }

                    .spd, .spd_title {
                        text-align: center;
                    }

                    .second_db {
                        background-color: #eee;
                        border: solid #ddd 1px;
                        margin-left: 0px;
                        margin-right: 0px;
                        margin-top: 15px;
                        padding-bottom: 15px;
                        text-align: center;
                    }

            .grid-stack-item{
                width:20% !important;
            }
            
            .spd_title span {
                background-color: #43a12e;
                color: #fff;
                padding: 2px 14px;
                border-radius: 10px !important;
                font-size: 11px;
                display: block;
            }

                    .spd:hover {
                        transform: translateY(-50px);
                        transition: 0.2s ease-in-out;
                        box-shadow: 0 0.3em 0.3em -0.4em var(--hover);
                        -webkit-transform: translateY(-0.3em);
                        transform: translateY(-0.3em);
                    }
        </style>


        <div class="demo_dashboard">
            <div class="row dahboard_row">
                <div class="col-sm-3 col-md-3 bgbox">
                    
                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "M" && x.MODULE_CODE == "01"))
                    {
                        if (!string.IsNullOrEmpty(item.aggValue))
                        {
                            if (WidgetCount == 3)
                            {
                                break;
                            }
                            <div class="dlist">
                                <div class="dicon">
                                    <i class="fa @item.widgetFontIcon"></i>
                                </div>
                                <div class="dicon_title">
                                    <h3 class="dlist_title">@item.aggValue <span>@item.widgetsTitle</span></h3>
                                </div>

                            </div>
                            WidgetCount = WidgetCount + 1;

                        }
                    }
                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "MP" && x.MODULE_CODE == "01"))
                    {
                        if (!string.IsNullOrEmpty(item.aggValue))
                        {
                            var bgcolor = item.WidgetsBGColor;
                            var fontColor = item.widgetsColor;
                            var isblink = false;
                            var aggValue = 0M;
                            Decimal.TryParse(item.aggValue, out aggValue);
                            if (item.MINVALUES > 0)
                            {
                                if (aggValue <= item.MINVALUES)
                                {
                                    bgcolor = item.WidgetsBGColor;
                                    fontColor = item.widgetsColor;
                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                }
                                else if (item.MAXVALUES > item.MINVALUES)
                                {
                                    if (aggValue >= item.MAXVALUES)
                                    {
                                        bgcolor = item.MAXBGCOLOR;
                                        fontColor = item.MAXFONTCOLOR;
                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                    }
                                    else
                                    {
                                        bgcolor = item.MIDBGCOLOR;
                                        fontColor = item.MIDFONTCOLOR;
                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                    }
                                }
                            }
                            if (item.QUICKTYPE == "MP")
                            {
                                if (WidgetCount == 3)
                                {
                                    break;
                                }
                                <div class="dlist">
                                    <div class="dicon">
                                        <i class="fa @if (string.IsNullOrEmpty(item.widgetFontIcon))
                                            {<text>fa-area-chart</text> }
                                            else
                                            {<text>@item.widgetFontIcon</text> } "></i>
                                    </div>
                                    <div class="dicon_title">
                                        <h3 class="dlist_title">@item.aggValue %<span>@item.widgetsTitle</span></h3>
                                    </div>

                                </div>
                                WidgetCount = WidgetCount + 1;
                            }
                        }
                    }
                    
                    @*<div class="dlist">
                        <div class="dicon">
                            <i class="fa fa-bar-chart"></i>
                        </div>
                        <div class="dicon_title">
                            <h3 class="dlist_title">358 <span>demo kjdsf dfkdsjfkdsj</span></h3>
                        </div>

                    </div>
                    <div class="dlist">
                        <div class="dicon">
                            <i class="fa fa-area-chart"></i>
                        </div>
                        <div class="dicon_title">
                            <h3 class="dlist_title">35801222 <span>demo kjdsf dfkdsjfkdsj</span></h3>
                        </div>

                    </div>*@
                </div>
@if (Model.Where(x => x.QUICKTYPE == "C" && x.MODULE_CODE == "01").ToList().Count > 0)
{
    
    foreach (var item in Model.Where(x => x.QUICKTYPE == "C" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
    {

        var orderId = 1;
        <div class="col-sm-3 col-md-3 bgbox_center">
            <h3 class="headtitle">@item.aggValue <span>@item.widgetsTitle </span>
                
                                             
               
            </h3>
            <div>
                @if (item.calculationBase != "E")
                {
                if (item.SecondaryValue.Contains('-'))
                {
                    <i class="text-red" style="color:red">@item.SecondaryValue % </i> @item.secondaryTitle
                }
                else
                {
                    <i class="text-green">@item.SecondaryValue % </i> @item.secondaryTitle
                }
                }

            </div>
            @if (item.calculationBase != "P")
            {
                <div>
                    <i class="text-green">@item.SecondaryValue  </i> @item.secondaryTitle
                </div>
            }
            @*<i class="fa fa-bar-chart boxicon"></i>*@

            @*<span class="dynamicbar">Loading..</span>*@

             @foreach (var item1 in Model.Where(x => x.QUICKTYPE == "P" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
             {
                 b = 0;
                 if (loadedWidget.Any(x=>x==item1.widgetsTitle))
                 {
                     continue;
                 }

                 childWidgets = childWidgets + 1;
                 if (orderId == 2)
                 {
                     break;
                 }
                 orderId = orderId + 1;
                 if (string.IsNullOrEmpty(item1.sparklineoption))
                 {
                     item1.sparklineoption = "line";
                 }

                 loadedWidget.Add(item1.widgetsTitle);
                                            <div class="dynamicbar" id="sparkline_@a"></div>
                                           <div >
                                               <h5 style="color:#fff">@item1.widgetsTitle</h5>
                                           </div>
                                    <script>
                                        var myvalues = [];
                                        var mycategory = [];
                    @foreach (var t in item1.SparkLine)
                    {

                      <text>
                                        myvalues.push(@t.VALUE);

                    </text>
                         <text>
                                        mycategory.push('@t.LABEL');

                    </text>
                    }

                                        @*$("#sparkline_@a").kendoSparkline({

                                            series: [{
                                                name: "Sales",
                                                data: myvalues,
                                                seriesColors: ["#558B9B"],
                                                background:'red'
                                            }],
                                            type: '@item.sparklineoption',
                                            categoryAxis: {
                                                categories: mycategory
                                            },
                                            tooltip: {
                                                visible: true,
                                                template: "${category} - ${value}"
                                            }
                                        });*@
                                        var primary_hue = 266;
    $('#sparkline_@a').sparkline(myvalues, {
        type: '@item1.sparklineoption',
                                       
        borderWidth: 7,
                    borderColor: '#f5f5f5',
         @if (item1.sparklineoption == "bar")
         {
                           <text>
                                        tooltipFormat: "{{value}} {{offset:names}} ",
                                        height: '100',
                                        width: '200',
                                        barWidth: 7,
                                        barColor: '#007f00',
                    </text>
         }
         else
         {
               <text>
                                        width: '200',
                                        height: '100',
                                        lineColor: '#075907',
                                        fillColor: '#007f00',
                                        spotColor: '#1fad1f',
                                        minSpotColor: '#056305',
                                        maxSpotColor: '#31e031',
                                        highlightLineColor: '#1fdd1f',
                    tooltipFormat: "{{y:val}} {{offset:names}} ",
                    </text>
         }


                    tooltipValueLookups: {



             names: {
                 @foreach (var t in item1.SparkLine)
                 {


                   <text>
                    @b: '@t.LABEL.ToString()',
                        </text>
                     b = b + 1;
                 }

                 // Add more here
             }




         },
    });
                                    </script>
                                                            a = a + 1;
                                                            <div class="margin-bottom-10 visible-sm"> </div>
                                                        }




        </div>

    }
}
              
               

            </div>
            <div class="row second_db">
                @foreach (var item in Model.Where(x => x.QUICKTYPE == "S" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                {
                    if (!string.IsNullOrEmpty(item.aggValue))
                    {
                        var bgcolor = item.WidgetsBGColor;
                        var fontColor = item.widgetsColor;
                        var isblink = false;
                        var aggValue = 0M;
                        Decimal.TryParse(item.aggValue, out aggValue);
                        if (item.MINVALUES > 0)
                        {
                            if (aggValue <= item.MINVALUES)
                            {
                                bgcolor = item.WidgetsBGColor;
                                fontColor = item.widgetsColor;
                                isblink = item.MINISBLINK == "Y" ? true : false;
                            }
                            else if (item.MAXVALUES > item.MINVALUES)
                            {
                                if (aggValue >= item.MAXVALUES)
                                {
                                    bgcolor = item.MAXBGCOLOR;
                                    fontColor = item.MAXFONTCOLOR;
                                    isblink = item.MAXISBLINK == "Y" ? true : false;
                                }
                                else
                                {
                                    bgcolor = item.MIDBGCOLOR;
                                    fontColor = item.MIDFONTCOLOR;
                                    isblink = item.MIDISBLINK == "Y" ? true : false;
                                }
                            }
                        }
                        if (item.QUICKTYPE == "S")
                        {
                            @*<div id="speedometer_sortable" class="portlet portlet-sortable">*@
                            <div class="col-lg-3 col-md-2 col-sm-4 col-xs-8 grid-stack-item"  data-name="@item.ReportId">
                                <div class="grid-stack-item-content">


                                    <div id="gauge_@item.ReportId" class="gauge" style="width:180px;height: 179px;">
                                    </div>
                                    <div class="spd_title" data-toggle="tooltip"  data-html="true" title="Value: @aggValue  Target: @item.MAXVALUES"> <span>@item.widgetsTitle</span></div>
                                  
                                </div>
                                @*<div class="gauge gauge-sortable-empty"> </div>*@
                                @*</div>*@
                            </div>
                            <script>
                            $("#gauge_@item.ReportId").kendoRadialGauge({
                                //gaugeArea: {
                                //    width: "230px",
                                //    height: "130",
                                //},

                                pointer: {
                                    value: '@aggValue'
                                },

                                scale: {
                                    minorUnit: 5,
                                    startAngle: -30,
                                    endAngle: 210,
                                    max: '@item.SPEEDOMETERMAXVALUE',
                                    labels: {
                                        position: "@item.LABELPOSITION",

                                    },
                                    ranges: [
                                        {
                                            from: 0,
                                            to: '@item.MINVALUES',
                                            color: '@item.WidgetsBGColor'

                                        }, {
                                            from: '@item.MINVALUES',
                                            to: '@item.MAXVALUES',
                                            color: "@item.MIDBGCOLOR"
                                        }, {
                                            from: '@item.MAXVALUES',
                                            to: '@item.SPEEDOMETERMAXVALUE',
                                            color: "@item.MAXBGCOLOR"
                                        }
                                    ]
                                }
                            });
                            var tooltip = $('#gauge_@item.ReportId').kendoTooltip({
                                filter: '[fill="rgba(255,102,0,.999)"]',
                                position: "center",
                                content: $("#gauge_@item.ReportId").data("kendoRadialGauge").value(),
                                show: function (e) {
                                    e.sender.options.content = $("#gauge_@item.ReportId").data("kendoRadialGauge").value();
                                    e.sender.refresh();
                                }
                            }).data("kendoTooltip");

                            //PortletDraggable.init("Dashboard_Widgets_SpedoMeter", "#speedometer_sortable");

                            @*$("#gauge_@item.ReportId").parent().parent().sortable({
                                connectWith: ".gauge.k-gauge.ui-sortable"
                            }).disableSelection();*@

                            </script>
                        }
                    }


                }
                </div>
            </div>
            }
            }
            else
            {
            <style>
                .dashboard-stat .details .number {
                    font-size: 18px !important;
                }
                .dashboard-stat .details .desc {

                    font-size: 14px !important;

                }
                .grid-stack-item{
                  /*height:116px !important;*/
                }
                .grid-stack > .grid-stack-item > .grid-stack-item-content {
                    overflow:hidden !important;
                }
                .easy-pie-chart .title {
                    margin-top: 34px !important;

                }
            </style>
            if (Model.Where(x => x.MODULE_CODE == "01").ToList().Count > 0)
            {
                <style>
                                    /*.garugetest {
                        background: transparent url('../../../images/gauge-container-partial.png') no-repeat 50% 50%;;

                       width: 240px;
                        height: 40px;
                        text-align: center;
                        margin: 0 auto 30px auto;
                    }*/
                                    #dashboardWidget {
                                        /*//  float: left;
                        margin-top: 5px;
                        margin-bottom: 10px;*/
                                    }

                                    .gauge {
                                        display: inline-block;
                                        width: 230px;
                                        height: 140px;
                                        margin: 0 auto;
                                    }

                                    .widgetstitle {
                                        /*bottom: 20px;
                        position: absolute;
                        bottom: -5px;
                        padding-left: 53px;*/
                                        text-align: center;
                                    }

                                    .common {
                                        height: 145px !important;
                                        /*position:relative;*/
                                    }

                                    /*.spedo-meter {
                      border: 3px dashed #aaa;
                      /*height: 45px;
                      width: 344px;
                      background: #ccc;
                    }*/
                </style>



                <div id="widgetDashboard">
                    @if (Model.Where(x => x.QUICKTYPE == "C" && x.MODULE_CODE == "01").ToList().Count > 0)
                    {
                        <style>
                            .dashboard_count .title_count:before {
                                content: "";
                                position: absolute;
                                left: 0;
                                height: 65px;
                                border-left: 2px solid #449833;
                                margin-top: 10px;
                            }
                            span.bottom {
                                color: #fff;
                                background-color: #3a8a29;
                                padding: 2px 4px;
                            }
                            .dashboard_count .title_count:first-child:before {
                                border-left: 0;
                            }

                            .dashboard_count .title_count .count {
                                font-size: 22px;
                                line-height: 47px;
                                font-weight: 700;
                                color: #fff;
                            }

                            .title_count .top {
                                font-size: 13px;
                                color: #fff;
                                font-weight: 600 !important;
                            }
                            .bottom {
                                color: #fff;
                            }
                            .dashboard_count .tile_count {
                                border-bottom: 1px solid #D9DEE4;
                                padding: 0 10px 0 20px;
                                position: relative;
                                margin-bottom: 20px;
                            }

                            .dashboard_count .title_count-first-child:before {
                                content: "";
                            }

                            .dashboard_count .tile_count {
                                margin-bottom: 10px;
                                color: #73879C;
                            }

                            .text-green {
                                color: rgb(109, 241, 80);
                            }
                            .text-red {
                                color: #fb6e6e;
                            }
                            .title_count {
                                padding-bottom: 15px !important;
                            }

                            .top i {
                                padding-right: 4px;
                            }

                            .dashboard_count {
                                padding-top: 10px;
                                background-color: #43a32e;
                            }
                        </style>

                        <div class="col-md-12">


                            <div class="row dashboard_count">
                                @foreach (var item in Model.Where(x => x.QUICKTYPE == "C" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                                {
                                    <div class="col-md-2 col-sm-4 col-xs-6 title_count">
                                        <span class="top"><i class="fa fa-user"></i>@item.widgetsTitle</span>
                                        <div class="count">@item.aggValue</div>

                                        @if (item.calculationBase == "P")
                                        {
                                            <span class="bottom" style="font-size:11px;">
                                                @if (item.SecondaryValue.Contains('-'))
                                                {
                                                    <i class="text-red" style="color:red">@item.SecondaryValue % </i> @item.secondaryTitle
                                                }
                                                else
                                                {
                                                    <i class="text-green">@item.SecondaryValue % </i> @item.secondaryTitle
                                                }

                                            </span>
                                        }
                                        @if (item.calculationBase != "P")
                                        {
                                            <span class="bottom" style="font-size:11px;">
                                                <i class="text-green">@item.SecondaryValue  </i> @item.secondaryTitle
                                            </span>
                                        }
                                    </div>
                                }

                            </div>
                        </div>
                    }
                    @if (Model.Where(x => x.QUICKTYPE != "C" && x.QUICKTYPE != "H" && x.MODULE_CODE == "01").ToList().Count > 0)
                    {
                        <div class="col-md-12">
                            <!-- BEGIN Portlet PORTLET-->
                            <div class="portlet">
                                <div class="portlet-title">
                                    <div class="caption">
                                        <i class="fa fa-gift"></i>Metric
                                    </div>
                                    <div class="tools">
                                        <a href="javascript:;" class="collapse" data-original-title="" title=""> </a>
                                        <a href="#portlet-config" data-toggle="modal" class="config" id="saveorderwidgets" data-original-title="" title=""> </a>
                                        <a href="javascript:;" class="reload" data-original-title="" title="" id="RemoveSession"> </a>
                                        <a href="" class="fullscreen" data-original-title="" title=""> </a>
                                        <a href="javascript:;" class="remove" data-original-title="" title=""> </a>
                                    </div>
                                </div>
                                <div class="row portlet-body clearfix grid-stack" id="metric_sortable1">

                                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "M" && x.MODULE_CODE == "01"))
                                    {
                                        if (!string.IsNullOrEmpty(item.aggValue))
                                        {
                                            var bgcolor = item.WidgetsBGColor;
                                            var fontColor = item.widgetsColor;
                                            var isblink = false;
                                            var aggValue = 0M;
                                            Decimal.TryParse(item.aggValue, out aggValue);
                                            if (item.MINVALUES > 0)
                                            {
                                                if (aggValue <= item.MINVALUES)
                                                {
                                                    bgcolor = item.WidgetsBGColor;
                                                    fontColor = item.widgetsColor;
                                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                                }
                                                else if (item.MAXVALUES > item.MINVALUES)
                                                {
                                                    if (aggValue >= item.MAXVALUES)
                                                    {
                                                        bgcolor = item.MAXBGCOLOR;
                                                        fontColor = item.MAXFONTCOLOR;
                                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                                    }
                                                    else
                                                    {
                                                        bgcolor = item.MIDBGCOLOR;
                                                        fontColor = item.MIDFONTCOLOR;
                                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                                    }
                                                }
                                            }
                                            if (item.QUICKTYPE == "M")
                                            {
                                                <div class="grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                     data-gs-width="@item.Width" data-gs-height="2" data-gs-min-height="1" data-name="@item.ReportId" id="metric_@item.ReportId">
                                                    <div class="dashboard-stat dashboard-stat-v2 blue grid-stack-item-content" style="background-color:@bgcolor">
                                                        <a class="" href="#">
                                                            <div class="visual">
                                                                <i class="fa @if (string.IsNullOrEmpty(item.widgetFontIcon))
                                            {<text>fa-comments</text> }
                                            else
                                            {<text>@item.widgetFontIcon</text> } "></i>
                                                            </div>
                                                            <div class="details">
                                                                <div class="number @if (isblink)
                                            {<text>blinking</text> } ">
                                                                    <span data-counter="counterup" class="counter" style="color:@fontColor" data-value="@item.aggValue">@item.aggValue</span>
                                                                </div>
                                                                <div class="desc" style="color:@fontColor"> @item.widgetsTitle </div>
                                                            </div>
                                                        </a>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "MP" && x.MODULE_CODE == "01"))
                                    {
                                        if (!string.IsNullOrEmpty(item.aggValue))
                                        {
                                            var bgcolor = item.WidgetsBGColor;
                                            var fontColor = item.widgetsColor;
                                            var isblink = false;
                                            var aggValue = 0M;
                                            Decimal.TryParse(item.aggValue, out aggValue);
                                            if (item.MINVALUES > 0)
                                            {
                                                if (aggValue <= item.MINVALUES)
                                                {
                                                    bgcolor = item.WidgetsBGColor;
                                                    fontColor = item.widgetsColor;
                                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                                }
                                                else if (item.MAXVALUES > item.MINVALUES)
                                                {
                                                    if (aggValue >= item.MAXVALUES)
                                                    {
                                                        bgcolor = item.MAXBGCOLOR;
                                                        fontColor = item.MAXFONTCOLOR;
                                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                                    }
                                                    else
                                                    {
                                                        bgcolor = item.MIDBGCOLOR;
                                                        fontColor = item.MIDFONTCOLOR;
                                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                                    }
                                                }
                                            }
                                            if (item.QUICKTYPE == "MP")
                                            {
                                                <div class="grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                     data-gs-width="@item.Width" data-gs-height="2" data-gs-min-height="1" data-name="@item.ReportId" id="metric_@item.ReportId">
                                                    <div class="dashboard-stat dashboard-stat-v2 blue grid-stack-item-content" style="background-color:@bgcolor">
                                                        <a class="" href="#">
                                                            <div class="visual">
                                                                <i class="fa @if (string.IsNullOrEmpty(item.widgetFontIcon))
                                            {<text>fa-comments</text> }
                                            else
                                            {<text>@item.widgetFontIcon</text> } "></i>
                                                            </div>
                                                            <div class="details">
                                                                <div class="number @if (isblink)
                                            {<text>blinking</text> } ">
                                                                    <span data-counter="counterup" class="counter" style="color:@fontColor" data-value="@item.aggValue">@item.aggValue %</span>
                                                                </div>
                                                                <div class="desc" style="color:@fontColor"> @item.widgetsTitle </div>
                                                            </div>
                                                        </a>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }

                                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "MPP" && x.MODULE_CODE == "01"))
                                    {
                                        if (!string.IsNullOrEmpty(item.aggValue))
                                        {
                                            var bgcolor = item.WidgetsBGColor;
                                            var fontColor = item.widgetsColor;
                                            var isblink = false;
                                            var aggValue = 0M;
                                            Decimal.TryParse(item.aggValue, out aggValue);
                                            if (item.MINVALUES > 0)
                                            {
                                                if (aggValue <= item.MINVALUES)
                                                {
                                                    bgcolor = item.WidgetsBGColor;
                                                    fontColor = item.widgetsColor;
                                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                                }
                                                else if (item.MAXVALUES > item.MINVALUES)
                                                {
                                                    if (aggValue >= item.MAXVALUES)
                                                    {
                                                        bgcolor = item.MAXBGCOLOR;
                                                        fontColor = item.MAXFONTCOLOR;
                                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                                    }
                                                    else
                                                    {
                                                        bgcolor = item.MIDBGCOLOR;
                                                        fontColor = item.MIDFONTCOLOR;
                                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                                    }
                                                }
                                            }
                                            if (item.QUICKTYPE == "MPP")
                                            {
                                                <div class="col-md-2 grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                     data-gs-width="@item.Width" data-gs-height="2" data-gs-min-height="1" data-name="@item.ReportId" id="metric_@item.ReportId">


                                                    <div class="grid-stack-item-content">
                                                        <div class="easy-pie-chart ">
                                                            <div class="number piechart" data-percent="@item.aggValue" data-scale-color="#FF3F33" data-bar-color="@bgcolor">
                                                                <span>@item.aggValue</span>%
                                                            </div>
                                                            <a class="title" href="javascript:;">
                                                                @item.widgetsTitle

                                                            </a>
                                                        </div>
                                                        @*<div class="dashboard-stat dashboard-stat-v2 blue grid-stack-item-content" style="background-color:@bgcolor">
                                                                <a class="" href="#">
                                                                    <div class="visual">
                                                                        <i class="fa @if (string.IsNullOrEmpty(item.widgetFontIcon))
                                                                    {<text>fa-comments</text> }
                                                                    else
                                                                    {<text>@item.widgetFontIcon</text> } "></i>
                                                                    </div>
                                                                    <div class="details">
                                                                        <div class="number @if (isblink)
                                                                    {<text>blinking</text> } ">
                                                                            <span data-counter="counterup" class="counter" style="color:@fontColor" data-value="@item.aggValue">@item.aggValue %</span>
                                                                        </div>
                                                                        <div class="desc" style="color:@fontColor"> @item.widgetsTitle </div>
                                                                    </div>
                                                                </a>
                                                            </div>*@
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                    <script>
                                        $(function () {
                                            $('.piechart').easyPieChart({
                                                //your options goes here
                                            });
                                        });
                                    </script>

                                    @if (Model.Where(x => x.QUICKTYPE == "P" && x.MODULE_CODE == "01").ToList().Count > 0)
                                    {
                                        var data = Model.Where(x => x.QUICKTYPE == "P" && x.MODULE_CODE == "01").FirstOrDefault();
                                        <style>
                                            .k-chart-tooltip {
                                                color: #000000 !important;
                                            }
                                        </style>

                                        <div class="col-lg-6 col-xs-12 col-sm-12 grid-stack-item" data-gs-x="@data.XAxis" data-gs-y="@data.YAxis"
                                             data-gs-width="@data.Width" data-gs-height="@data.height" data-name="sp">
                                            <div class="portlet light  grid-stack-item-content">
                                                <div class="portlet-title">

                                                </div>
                                                <div class="portlet-body">
                                                    <div class="row">
                                                        @foreach (var item in Model.Where(x => x.QUICKTYPE == "P" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                                {

                                    if (string.IsNullOrEmpty(item.sparklineoption))
                                    {
                                        item.sparklineoption = "line";
                                    }
                                    <div class="col-md-4 ">
                                        <div class="sparkline-chart">
                                            <div class="number" id="sparkline_@a" style="line-height: 100px"></div>
                                            <a class="title" href="javascript:;">
                                                @item.widgetsTitle

                                            </a>
                                        </div>
                                    </div>
                                    <script>
                                        var myvalues = [];
                                        var mycategory = [];
                    @foreach (var t in item.SparkLine)
                    {

                      <text>
                                        myvalues.push(@t.VALUE);

                    </text>
                         <text>
                                        mycategory.push('@t.LABEL');

                    </text>
                    }

                                        $("#sparkline_@a").kendoSparkline({

                                            series: [{
                                                name: "Sales",
                                                data: myvalues,
                                                seriesColors: ["#558B9B"],
                                                background:'red'
                                            }],
                                            type: '@item.sparklineoption',
                                            categoryAxis: {
                                                categories: mycategory
                                            },
                                            tooltip: {
                                                visible: true,
                                                template: "${category} - ${value}"
                                            }
                                        });
                                        var primary_hue = 266;
    @*$('#sparkline_@a').sparkline(myvalues, {
        type: '@item.sparklineoption',
                                        barColor: '#'+Math.floor(Math.random() * 16777215).toString(16),
                                        fillColor: '#' + Math.floor(Math.random() * 16777215).toString(16),
        width: '150px',
        height: '80px',
        sliceColors: ['#5d3092', '#4dc9ec', '#9de49d', '#9074b1', '#66aa00', '#dd4477', '#0099c6', '#990099'],
        borderWidth: 7,
                    borderColor: '#f5f5f5',
         @if (item.sparklineoption == "bar")
         {
                           <text>
                    tooltipFormat: "{{value}} {{offset:names}} ",
                    </text>
         }
         else
         {
               <text>
                    tooltipFormat: "{{y:val}} {{offset:names}} ",
                    </text>
         }


                    tooltipValueLookups: {



             names: {
                 @foreach (var t in item.SparkLine)
                 {


                   <text>
                    @b: '@t.LABEL.ToString()',
                        </text>
                     b = b + 1;
                 }

                 // Add more here
             }




         },
    });*@
                                    </script>
                                                            a = a + 1;
                                                            <div class="margin-bottom-10 visible-sm"> </div>
                                                        }

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.Where(x => x.QUICKTYPE == "A" && x.MODULE_CODE == "01").ToList().Count > 0)
                                    {
                                        var data = Model.Where(x => x.QUICKTYPE == "A" && x.MODULE_CODE == "01").FirstOrDefault();
                                        <style>
                                            .k-chart-tooltip {
                                                color: #000000 !important;
                                            }
                                        </style>
                                        foreach (var item in Model.Where(x => x.QUICKTYPE == "A" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                                        {

                                            <div class="col-lg-6 col-md-6 col-xs-12 col-sm-12 grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                 data-gs-width="@item.Width" data-gs-height="6" data-gs-min-height="6" data-name="@item.ReportId">
                                                <div class="portlet light  grid-stack-item-content">
                                                    <div class="portlet-title">
                                                        <div class="caption">
                                                            <i class="icon-equalizer font-dark hide"></i>
                                                            <span class="caption-subject font-dark bold uppercase">@item.widgetsTitle</span>

                                                        </div>
                                                        <div class="tools">
                                                            <a href="" class="collapse"> </a>
                                                            <a href="#portlet-config" data-toggle="modal" class="config"> </a>
                                                            <a href="" class="reload"> </a>
                                                            <a href="" class="remove"> </a>
                                                        </div>
                                                    </div>
                                                    <div class="portlet-body">
                                                        <div class="row">
                                                            <div id="sparkline1_@a"></div>

                                                            <script>
                                        var myvalues1 = [];
                                            var mycategory1 = [];
                                            var mytarget1=[];
                    @foreach (var t in item.SparkLine)
                    {

                      <text>
                                            myvalues1.push(@t.VALUE);

                    </text>
                         <text>
                                            mycategory1.push('@t.LABEL');

                    </text>
                         <text>
                                            mytarget1.push('@t.TARGET');

                    </text>
                    }

                                            $("#sparkline1_@a").kendoChart({
                                                chartArea: {
                                                    height: 350,
                                                    width: 550,
                                                },
                                                onDrag: function (e) {
                                                    var chart = e.sender;
                                                    var ds = chart.dataSource;
                                                    var options = chart.options;

                                                    var categoryRange = e.axisRanges.CategoryAxis;

                                                    if (categoryRange) {
                                                        var xMin = categoryRange.min;
                                                        var xMax = categoryRange.max;

                                                        options.categoryAxis.min = xMin;
                                                        options.categoryAxis.max = xMax;

                                                        ds.filter(viewModel.getFilter(xMin, xMax));
                                                    }
                                                },
                                                pannable: {
                                                    lock: "y"
                                                },
                                                zoomable: {
                                                    mousewheel: {
                                                        lock: "y"
                                                    },
                                                    selection: {
                                                        lock: "y"
                                                    }
                                                },
                                                title: {
                                                    text: '@item.widgetsTitle'
                                                },
                                                legend: {
                                                    position: "bottom"
                                                },
                                                seriesDefaults: {
                                                    type: "line"
                                                },
                                                series: [{
                                                    name: '@item.xaxislabel',
                                                    data: myvalues1,
                                                }, {
                                                    type: "column",
                                                    data: mytarget1,
                                                    stack: true,
                                                    name: '@item.yaxislabel',
                                                    color: "#248f24"
                                                }],
                                                valueAxis: {
                                                    labels: {
                                                        format: "{0}"
                                                    }
                                                },
                                                tooltip: {
                                                    visible: true,
                                                    template: "${category} - ${value}"
                                                },

                                                categoryAxis: {
                                                    categories: mycategory1,
                                                    labels: {
                                                        rotation: -45,
                                                    },
                                                }
                                            });
                                                            </script>

                                                            <div class="margin-bottom-10 visible-sm"> </div>


                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            a = a + 1;
                                        }
                                    }
                                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "S" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                                    {
                                        if (!string.IsNullOrEmpty(item.aggValue))
                                        {
                                            var bgcolor = item.WidgetsBGColor;
                                            var fontColor = item.widgetsColor;
                                            var isblink = false;
                                            var aggValue = 0M;
                                            Decimal.TryParse(item.aggValue, out aggValue);
                                            if (item.MINVALUES > 0)
                                            {
                                                if (aggValue <= item.MINVALUES)
                                                {
                                                    bgcolor = item.WidgetsBGColor;
                                                    fontColor = item.widgetsColor;
                                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                                }
                                                else if (item.MAXVALUES > item.MINVALUES)
                                                {
                                                    if (aggValue >= item.MAXVALUES)
                                                    {
                                                        bgcolor = item.MAXBGCOLOR;
                                                        fontColor = item.MAXFONTCOLOR;
                                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                                    }
                                                    else
                                                    {
                                                        bgcolor = item.MIDBGCOLOR;
                                                        fontColor = item.MIDFONTCOLOR;
                                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                                    }
                                                }
                                            }
                                            if (item.QUICKTYPE == "S")
                                            {
                                                @*<div id="speedometer_sortable" class="portlet portlet-sortable">*@
                                                <div class="col-lg-3 col-md-2 col-sm-4 col-xs-8 grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                     data-gs-width="2" data-gs-height="3" data-name="@item.ReportId">
                                                    <div class="grid-stack-item-content">


                                                        <div id="gauge_@item.ReportId" class="gauge" style="width:200px;">
                                                        </div>
                                                        <div class="widgetstitle font-green">@item.widgetsTitle</div>
                                                    </div>
                                                    @*<div class="gauge gauge-sortable-empty"> </div>*@
                                                    @*</div>*@
                                                </div>
                                                <script>
                            $("#gauge_@item.ReportId").kendoRadialGauge({
                                //gaugeArea: {
                                //    width: "230px",
                                //    height: "130",
                                //},

                                pointer: {
                                    value: '@aggValue'
                                },

                                scale: {
                                    minorUnit: 5,
                                    startAngle: -30,
                                    endAngle: 210,
                                    max: '@item.SPEEDOMETERMAXVALUE',
                                    labels: {
                                        position: "@item.LABELPOSITION",

                                    },
                                    ranges: [
                                        {
                                            from: 0,
                                            to: '@item.MINVALUES',
                                            color: '@item.WidgetsBGColor'

                                        }, {
                                            from: '@item.MINVALUES',
                                            to: '@item.MAXVALUES',
                                            color: "@item.MIDBGCOLOR"
                                        }, {
                                            from: '@item.MAXVALUES',
                                            to: '@item.SPEEDOMETERMAXVALUE',
                                            color: "@item.MAXBGCOLOR"
                                        }
                                    ]
                                }
                            });
                            var tooltip = $('#gauge_@item.ReportId').kendoTooltip({
                                filter: '[fill="rgba(255,102,0,.999)"]',
                                position: "center",
                                content: $("#gauge_@item.ReportId").data("kendoRadialGauge").value(),
                                show: function (e) {
                                    e.sender.options.content = $("#gauge_@item.ReportId").data("kendoRadialGauge").value();
                                    e.sender.refresh();
                                }
                            }).data("kendoTooltip");

                            //PortletDraggable.init("Dashboard_Widgets_SpedoMeter", "#speedometer_sortable");

                            @*$("#gauge_@item.ReportId").parent().parent().sortable({
                                connectWith: ".gauge.k-gauge.ui-sortable"
                            }).disableSelection();*@

                                                </script>
                                            }
                                        }


                                    }
                                    @foreach (var item in Model.Where(x => x.QUICKTYPE == "L" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                                    {
                                        if (!string.IsNullOrEmpty(item.aggValue))
                                        {
                                            var bgcolor = item.WidgetsBGColor;
                                            var fontColor = item.widgetsColor;
                                            var isblink = false;
                                            var aggValue = 0M;
                                            Decimal.TryParse(item.aggValue, out aggValue);
                                            var ishor = false;
                                            var horClass = "horizontal";
                                            if (item.IS_HORIZONTAL == "N")
                                            {
                                                ishor = true;
                                                horClass = "";
                                            }
                                            if (item.MINVALUES > 0)
                                            {
                                                if (aggValue <= item.MINVALUES)
                                                {
                                                    bgcolor = item.WidgetsBGColor;
                                                    fontColor = item.widgetsColor;
                                                    isblink = item.MINISBLINK == "Y" ? true : false;
                                                }
                                                else if (item.MAXVALUES > item.MINVALUES)
                                                {
                                                    if (aggValue >= item.MAXVALUES)
                                                    {
                                                        bgcolor = item.MAXBGCOLOR;
                                                        fontColor = item.MAXFONTCOLOR;
                                                        isblink = item.MAXISBLINK == "Y" ? true : false;
                                                    }
                                                    else
                                                    {
                                                        bgcolor = item.MIDBGCOLOR;
                                                        fontColor = item.MIDFONTCOLOR;
                                                        isblink = item.MIDISBLINK == "Y" ? true : false;
                                                    }
                                                }
                                            }
                                            if (item.QUICKTYPE == "L")
                                            {
                                                <style>
                                                    hr.style-three {
                                                        border: 0;
                                                        border-bottom: 1px dashed #ccc;
                                                        background: #999;
                                                    }




                                                    #linearGauge-container {
                                                        display: inline-block;
                                                        text-align: center;
                                                        height: 330px;
                                                        width: 330px;
                                                        background: transparent url("../../../content/linear-gauge-container.png") no-repeat 50% 50%;
                                                    }

                                                        #linearGauge-container.horizontal {
                                                            background-image: url("../../../content/linear-gauge-container-h.png");
                                                        }

                                                    .linergauge {
                                                        width: 310px;
                                                        height: 310px;
                                                        margin-top: 5%;
                                                    }
                                                </style>
                                                @*<div id="speedometer_sortable" class="portlet portlet-sortable">*@
                                                <div class="col-lg-2 col-md-2 col-sm-4 col-xs-8 grid-stack-item" data-gs-x="@item.XAxis" data-gs-y="@item.YAxis"
                                                     data-gs-width="2" data-gs-height="6" data-name="@item.ReportId">
                                                    <div class="grid-stack-item-content">
                                                        <div id="linearGauge-container" class="@horClass">
                                                            <div id="liner_@item.ReportId" class="linergauge gauge" @if (ishor) { <text> style="width:150px;" </text> }>
                                                            </div>
                                                        </div>

                                                        <div class="widgetstitleliner font-green" style="text-align:center;">@item.widgetsTitle</div>
                                                    </div>

                                                    @*<div class="gauge gauge-sortable-empty"> </div>*@
                                                    @*</div>*@
                                                </div>
                                                <script>
                                    $("#liner_@item.ReportId").kendoLinearGauge({
                                        pointer: {
                                            value: 65,
                                            shape: "arrow"
                                        },
                                        scale: {
                                            majorUnit: 20,
                                            minorUnit: 5,
                                         //   vertical: '@ishor'== "'True'"?true : false,
                                            max: '@item.SPEEDOMETERMAXVALUE',
                                    labels: {
                                        position: "@item.LABELPOSITION",

                                            },

                                    ranges: [
                                        {
                                            from: 0,
                                            to: '@item.MINVALUES',
                                            color: '@item.WidgetsBGColor'

                                        }, {
                                            from: '@item.MINVALUES',
                                            to: '@item.MAXVALUES',
                                            color: "@item.MIDBGCOLOR"
                                        }, {
                                            from: '@item.MAXVALUES',
                                            to: '@item.SPEEDOMETERMAXVALUE',
                                            color: "@item.MAXBGCOLOR"
                                        }
                                    ]
                                        }
                                    });


                            //PortletDraggable.init("Dashboard_Widgets_SpedoMeter", "#speedometer_sortable");

                            @*$("#gauge_@item.ReportId").parent().parent().sortable({
                                connectWith: ".gauge.k-gauge.ui-sortable"
                            }).disableSelection();*@

                                                </script>
                                            }
                                        }


                                    }
                                </div>



                            </div>
                        </div>
        <!-- END Portlet PORTLET-->
                    }

                    @if (Model.Where(x => x.QUICKTYPE == "H" && x.MODULE_CODE == "01").ToList().Count > 0)
                    {
                        foreach (var item in Model.Where(x => x.QUICKTYPE == "H" && x.MODULE_CODE == "01").OrderBy(x => x.orderIndex))
                        {
                            if (string.IsNullOrEmpty(item.tableSize))
                            {
                                item.tableSize = "col-md-6";
                            }
                            <div class="@item.tableSize">
                                <!-- BEGIN Portlet PORTLET-->
                                <div class="portlet portlet-sortable light bordered">
                                    <div class="portlet-title">
                                        <div class="caption">
                                            <i class="fa fa-gift"></i>@item.widgetsTitle
                                        </div>
                                        <div class="tools">
                                            <a href="javascript:;" class="collapse" data-original-title="" title=""> </a>
                                            <a href="#portlet-config" data-toggle="modal" class="config" data-original-title="" title=""> </a>
                                            <a href="javascript:;" class="reload" data-original-title="" title=""> </a>
                                            <a href="" class="fullscreen" data-original-title="" title=""> </a>
                                            <a href="javascript:;" class="remove" data-original-title="" title=""> </a>
                                        </div>
                                    </div>
                                    <div class="portlet-body">
                                        @Html.Raw(item.HtmlResult)
                                    </div>
                                </div>
                                <!-- END Portlet PORTLET-->
                            </div>


                        }
                        <script src="https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min.js"></script>
                        <script src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min.js"></script>
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>

                        <script src=" https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>

                        <script src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min.js"></script>
                        <script src=" https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min.js"></script>
                        <script>
                                    $('.table').DataTable({
                                        "pageLength": 15,
                                        dom: 'Bfrtip',
                                        buttons: [
                                            'copy', 'csv', 'excel', 'pdf', 'print'
                                        ]
                                    });
                        </script>
                    }
                </div>
                <script>
    function blink(selector) {
        $(".blinking").fadeOut('slow', function () {
            $(this).fadeIn('slow', function () {
                blink(this);
            });
        });
                                    };

    $(function () {
        this.saveGrid = function () {
            this.serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                var node = el.data('_gridstack_node');
                return {
                    XAxis: node.x,
                    YAxis: node.y,
                    Width: node.width,
                    Height: node.height,
                    widgetsId: el.data('name'),
                    ReportName:'@ViewBag.reportname',
                };
            }, this);
            $.ajax({
                type: "POST",
                url: window.location.protocol + '//' + window.location.host +"/Api/QueryBuilder/SaveReordingWidgets",
                data: JSON.stringify(this.serializedData),
                contentType: "application/json; charset=utf-8",
                success: function (msg) {
                    displayBarNotification("Order saved successfully.")
                    // Do something interesting here.
                }
            });

            return false;
        }.bind(this);
        var options = {
            //cellHeight: 80,
            verticalMargin: 10,
            horizMargin :5,
            animate:true
        };
        $('.grid-stack').gridstack(options);
                    $('#saveorderwidgets').click(this.saveGrid);
                
                                    });

    $(document).ready(function () {

        $("#speedometer_sortable").sortable({
            connectWith: ".spedo-meter",
            opacity: 0.8,
            item: '.spedo-meter',
            coneHelperSize: true,
            forcePlaceholderSize: true,
            tolerance: "pointer",
            helper: "clone",
            tolerance: "pointer",
            forcePlaceholderSize: !0,
            helper: "clone",
            //cancel: ".gauge-sortable-empty, .gauge-fullscreen", // cancel dragging if portlet is in fullscreen mode
            revert: 250, // animation in milliseconds
            update: function (e, t) {
                t.item.prev().hasClass("gauge-sortable-empty") && t.item.prev().before(t.item)

                var order1 = $('#speedometer_sortable>div div').map(function () {
                    if (this.id == null || this.id == "") {
                        return;
                    }
                    return this.id;
                }).toArray().join(',');

                var order2 = $('#metric_sortable >div').map(function () {
                    if (this.id == null || this.id == "") {
                        return;
                    }
                    return this.id;
                }).toArray().join(',');
                var order = order1 + ',' + order2;
                saveToDB(order, "Dashboard_Widgets_SpedoMeter");

            }
        });
        //PortletDraggable.init("Dashboard_Widgets_SpedoMeter", "#speedometer_sortable");
         blink(".blinking");
        //$('.blinking').blink({ delay: 200 });

    });



                </script>
                <script>
                    $("#RemoveSession").on("click", function () {
                        $.ajax({
                type: "POST",
                    url: window.location.protocol + '//' + window.location.host +"/Api/SalesDashboard/RemoveDashboardcache?reportname='@ViewBag.reportname' ",
                    data: { reportname: '@ViewBag.reportname' },
                    contentType: "application/json; charset=utf-8",
                    success: function (msg) {
                        console.log(msg);
                        displayBarNotification("Remove Cache sucessfull.")
                        // Do something interesting here.
                    }
                        });
                    })

            //$(document).ready(function () {
            //    $('.counter').counterUp({
            //        delay: 10,
            //        time: 1000
            //    });
            //});
                </script>
            }
            }
