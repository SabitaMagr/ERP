@using NeoErp.Sales.Modules.Services.Models.AgeingReport
@model IEnumerable<AgeingColumnRange>
    <style>
        button.k-button.k-button-icontext.k-grid-excel {
            margin-left: 920px;
        }

        .funnelChart {
            position: relative;
            height: 200px;
            touch-action: pan-y;
            padding-right: unset;
            padding-left: unset;
        }
    </style>


    <!-- BEGIN PAGE CONTENT-->
    <div class="col-md-12">
        <div class="portlet light bordered">
            <div class="portlet-body form">
                <div class="row">
                    <div id="ageing-treelist"></div>
                    <div id="ageing-chart"></div>
                    <div id="monthlychartaging"></div>
                    @*@foreach(var id in )*@
                </div>
            </div>
        </div>
    </div>

    <!-- END PAGE CONTENT-->
    <input type="hidden" id="subcode" value="0" />
    <input type="hidden" id="parentid" value="0" />
    <input type="hidden" id="uid" value="0" />
    <input type="hidden" id="description" value="" />

    <script src="@Scripts.Url(" ~/JS/DateFilter.js?V8")" type="text/javascript"></script>

    <script type="text/javascript">

        function myCustomFunction(arrey, header) {

            var result = $.grep(arrey, function (e) { return e.ColumnRangeName === header; });

            var value = 0;
            if (result.length == 0) {

            } else if (result.length == 1) {
                value = result[0].NetAmount
                if (value < 0) {
                    value = "(" + (-value) + ")";
                }
            }
            return value;
        }

        $(document).ready(function () {
            var service = window.location.protocol + "//" + window.location.host + "/api/AgeingReport/GetMonthlyAgeingReport";
            
            if (agingFirst == true) {
                consolidate.init(function () {
                    BindGrid(service);
                });
                agingFirst = false;
            } else {
                BindGrid(service);
            }



            var activeTab = $("#ageingtabs").on("click", ".close", function () {
                var link = $(this).parent().attr("href");
                $('div' + link).remove();
                $(this).parent().remove();
                $(".tab-pane").removeClass("active");
                $("#ageingtab1").addClass('active');
                $('#ageingtabs a:first').tab('show');
            });

            // right click on every context menu; id=ledgerSummaryContextmenu

            // make the new tab active
            //$('#ageingtabs a:last').tab('show');
            //$(".tab-pane").removeClass("active");
            //$('div#ageingtab' + nextTab).addClass('active');
        });

        //    $("#ageingfirsttab").on("click", function () {
        //        $(".tab-pane").removeClass("active");
        //        $("#ageingtab1").addClass('active');
        //        $('#ageingtabs a:first').tab('show');
        //    });
        //    $('.nav-pills, .nav-tabs').tabdrop()
        //});

        function BindGrid(serviceUrl) {
                 
            var dataSource = new kendo.data.TreeListDataSource({
                transport: {
                    read: {
                        url: serviceUrl,
                        dataType: "json",
                        type: "POST",
                        data: function (paramData) {
                            var treeList = $("#ageing-treelist").data("kendoTreeList");
                            var dataSource = treeList.dataSource;
                            
                            if (paramData.id) {

                                var parentNode = dataSource.get(paramData.id);
                                return $.extend(ageing.filters(), paramData.id, ReportFilter.filterAdditionalData());
                            }
                            return $.extend(ageing.filters(), ReportFilter.filterAdditionalData());
                        }
                    },
                    schema: {
                        model: {
                            id: "MasterId",
                            fields: {
                                parentId: { field: "parentId", nullable: true },
                                MasterId: { field: "id", nullable: false },

                            },
                        }
                    }
                },

            });
            var headerTitle = $("input[name='ageing-type-filter']:checked").attr("data-label");

            $("#ageing-treelist").kendoTreeList({
                dataSource: dataSource,
                dataBound: onDataBoundtest,
                columns: [
                    {
                        field: "Description",
                        title: "Description",
                        width: 280,
                    },


                    @foreach (var item in Model) {
                        <text>
                        {

                            field: '@item',
                            title: '@item.ColumnRange',
                            format: "{0:n}",
                            //template:$.proxy(kendo.template($("#column-range-template").html()))
                            template: " #= kendo.format('{0:n}', myCustomFunction(RangeColumnData,'@item.ColumnRange') )#",
                            attributes: {
                                style: "text-align: right;"
                            }
                        },

                           </text>
                        }
                        {
                            field: "Total",
                            title: "Total",
                            format: "{0:n}",
                            attributes: {
                                style: "text-align: right;"
                            },
                            template: " #= kendo.format('{0:n}',Total<0?'('+(-Total)+')':Total)#"
                        }
            ],
                columnMenu: {
                columns: true
                },
            columnMenuInit: function (e) {
                wordwrapmenu(e);
            },
            resizable: true,
            selectable: true,
            change: function () {
                
                var text = "";
                var grid = this;
                grid.select().each(function () {
                    var dataItem = grid.dataItem($(this));
                    $("#subcode").val(dataItem.SubCode);
                    $("#parentid").val(dataItem.AccCode);
                    $("#uid").val(dataItem.uid);
                    $("#description").val(dataItem.Description);
                });
            },
        });
        //var dataSourcechart = new kendo.data.DataSource({
        //    transport: {
        //        read: {
        //            url: serviceUrl,
        //            dataType: "json", // <-- The default was "jsonp".
        //            type: "POST",
        //            contentType: "application/json; charset=utf-8"
        //        },
        //        parameterMap: function (options, type) {
        //            var paramMap = JSON.stringify($.extend(options, filter));
        //            delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
        //            delete paramMap.$format; // <-- remove format parameter.
        //            return paramMap;
        //        }
        //    },
        //    group: {
        //        field: "Description"
        //    },

        //    sort: {
        //        field: "Description",
        //        dir: "asc"
        //    },

        //});
        //console.log(dataSourcechart);

        //$("#ageing-chart").kendoChart({
        //    chartArea: {
        //        height: ($("#ageing-chart").hasClass("portlet-fullscreen")) ? 550 : 350,
        //    },
        //    onDrag: function (e) {
        //        var chart = e.sender;
        //        var ds = chart.dataSource;
        //        var options = chart.options;

        //        var categoryRange = e.axisRanges.CategoryAxis;

        //        if (categoryRange) {
        //            var xMin = categoryRange.min;
        //            var xMax = categoryRange.max;

        //            options.categoryAxis.min = xMin;
        //            options.categoryAxis.max = xMax;

        //            ds.filter(viewModel.getFilter(xMin, xMax));
        //        }
        //    },
        //    pannable: {
        //        lock: "y"
        //    },
        //    zoomable: {
        //        mousewheel: {
        //            lock: "y"
        //        },
        //        selection: {
        //            lock: "y"
        //        }
        //    },
        //    dataSource: dataSourcechart,
        //    legend: {
        //        position: "bottom"
        //    },
        //    seriesDefaults: {
        //        type: "line",
        //        labels: {
        //            visible: true,
        //            template: "#= FormatLabels(value)#",
        //            rotation: '270',
        //            padding: {
        //                left: -5
        //            },
        //        },
        //        style: "smooth",
        //    },
        //    series: [{
        //        field: "RangeColumnData.NetAmount",

        //    }],
        //    categoryAxis: {
        //        field: "RangeColumnData.ColumnRangeName",
        //        labels: {
        //            rotation: -45,
        //        },

        //    },
        //    valueAxis: {
        //        line: {
        //            visible: true
        //        },
        //        labels: {
        //            rotation: 'auto',
        //            template: "#= FormatLabels(value)#"
        //        },

        //    },
        //    tooltip: {
        //        visible: true,
        //        format: "{0}",

        //    },


        //});
        }

        function onDataBoundtest(arg) {     
            
            var myElem = document.getElementById('trParentHeader');
            if (myElem == null) {
                $("#grid").find("th.k-header").parent().before("<tr id='trParentHeader'><th></th><th colspan='2' class='k-header'><strong>Opening Balance</strong></th>  <th colspan='2' class='k-header'><strong>Trasaction Balance</strong></th>  <th scope='col' colspan='2' class='k-header'><strong>Closing Balance</strong></th></tr>");
            }
            // this.pager.element.hide();
            var grid = this;
            grid.tbody.find('>tr').each(function () {
                
                var dataItem = grid.dataItem(this);
                //var childnumbher = dataItem.CHILD_REC;
                var childnumbher = dataItem.hasChildren;
                if ($("#showsubledger").prop('checked') == true) {
                    
                    var subchildnumbher = dataItem.sub_count;
                    if (childnumbher) {
                        $(this).find("td:first-child").find('span').removeClass("k-i-expand").addClass("k-i-none");
                    }
                }
                else {
                    if (!childnumbher) {
                        
                        $(this).addClass("rightColumnClass");
                        $(this).find("td:first-child").find('span').removeClass("k-i-expand").addClass("k-i-none");
                    }
                }
                //$(this).addClass("rightColumnClass");
            });

            $("#context-menu-subLedgerDetailStatement").css({ "top": event.pageY + "px", "right": event.pageX + "px" })



        };
        var getMaxValueFromDataSourceLocal = function (e) {
            var data = e.sender.dataSource.view();
            var max = 0;
            var min = 0;

            for (var i = 0, length = e.sender.options.series.length; i < length; i++) {
                var fieldtype = e.sender.options.series[i].field;

                //calculate max value for group
                try {
                    jQuery.map(data, function (obj) {
                        jQuery.map(obj.items, function (objitem) {
                            if (objitem[fieldtype] > max)
                                max = objitem[fieldtype];
                        })
                    });
                } catch (e) { }

                //calculate max value for non-group
                try {
                    jQuery.map(data, function (obj) {
                        if (obj[fieldtype] > max)
                            max = obj[fieldtype];
                    });
                } catch (e) { }





                //calculate min value for group
                try {
                    jQuery.map(data, function (obj) {
                        jQuery.map(obj.items, function (objitem) {
                            if (objitem[fieldtype] < min)
                                min = objitem[fieldtype];
                        });
                    });
                } catch (e) { }

                //calculate min value for non-group
                try {
                    jQuery.map(data, function (obj) {
                        if (obj[fieldtype] < min)
                            min = obj[fieldtype];
                    });
                } catch (e) { }



            };
            var maxValue = -(min) > max ? -(min) : max;
            return maxValue;

        }
        $("#chartbutton").on("click", function () {

            var treelistDisplay = $("#ageing-treelist").css("display");
            if (treelistDisplay == "none") {
                $("#ageing-treelist").css("display", "");
                $("#monthlychartaging").css("display", "none");
                $("#ageing-chart").css("display", "none");
                return;
            }
            else {
                $("#ageing-chart").empty();
                $("#monthlychartaging").empty();
                $("#ageing-treelist").css("display", "none");
                $("#monthlychartaging").css("display", "");
                $("#ageing-chart").css("display", "");
            }

            var dataitemarray = [];
            var datasourcedata = $("#ageing-treelist").data().kendoTreeList.dataSource.view();
            console.log(datasourcedata);
            for (var i = 0; i < datasourcedata.length; i++) {
                
                var dataitem = datasourcedata[i];
                console.log(dataitem);
                //$.each(datasourcedata[i],function(obj,j){
                //    $.extend(dataitem,obj,{"test": i});
                //});                
                //var dataitem = $.extend({},datasourcedata[i],{})
                var dataitemtest = datasourcedata[i].RangeColumnData;              
                $("#monthlychartaging").append("<div class='col-md-4 funnelChart' id='" + dataitem.Description + "'></div>")
                dataitemtest.Descriptions = dataitem.Description;
                $("#" + dataitem.Description + "").kendoChart({
                    chartArea: {
                        height: 200,
                    },
                    title: {
                        text: dataitem.Description,
                        position: "bottom"
                    },
                    dataSource: {
                        data: dataitemtest,

                        group: {
                            field: "Descriptions"
                        },
                        requestStart: function () {

                            kendo.ui.progress($("#ageing-chart"), true);

                        },
                        requestEnd: function () {
                            kendo.ui.progress($("#ageing-chart"), false);
                        },
                        sort: {
                            field: "OrderBy",
                            dir:"asc"
                        },
                    },
                    group: {
                        field: "ColumnRangeName"
                    },
                    series: [{ 
                        field: "NetAmount",
                        categoryField:"ColumnRangeName",
                        name: "#= group.value #" 
                    }],
                    //series: [{
                    //    type: "NetAmount",
                    //    field: "NetAmount",
                    //    name: "#=value # (close)"
                    //}],
                    legend: {
                        position: "right"
                    },
                    //dataBound: function (e) {
                    //    var maxValue = getMaxValueFromDataSourceLocal(e);
                    //    var majorunit = Math.max(6, maxValue / 6);
                    //    e.sender.options.valueAxis.majorUnit = majorunit;
                    //    e.sender.options.valueAxis.max = maxValue + majorunit;
                    //},
                    tooltip: {

                        visible: true,
                        //format: "{0}",
                        template: "#= dataItem.ColumnRangeName #: \n #= FormatLabels(value)#",
                        color: "#FFFFFF"
                    },
                    valueAxis: {
                        line: {
                            visible: true
                        },
                        labels: {
                            rotation: 'auto',
                            template: "#= category #: #= FormatLabels(value) #",
                        },

                    },                    
                    seriesColors: ["#0e5a7e","#166f99","#2185b4","#319fd2","#3eaee2"],
                    seriesDefaults: {
                        title:{field: "Descriptions"},
                        labels: {
                            visible: true,
                            background: "transparent",
                            align: "center",
                            color:"black",
                            format: "N0",
                            template: "#= FormatLabels(value) #",
                        },
                        dynamicSlope: true,
                        dynamicHeight: false,
                        type: "funnel",
                        neckRatio: 0.26
                    },
                });
                for (var j = 0; j < dataitemtest.length; j++) {
                    dataitemtest[j].Descriptions = dataitem.Description;
                    dataitemarray.push(dataitemtest[j]);
                }
                $("#" + dataitem.Description).removeAttr("style");


            }
            console.log(dataitemarray);
            $("#ageing-chart").kendoChart({
                chartArea: {
                    height: 400,
                },
                title: { text: "Ageing" },
                dataSource: {
                    data: dataitemarray,

                    group: {
                        field: "Descriptions"
                    },
                    requestStart: function () {

                        kendo.ui.progress($("#ageing-chart"), true);

                    },
                    requestEnd: function () {
                        kendo.ui.progress($("#ageing-chart"), false);
                    },
                    sort: {
                        field: "OrderBy",
                        dir: "asc"
                    },
                },
                group: {
                    field: "Descriptions"
                },
                series: [{ field: "NetAmount", name: "#= group.value #" }],
                //series: [{
                //    type: "NetAmount",
                //    field: "NetAmount",
                //    name: "#=value # (close)"
                //}],
                legend: {
                    position: "bottom"
                },
                dataBound: function (e) {
                    var maxValue = getMaxValueFromDataSourceLocal(e);
                    var majorunit = Math.max(6, maxValue / 6);
                    e.sender.options.valueAxis.majorUnit = majorunit;
                    e.sender.options.valueAxis.max = maxValue + majorunit;
                },
                tooltip: {
                    visible: true,
                    format: "{0}",
                    template: "#= series.name #: \n #= FormatLabels(value)#",
                    color: "#FFFFFF"
                },
                valueAxis: {
                    line: {
                        visible: true
                    },
                    labels: {
                        rotation: 'auto',
                        format: "{0}",
                        template: "#= FormatLabels(value)#"
                    },

                },

                categoryAxis: {
                    field: "ColumnRangeName",
                    labels: {
                        // format: "MMM"
                    }
                },
                seriesColors: ["#0000FF","#6495ED","#00FFFF","#008B8B","#9932CC","#483D8B","#4B0082","#FFA500","#663399","#2E8B57"],
                seriesDefaults: {
                    type: "line",
                    labels: {
                        visible: false,
                        template: "#= FormatLabels(value)#",
                        rotation: '270',
                        padding: {
                            left: -5
                        },
                    },
                    style: "smooth",
                },
            });

        })
    </script>
