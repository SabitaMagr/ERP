
@using NeoErp.Core.Models;
@using NeoErp.Core;
@using NeoErp.Core.Infrastructure;
@{
    var workingContent = EngineContext.Current.Resolve<IWorkContext>();
}
<style>
    div.k-grid-header th.k-header, tr.k-filter-row > th {
        text-align: center;
    }


    .k-grid table {
        table-layout: fixed;
    }

    .no-data {
        background-color: red;
    }
    /*#grid thead{
             font-size:11px;
        }*/
    .k-grid td {
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .k-grid-content {
        font-size: 10px;
    }

    .k-grid-content-locked {
        font-size: 10px;
    }

    .k-grid-footer {
        font-size: 10px;
    }

    .k-grid-header {
        font-size: 11px;
    }

    .floatright {
        float: right;
        margin-top: 2px !important;
    }

    .red {
        color: green !important;
    }
</style>
<div class="page-content">
    <div class="page-bar">
        <ul class="page-breadcrumb"></ul>
        <div class="page-toolbar">
            <div class="btn-group pull-right">
                <div class="actions">
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/ConsolidateFilter.cshtml", true)
                    </div>
                    @Html.Partial("~/Views/Shared/Controls/ComposeMail.cshtml")
                    <a class="btn btn-circle btn-icon-only btn-default" id="RunQuery" href="#">
                        <i class="icon-control-play"></i>
                    </a>
                    <div class="btn-group">
                        @Html.Partial("~/Views/Shared/Controls/_ReportConfig.cshtml", "SalesAnalysis")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- END PAGE HEADER-->
    <!-- BEGIN PAGE CONTENT-->
    <div class="row collapse in" id="demo">
        <div class="col-md-12">
            <div class="portlet light bordered">


                <div class="portlet-body form">
                    <div class="row">
                        <div id="grid"></div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- END PAGE CONTENT-->
</div>
<script src="@Scripts.Url("~/JS/dynamicReport.js?V2")" type="text/javascript"></script>
<script type="text/javascript">
    var fileMailSender = new ManualEmailSender({
        GridName: "grid",
        GridRefreshTriggerName: "RunQuery",
        reportName: "SalesAnalysis",
    });
</script>
<script>

    var reportConfig = GetReportSetting("SalesAnalysis");
    var columns = [];
    function getDateFormat(date) {
        return kendo.format("{0:" + reportConfig.dateFormat + "}", date);
    }

    $(".applydp").on("click", function (evt) {
        evt.preventDefault();
        $("#RunQuery").trigger("click");
    })

    $("#loadAdvancedFilters").on("click", function (evt) {
        evt.preventDefault();
        $("#RunQuery").trigger("click");
    });



    $(document).ready(function () {
        var urltest = window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAnalysis";
        consolidate.init(function () {
            BindGrid(urltest);
        });

        fileMailSender.init();







        $("#RunQuery").click(function (evt) {
            evt.preventDefault();
            urltest = window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAnalysis";
            KendoGridRefresh(urltest);
        });

        //BindGrid(urltest);
    });


    function BindGrid(readurl) {
        var companyName = ('@workingContent.CurrentUserinformation.company_name');
        var fromADdate = $("#FromDateVoucher").val()
        var toADdate = $("#ToDateVoucher").val();
        var fromBSdate = $("#fromInputDateVoucher").val();
        var toBSdate = $("#toInputDateVoucher").val();
        var branches = ReportFilter.getBranchs();
        reportConfig = GetReportSetting("SalesAnalysis");
        var dataSource = new kendo.data.DataSource({
            type: "json",
            transport: {
                read: {
                    url: readurl, // <-- Get data from here.
                    dataType: "json", // <-- The default was "jsonp".
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                },
                parameterMap: function (options, type) {
                    var paramMap = JSON.stringify($.extend(options, ReportFilter.filterAdditionalData()));
                    //  paramMap.formDate = $("#FromDateVoucher").val();
                    delete paramMap.$inlinecount; // <-- remove inlinecount parameter.
                    delete paramMap.$format; // <-- remove format parameter.
                    return paramMap;
                },

            },

            error: function (e) {
                displayPopupNotification("Sorry error occured while processing data", "error");
            },
            serverFiltering: false,
            serverAggregates: false,
            serverPaging: false,
            //serverSorting: true,
            pageSize: reportConfig.defaultPageSize,
            schema: {
                total: function (response) {
                    return $(response.data).length;
                }
            },
            pageSize: 1,
        });
        dataSource.fetch(function () {
            Calculation(this.data())
        });
        var grid = $("#grid").kendoGrid({
            //dataSource: dataSource,
            //toolbar: kendo.template($("#toolbar-template").html()),
            excel: {
                fileName: "Goods Receipt Notes",
                //proxyURL: "//demos.telerik.com/kendo-ui/service/export",
                allPages: true
            },
            height: window.innerHeight - 150,
            sortable: true,
            reorderable: true,
            groupable: false,
            resizable: true,
            filterable: {
                extra: false,
                operators: {
                    number: {
                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "is greater than or equal to	",
                        gt: "is greater than",
                        lte: "is less than or equal",
                        lt: "is less than",
                    },
                    string: {

                        eq: "Is equal to",
                        neq: "Is not equal to",
                        startswith: "Starts with	",
                        contains: "Contains",
                        doesnotcontain: "Does not contain",
                        endswith: "Ends with",
                    },
                    date: {

                        eq: "Is equal to",
                        neq: "Is not equal to",
                        gte: "Is after or equal to",
                        gt: "Is after",
                        lte: "Is before or equal to",
                        lt: "Is before",
                    }
                }
            },



            columnMenu: true,
            columnMenuInit: function (e) {
                wordwrapmenu(e);
                checkboxItem = $(e.container).find('input[type="checkbox"]');
            },
            columnShow: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('SalesAnalysis', 'grid');
            },
            columnHide: function (e) {
                if ($(".k-widget.k-reset.k-header.k-menu.k-menu-vertical").is(":visible") && checkboxItem != "")
                    SaveReportSetting('SalesAnalysis', 'grid');
            },
            pageable: {
                refresh: true,
                pageSizes: reportConfig.itemPerPage,
                buttonCount: 5
            },
            //  autoBind: true,
            scrollable: {
                virtual: true
            },
            //scrollable: true,
            autoBind: false,
            dataBound: function (o) {

                var grid = o.sender;
                if (grid.dataSource.total() == 0) {
                    var colCount = grid.columns.length + 1;
                    $(o.sender.wrapper)
                        .find('tbody')
                        .append('<tr class="kendo-data-row" style="font-size:12px;"><td colspan="' + colCount + '" class="alert alert-danger">Sorry, no data :(</td></tr>');
                    displayPopupNotification("No Data Found Given Date Filter.", "info");
                }

                $('div').removeClass('.k-header k-grid-toolbar');
                UpdateReportUsingSetting("SalesAnalysis", "grid");
                // grid.dataSource.page(1);
            },
            columns: columns,

        });

    };

    function KendoGridRefresh(readUrl) {
        $('#grid').val('');
        $('#grid').html('');
        BindGrid(readUrl)
    }




    function Calculation(data) {
        columns = [];
        var finalData = [];
        var finalFinalData = [];
        columns.push({ field: "DURATION", title: " " });
        var getGroups = _.uniq(data, "ITEM_GROUP_NAME");
        $.each(getGroups, function (index, obj) {
            //first change field names
            //debugger
            var test = _.where(data, { ITEM_GROUP_NAME: obj.ITEM_GROUP_NAME });
            test.forEach(function (e) {
                e["QUANTITY_" + obj.ITEM_GROUP_NAME] = e.QUANTITY;
                e["AMOUNT_" + obj.ITEM_GROUP_NAME] = e.AMOUNT;
                e["DISCOUNT_" + obj.ITEM_GROUP_NAME] = e.DISCOUNT;
                e["REALIZATION_" + obj.ITEM_GROUP_NAME] = e.REALIZATION;
                delete e.QUANTITY;
                delete e.AMOUNT;
                delete e.DISCOUNT;
                delete e.REALIZATION;
            });
            //now push to columns
            columns.push({
                field: "ITEM_GROUP_NAME",
                title: obj.ITEM_GROUP_NAME,
                columns: [
            {
                field: "QUANTITY_" + obj.ITEM_GROUP_NAME,
                title: "Qty in Bag",
                format: "{0:n0}",
                attributes: {
                    style: "text-align: right;"
                },
                template: function (data) {
                    return data["QUANTITY_" + obj.ITEM_GROUP_NAME] == undefined ? 0 : (data["QUANTITY_" + obj.ITEM_GROUP_NAME]).toFixed(2);
                }
            },
            {
                field: "AMOUNT_" + obj.ITEM_GROUP_NAME,
                title: "Amount",
                format: "{0:n2}",
                attributes: {
                    style: "text-align: right;"
                },
                template: function (data) {
                    return data["AMOUNT_" + obj.ITEM_GROUP_NAME] == undefined ? "0.00" : (data["AMOUNT_" + obj.ITEM_GROUP_NAME]).toFixed(2);
                }
            },
            {
                field: "DISCOUNT_" + obj.ITEM_GROUP_NAME,
                title: "Discount",
                format: "{0:n2}",
                attributes: {
                    style: "text-align: right;"
                },
                template: function (data) {
                    return data["DISCOUNT_" + obj.ITEM_GROUP_NAME] == undefined ? "0.00" : (data["DISCOUNT_" + obj.ITEM_GROUP_NAME]).toFixed(2);
                }
            },
            {
                field: "REALIZATION_" + obj.ITEM_GROUP_NAME,
                title: "Realization",
                format: "{0:n2}",
                attributes: {
                    style: "text-align: right;"
                },
                template: function (data) {
                    return data["REALIZATION_" + obj.ITEM_GROUP_NAME] == undefined ? "0.00" : (data["REALIZATION_" + obj.ITEM_GROUP_NAME]).toFixed(2);
                }

            },
                ]
            });
        });
        columns.push({
            field: "TotalSales",
            title: "Total Sales",
            format: "{0:n2}",
            attributes: {
                style: "text-align: right;"
            },
        });


        var getDuration = _.uniq(data, "DURATION");
        $.each(getDuration, function (index, obj) {
            //debugger;
            var test = _.where(data, { DURATION: obj.DURATION });
            var newArr = [];
            test.forEach(function (e) {
                $.extend(newArr, e);
            });
            finalData.push(newArr);
        });

        //new implimentation
        var current_date = getNepaliDate();
        var date = current_date.split("-");
        var currentFiscalYear = (parseInt(date[0]) - 1).toString() + "/" + date[0].toString().substring(2, date[0].toString().length);
        var readUrl = window.location.protocol + "//" + window.location.host + "/api/Common/GetDateFilters?fiscalYear=" + currentFiscalYear;
        $.ajax({
            type: "GET",
            url: readUrl,
            async: false,
            success: function (dateData) {

                //only take required duration
                dateData = GetRequiredDuration(dateData);

                //var finalDataGroups = _.uniq(finalData, "ITEM_GROUP_NAME");
                //$.each(finalDataGroups, function (index, obj) {
                //    finalData = _.where(finalData, { ITEM_GROUP_NAME: obj.ITEM_GROUP_NAME });
                    //$.each(dateData, function (i) {
                    //    //var reqDuration = ["This Year", "This Month", "This Week", "First Quarter", "Second Quarter", "Today"];
                    //    // if (_.contains(requiredDuration, dateData[i].RangeName)){

                    //    var test = _.filter(finalData, function (d) {
                    //        return moment(d.SALES_DATE)._d >= moment(dateData[i].StartDate)._d && moment(d.SALES_DATE)._d <= moment(dateData[i].EndDate)._d;
                    //    });
                    //    debugger;
                    //    if (test.length > 0) {
                    //        test.forEach(function (e, v) {
                    //            if (v > 0) {

                    //                if (test[0]["AMOUNT_" + test[v].ITEM_GROUP_NAME] == undefined)
                    //                    test[0]["AMOUNT_" + test[v].ITEM_GROUP_NAME] = 0;
                    //                if (test[0]["DISCOUNT_" + test[v].ITEM_GROUP_NAME] == undefined)
                    //                    test[0]["DISCOUNT_" + test[v].ITEM_GROUP_NAME] = 0;
                    //                if (test[0]["QUANTITY_" + test[v].ITEM_GROUP_NAME] == undefined)
                    //                    test[0]["QUANTITY_" + test[v].ITEM_GROUP_NAME] = 0;
                    //                if (test[0]["REALIZATION_" + test[v].ITEM_GROUP_NAME] == undefined)
                    //                    test[0]["REALIZATION_" + test[v].ITEM_GROUP_NAME] = 0;

                    //                test[0].DURATION = dateData[i].RangeName;
                    //                test[0]["AMOUNT_" + test[v].ITEM_GROUP_NAME] += e["AMOUNT_" + test[v].ITEM_GROUP_NAME];
                    //                test[0]["DISCOUNT_" + test[v].ITEM_GROUP_NAME] += e["DISCOUNT_" + test[v].ITEM_GROUP_NAME];
                    //                test[0]["QUANTITY_" + test[v].ITEM_GROUP_NAME] += e["QUANTITY_" + test[v].ITEM_GROUP_NAME];
                    //                test[0]["REALIZATION_" + test[v].ITEM_GROUP_NAME] += e["REALIZATION_" + test[v].ITEM_GROUP_NAME];
                    //            }
                    //            else
                    //                test[0].DURATION = dateData[i].RangeName;
                    //        });
                    //        var amount = 0;
                    //        for (var key in test[0]) {
                    //            if (key.indexOf("AMOUNT") >= 0)
                    //                amount += test[0][key];
                    //        }
                    //        test[0]["TotalSales"] = amount;
                    //        finalFinalData.push($.extend([], test[0]));
                    //        //if (test.length != 1) {
                    //        //    finalData = $(finalData).not(test);
                    //        //    finalData.push(test[0]);
                    //        //}
                    //    }
                    //    else {

                    //        test.push({
                    //            DURATION: dateData[i].RangeName
                    //        });
                    //        test[0]["TotalSales"] = 0;
                    //        finalFinalData.push($.extend([], test[0]));

                    //    }
                    //    debugger;
                    //    finalFinalData;
                    //    // }
                    //});
                //});

                //var finalDataData = [];
                //var getFinalGroups = _.uniq(finalFinalData, "DURATION");
                //$.each(getFinalGroups, function (e, v) {
                //    $.each(finalFinalData, function (fe, fv) {
                //        if (v.DURATION == fv.DURATION) {
                //            finalDataData.push(fv);
                //            finalDataData.push(v);
                //        }
                //    });
                //});



                    var urltest = window.location.protocol + "//" + window.location.host + "/api/SalesSummaryReportApi/GetSalesAnalysis";
                    var param = { ReportFilter: JSON.stringify(ReportFilter.filterAdditionalData()) };
                    var dataList;
                    $.ajax({
                        type: "POST",
                        url: urltest,
                        async: false,
                        data: ReportFilter.filterAdditionalData(),
                        success: function (response) {
                            dataList = response;
                        },
                    });

                    var finalDataData = [];

                var finalDataGroups = _.uniq(dataList, "ITEM_GROUP_NAME");
                $.each(finalDataGroups, function (index, obj) {
                    obj.ITEM_GROUP_NAME;
                   var dataListArr = _.where(dataList, { ITEM_GROUP_NAME: obj.ITEM_GROUP_NAME });
                    $.each(dateData, function (i) {
                        var test = _.filter(dataListArr, function (d) {
                            return moment(d.SALES_DATE)._d >= moment(dateData[i].StartDate)._d && moment(d.SALES_DATE)._d <= moment(dateData[i].EndDate)._d;
                        });
                        if (test.length > 0) {
                            var amount = 0, discount = 0, quantity = 0, realization = 0;
                            test.forEach(function (e, v) {
                                    amount+= e["AMOUNT"];
                                    discount += e["DISCOUNT"];
                                    quantity += e["QUANTITY"];
                                    realization += e["REALIZATION"];
                            });
                            var obj = {
                                DURATION: dateData[i].RangeName,
                                ["AMOUNT_" + test[0].ITEM_GROUP_NAME]: amount,
                                ["DISCOUNT_" + test[0].ITEM_GROUP_NAME]: discount,
                                ["QUANTITY_" + test[0].ITEM_GROUP_NAME]: quantity,
                                ["REALIZATION_" + test[0].ITEM_GROUP_NAME]: realization,
                                ITEM_CODE: test[0].ITEM_CODE,
                                ITEM_GROUP_CODE: test[0].ITEM_GROUP_CODE,
                                ITEM_GROUP_NAME: test[0].ITEM_GROUP_NAME,
                                SALES_DATE: test[0].SALES_DATE
                            }
                            finalDataData.push($.extend([], obj));
                        }
                        else {
                            test.push({
                                DURATION: dateData[i].RangeName,
                            });
                            test[0]["TotalSales"] = 0;
                            finalDataData.push($.extend([], test[0]));
                        }
                   });
                });
                var ffd = [];

                var fdd = _.uniq(finalDataData, "DURATION");
                var findFinalData = function (item) {
                    if (finalDataData.length == 0)
                        return;
                    var objArr = {};
                    for (var i in finalDataData) {
                        if (finalDataData[i]['DURATION'] == item['DURATION']) {
                            var e = finalDataData[i];
                            if (e.ITEM_GROUP_NAME == undefined) {
                                objArr = e;
                                continue;
                            }
                            objArr["DURATION"] = e.DURATION;
                            objArr["ITEM_CODE"] = e.ITEM_CODE;
                            objArr["ITEM_GROUP_CODE"] = e.ITEM_GROUP_CODE;
                            objArr["ITEM_GROUP_NAME"] = e.ITEM_GROUP_NAME;
                            objArr["SALES_DATE"] = e.SALES_DATE;
                            objArr["AMOUNT_" + e.ITEM_GROUP_NAME] = e["AMOUNT_" + e.ITEM_GROUP_NAME];
                            objArr["DISCOUNT_" + e.ITEM_GROUP_NAME] = e["DISCOUNT_" + e.ITEM_GROUP_NAME];
                            objArr["QUANTITY_" + e.ITEM_GROUP_NAME] = e["QUANTITY_" + e.ITEM_GROUP_NAME];
                            objArr["REALIZATION_" + e.ITEM_GROUP_NAME] = e["REALIZATION_" + e.ITEM_GROUP_NAME];
                        }
                    }
                    return objArr;
                }
                for (var i in fdd) {
                    var found = findFinalData(fdd[i]);
                    var amount = 0;
                    if (found != null) {
                         for (var key in found) {
                            if (key.indexOf("AMOUNT") >= 0)
                               amount += found[key];
                        }
                       found["TotalSales"] = amount;
                       ffd.push(found);
                    }
                }
                finalFinalData = ffd;
            },
        });
        var ds = new kendo.data.DataSource({
            data: finalFinalData,
        });
        $("#grid").data("kendoGrid").setOptions({ columns: columns });
        $("#grid").data("kendoGrid").setDataSource(ds);
        $('#grid').data("kendoGrid").dataSource.page(1);
    }
    function GetRequiredDuration(data)
    {
        //debugger;
        var dur = [];
        //today
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "Today";
        })[0]);
        //This Week
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "This Week";
        })[0]);
        //MTD
        var temp = _.filter(data, function (x) {
            return x.RangeName == "This Month";
        })[0];
        temp.RangeName = "MTD";
        dur.push(temp);
        //First Quarter
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "First Quarter";
        })[0]);
        //Second Quarter
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "Second Quarter";
        })[0]);
        //Third Quarter
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "Third Quarter";
        })[0]);
        //Forth Quarter
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "Forth Quarter";
        })[0]);
        //Half Year
        var temp1 = $.extend(true,[],_.filter(data, function (x) {
            return x.RangeName == "First Quarter";
        }));
        temp1[0].RangeName = "Half Year"
        temp1[0].EndDate = _.filter(data, function (x) {
            return x.RangeName == "Second Quarter";
        })[0].EndDate;
        dur.push(temp1[0]);
        //This Year
        dur.push(_.filter(data, function (x) {
            return x.RangeName == "This Year";
        })[0]);


        return dur;
    }
</script>
