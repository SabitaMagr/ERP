DTModule.controller('customerSetupTreeCtrl', function ($scope, $rootScope, $http, $routeParams, $window, $filter) {
    //OPENING_DATE: $filter('date')(new Date, "dd-MMM-yyyy"),
    //    LAST_PAYMENT_DATE: $filter('date')(new Date, "dd-MMM-yyyy"),
    //        BG_EXPIRY_DATE: $filter('date')(new Date, "dd-MMM-yyyy"),

    $scope.name = 'World';
    $scope.name = 'World';
    $scope.keyCode = "";
    $scope.keyPressed = function (e) {
        $scope.keyCode = e.which;
    };

    $scope.treenodeselected = "N";
    $scope.immediateStopPropogation = "enableTab";
    $scope.saveupdatebtn = "Save";
    $scope.saveupdatecontinuebtn = "Save & Continue";
    $scope.saveAndContinue = false;
    $scope.customersArr = [];
    $scope.customersChildArr = [];
    $scope.groupchilddisabled = true;
    $scope.savegroup = false;
    $scope.editFlag = "N";
    $scope.treeSelectedCustomerCode = "";
    $scope.treeSelectedCustomerFlag = "";
    $scope.AfterSaveCustomerCode = "";
    $scope.panVatMaxLength = 9;
    debugger;



    $scope.newbuttondisabled = true;
    $scope.CHILD_UPDATE_CUSTOMER_CODE = "";
    var currencyUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllCurrency";

    $scope.currencyDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: currencyUrl,
            },

        }
    });
    $scope.currencyOptions = {
        dataSource: $scope.currencyDataSource,
        optionLabel: "--Select Currency--",
        dataTextField: "CURRENCY_CODE",
        dataValueField: "CURRENCY_CODE",

    }
    $scope.divisionList = [];
    $scope.ownerList = [];
    $scope.invoiceWiseList = [];
    $scope.otherTermsConditionsList = [];
    $scope.otherInfoList = [];
    $scope.alternativeLocationInfoList = [];
    $scope.budgetCenterList = [];
    $scope.sisterConcernsList = [];
    $scope.customerStockStatusList = [];
    $scope.divisionList.push({ DIVISION_CODE: '', CREDIT_LIMIT: '', BLOCK_FLAG: '', REMARKS: '' });//SA_CUSTOMER_DIVISION_CR_LIMIT
    $scope.ownerList.push({ OWNER_NAME: '', DESIGNATION: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', REMARKS: '', IMAGE_FILE_NAME: '', IMAGE_FILE_CITIZENSHIP: '', IMAGE_FILE_COMPANY_REG: '', IMAGE_FILE_COMPANY_PAN: '' });//SA_CUSTOMER_OWNER_INFO
    $scope.invoiceWiseList.push({ REFERENCE_NO: '', INVOICE_DATE: $filter('date')(new Date, "dd-MMM-yyyy"), DUE_DATE: '', TRANSACTION_TYPE: 'DR', BALANCE_AMOUNT: '', CURRENCY_CODE: 'NRS', EXCHANGE_RATE: '', DIVISION_CODE: '', ACCOUNT_CODE: '', PARTY_TYPE_CODE: '', EMPLOYEE_CODE: '', REMARKS: '' });//SA_CUSTOMER_OPENING_SETUP
    $scope.otherTermsConditionsList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_TERMS_CONDITIONS
    $scope.otherInfoList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_OTHER_INFO
    $scope.alternativeLocationInfoList.push({ LOCATION_CODE: '', LOCATION_EDESC: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', OFFICE_EDESC: '', REMARKS: '' });//SA_CUSTOMER_ALT_LOCATION_INFO
    $scope.budgetCenterList.push({ BUDGET_CODE: '', REMARKS: '' }); //SA_CUSTOMER_BUDGETCENTER_INFO
    $scope.sisterConcernsList.push({ SISTER_CONCERN_EDESC: '', SISTER_CONCERN_NDESC: '', REMARKS: '' });//SA_CUSTOMER_SISTER_CONCERN
    $scope.customerStockStatusList.push({ ITEM_CODE: '', STOCK_DATE: '', QUANTITY: '', REMARKS: '' });//SA_CUSTOMER_STOCK_INFO

    $scope.customersChildArr =
        {
            CHILD_AUTOGENERATED: "",
            CHILD_CUSTOMER_CODE: "",
            CHILD_CUSTOMER_EDESC: "",
            CHILD_CUSTOMER_ID: "",
            CHILD_CUSTOMER_NDESC: "",
            CHILD_GROUP_ID: "",
            PERMANENT_ADDRESS: "",
            TEMPORARY_ADDRESS: "",
            TELEPHONE: "",
            FAX: "",
            COUNTRY: "",
            ZONE: "",
            REGION: "",
            DISTRICT: "",
            CITY: "",
            TELEPHONE2: "",
            TELEPHONE3: "",
            PAN_VAT: "",
            EXCISE: "",
            EMAIL: "",
            PARTY_TYPE: "",
            ACCOUNTMAP: "",
            AGENTNAME: "",
            DEALINGPERSON: "",
            IS_CASH: "",
            IS_ACTIVE: true,
            CREDIT_LIMIT: 0,
            CREDIT_RATING: 0,
            CUSHION: 0,
            PRE_CREDIT_LIMIT: 0,
            DUE_BILL_COUNT: 0,
            CREDIT_EXCEED: '',
            INTEREST_RATE: 0,
            BANK_GUARANTEE: '',
            BALANCE: '',
            OPENING_DATE: '',
            LAST_PAYMENT_DATE: '',
            BG_EXPIRY_DATE: '',
            CUSTOMER_SPECIFIC_DISCOUNT: 0,
            CUSTOMER_DISCOUNT: 0,
            CUSTOMER_DAYS: 0,
            EXCLUSIVE: false,
            CREDIT_DAYS: '',
            CREDIT_ACTION: '',
            TERMS_CONDITIONS: '',
            APPROVED_FLAG: '',
            CASH_CUSTOMER_FLAG: '',
        }

    $scope.KYCForm =
        {
        BirthDate: "",
        BirthDate_bs:"",
            Gender: "",
            MaritalStatus: "",
            Religion: "",
            Bloadgroup: "",
            telephoneNo: "",
            MobileNo: "",
            Companyname: "",
            EmailOffice: "",
            Address: "",
            PermanentHouseNo: "",
            PWARDNO: "",
            PSTEETADDRESS: "",
            PZONE: "",
            PDIStrict: "",
            PVDCMunicipality: "",
            THouseNo: "",
            TWARDNO: "",
            TSTEETADDRESS: "",
            TZONE: "",
            TDIStrict: "",
            TVDCMunicipality: "",
            EmergencyName: "",
            Emergencyrelationship: "",
            Emergencyaddress: "",
            Emergencyphoneno: "",
            FamilyName: "",
            FamilyMotherName: "",
            FamilyspouseName: "",
            weddingDate: "",
            Childname: "",
            Organizationtype: "",
            organizationname: "",
            Position: "",
            FromDate: "",
            Todate: "",
            KYCCustomerName: "",
            CustomerId: "",
        }
    $scope.customersetup =
        {
            TRANSACTION_TYPE: "",
            PREFIX_TEXT: "",
            CUSTOMER_CODE: "",
            CUSTOMER_EDESC: "",
            CUSTOMER_NDESC: "",
            CUSTOMER_ACCOUNT: "",
            CUSTOMER_TYPE: "",
            MASTER_CUSTOMER_CODE: "",
            PRE_CUSTOMER_CODE: "",
            COMPANY_CODE: "",
            CREATED_BY: "",
            CREATED_DATE: "",
            DELETED_FLAG: "",
            SYN_ROWID: "",
            CUSTOMER_PREFIX: "",
            CUSTOMER_STARTID: "",
            REMARKS: "",
            CHILD_CREDIT_RATING: "",
            CHILD_CREDIT_LIMIT: "",
            CHILD_CUSHION: "",
            CHILD_PRE_CREDIT_LIMIT: "",
            CHILD_DUE_BILL_COUNT: "",
            CHILD_CREDIT_EXCEED: "",
            CHILD_INTEREST_RATE: "",
            CHILD_BANK_GUARANTEE: "",
            CHILD_OPENING_DATE: $filter('date')(new Date, "MM/dd/yyyy"),
            PARENT_CUSTOMER_CODE: '',
        }
    $scope.ownercount = '';
    $scope.clearCustomersChildArr = function () {

        $scope.customersChildArr.CHILD_CUSTOMER_EDESC = "";
        $scope.customersChildArr.CHILD_CUSTOMER_ID = "";
        $scope.customersChildArr.CHILD_CUSTOMER_NDESC = "";
        $scope.customersChildArr.CHILD_GROUP_ID = "";
        $scope.customersChildArr.PERMANENT_ADDRESS = "";
        $scope.customersChildArr.TEMPORARY_ADDRESS = "";
        $scope.customersChildArr.TELEPHONE = "";
        $scope.customersChildArr.FAX = "";
        $scope.customersChildArr.COUNTRY = "";
        $scope.customersChildArr.ZONE = "";
        $scope.customersChildArr.REGION = "";
        $scope.customersChildArr.DISTRICT = "";
        $scope.customersChildArr.CITY = "";
        $scope.customersChildArr.PRICE_LIST_ID = "";
        $scope.customersChildArr.TELEPHONE2 = "";
        $scope.customersChildArr.TELEPHONE3 = "";
        $scope.customersChildArr.PAN_VAT = "";
        $scope.customersChildArr.EXCISE = "";
        $scope.customersChildArr.EMAIL = "";
        $scope.customersChildArr.PARTY_TYPE = "";
        $scope.customersChildArr.ACCOUNTMAP = "";
        $scope.customersChildArr.AGENTNAME = "";
        $scope.customersChildArr.DEALINGPERSON = "";
        $scope.customersChildArr.IS_CASH = "";
        $scope.customersChildArr.IS_ACTIVE = true;
        $scope.customersChildArr.CREDIT_LIMIT = 0;
        $scope.customersChildArr.CREDIT_RATING = 0;
        $scope.customersChildArr.CUSHION = 0;
        $scope.customersChildArr.PRE_CREDIT_LIMIT = 0;
        $scope.customersChildArr.DUE_BILL_COUNT = 0;
        $scope.customersChildArr.CREDIT_EXCEED = '';
        $scope.customersChildArr.INTEREST_RATE = 0;
        $scope.customersChildArr.BANK_GUARANTEE = '';
        $scope.customersChildArr.BALANCE = '';
        $scope.customersChildArr.OPENING_DATE = '';
        $scope.customersChildArr.LAST_PAYMENT_DATE = '';
        $scope.customersChildArr.BG_EXPIRY_DATE = '';
        $scope.customersChildArr.CUSTOMER_SPECIFIC_DISCOUNT = 0;
        $scope.customersChildArr.CUSTOMER_DISCOUNT = 0;
        $scope.customersChildArr.CUSTOMER_DAYS = 0;
        $scope.customersChildArr.EXCLUSIVE = false;
        $scope.customersChildArr.CREDIT_DAYS = '';
        $scope.customersChildArr.CREDIT_ACTION = '';
        $scope.customersChildArr.TERMS_CONDITIONS = '';
       // $scope.customersChildArr.CASH_CUSTOMER_FLAG = ""
    }





    $scope.clearAllDynamicTables = function () {
        $scope.divisionList = [];
        $scope.ownerList = [];
        $scope.invoiceWiseList = [];
        $scope.otherTermsConditionsList = [];
        $scope.otherInfoList = [];
        $scope.alternativeLocationInfoList = [];
        $scope.budgetCenterList = [];
        $scope.sisterConcernsList = [];
        $scope.customerStockStatusList = [];
        $scope.divisionList.push({ DIVISION_CODE: '', CREDIT_LIMIT: '', BLOCK_FLAG: '', REMARKS: '' });//SA_CUSTOMER_DIVISION_CR_LIMIT
        $scope.ownerList.push({ OWNER_NAME: '', DESIGNATION: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', REMARKS: '', IMAGE_FILE_NAME: '', IMAGE_FILE_CITIZENSHIP: '', IMAGE_FILE_COMPANY_REG: '', IMAGE_FILE_COMPANY_PAN: '' });//SA_CUSTOMER_OWNER_INFO
        $scope.invoiceWiseList.push({ REFERENCE_NO: '', INVOICE_DATE: $filter('date')(new Date, "dd-MMM-yyyy"), DUE_DATE: '', TRANSACTION_TYPE: 'DR', BALANCE_AMOUNT: '', CURRENCY_CODE: 'NRS', EXCHANGE_RATE: '', DIVISION_CODE: '', ACCOUNT_CODE: '', PARTY_TYPE_CODE: '', EMPLOYEE_CODE: '', REMARKS: '' });//SA_CUSTOMER_OPENING_SETUP
        $scope.otherTermsConditionsList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_TERMS_CONDITIONS
        $scope.otherInfoList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_OTHER_INFO
        $scope.alternativeLocationInfoList.push({ LOCATION_CODE: '', LOCATION_EDESC: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', OFFICE_EDESC: '', REMARKS: '' });//SA_CUSTOMER_ALT_LOCATION_INFO
        $scope.budgetCenterList.push({ BUDGET_CODE: '', REMARKS: '' }); //SA_CUSTOMER_BUDGETCENTER_INFO
        $scope.sisterConcernsList.push({ SISTER_CONCERN_EDESC: '', SISTER_CONCERN_NDESC: '', REMARKS: '' });//SA_CUSTOMER_SISTER_CONCERN
        $scope.customerStockStatusList.push({ ITEM_CODE: '', STOCK_DATE: '', QUANTITY: '', REMARKS: '' });//SA_CUSTOMER_STOCK_INFO
    }

    $scope.customersArr = $scope.customersetup;
    $scope.masterAccCodeDataSource = [
        { text: "/Root", value: "" }
    ];

    var accountCodeUrl = window.location.protocol + "//" + window.location.host + "/api/TemplateApi/getAllAccountCodeWithChild";
    $scope.accountGroupDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: accountCodeUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.accountGroupOptions = {
        dataSource: $scope.accountGroupDataSource,
        optionLabel: "--Select Account--",
        filter: "contains",
        dataTextField: "ACC_EDESC",
        dataValueField: "ACC_CODE",

    }

    var accountComboCodeUrl = window.location.protocol + "//" + window.location.host + "/api/TemplateApi/getAllAccountComboCodeWithChild";
    $scope.accountComboGroupDataSource = new kendo.data.DataSource({
        type: "json",
        serverFiltering: true,
        transport: {
            read: {
                url: accountComboCodeUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });

    //commented by aakash : getAllComboDivisions are not present in SetupAPI
    //var combodivisionUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllComboDivisions";
    //$scope.divisionComboDataSource = new kendo.data.DataSource({
    //    serverFiltering: true,
    //    transport: {
    //        read: {
    //            url: combodivisionUrl,
    //        },
    //        parameterMap: function (data, action) {
    //            var newParams;
    //            if (data.filter != undefined) {
    //                if (data.filter.filters[0] != undefined) {
    //                    newParams = {
    //                        filter: data.filter.filters[0].value
    //                    };
    //                    return newParams;
    //                }
    //                else {
    //                    newParams = {
    //                        filter: ""
    //                    };
    //                    return newParams;
    //                }
    //            }
    //            else {
    //                newParams = {
    //                    filter: ""
    //                };
    //                return newParams;
    //            }
    //        }
    //    }
    //});

    var employeeComboUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllComboEmployees";
    $scope.employeeComboGroupDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: employeeComboUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });

    var dealerComboUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllComboDealers";
    $scope.dealerComboGroupDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: dealerComboUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });

    var countryUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllCountry";
    $scope.countryDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: countryUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.countryOptions = {
        dataSource: $scope.countryDataSource,
        filter: "contains",
        optionLabel: "--Select Country--",
        dataTextField: "COUNTRY_EDESC",
        dataValueField: "COUNTRY_CODE",
    }


    var budgetCenterUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllBudgetCenter";
    $scope.budgetCenterDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: budgetCenterUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });

    var customerStockUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllItemsForCustomerStock";
    $scope.customerStockDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: customerStockUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });

    var locationUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllLocation";
    $scope.locationComboDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: locationUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });


    var zoneUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllZones";
    $scope.zoneDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: zoneUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.zoneOptions = {
        dataSource: $scope.zoneDataSource,
        filter: "contains",
        optionLabel: "--Select Zone--",
        dataTextField: "ZONE_EDESC",
        dataValueField: "ZONE_CODE",
    }

    var regionUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllRegions";
    $scope.regionDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: regionUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.regionOptions = {
        dataSource: $scope.regionDataSource,
        filter: "contains",
        optionLabel: "--Select Region--",
        dataTextField: "REGION_EDESC",
        dataValueField: "REGION_CODE",

    }


    var districtUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllDistricts";
    $scope.districtDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: districtUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.districtOptions = {
        dataSource: $scope.districtDataSource,
        filter: "contains",
        optionLabel: "--Select District--",
        dataTextField: "DISTRICT_EDESC",
        dataValueField: "DISTRICT_CODE",
    }


    var cityUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllCities";
    $scope.cityDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: cityUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.cityOptions = {
        dataSource: $scope.cityDataSource,
        filter: "contains",
        optionLabel: "--Select City--",
        dataTextField: "CITY_EDESC",
        dataValueField: "CITY_CODE",
    }


    var partyTypeUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllPartyTypes";
    $scope.partyTypeDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: partyTypeUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
   $scope.partyTypeOptions = {
        dataSource: $scope.partyTypeDataSource,
        filter: "contains",
       optionLabel: "--Select Party Type--",
       dataTextField: "PARTY_TYPE_EDESC",
       dataValueField: "PARTY_TYPE_CODE",

    }

    $scope.onChangePartyType = function (e) {
        debugger;
        $scope.customersChildArr.ACCOUNTMAP = e.sender.dataItem().ACC_CODE;
      
        var tree = $("#childAccountMap").data("kendoDropDownList");
        tree.value(e.sender.dataItem().ACC_CODE);
    }

    var AgentUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllAgents";
    $scope.AgentDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: AgentUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.agentOptions = {
        dataSource: $scope.AgentDataSource,
        filter: "contains",
        optionLabel: "--Select Agent--",
        dataTextField: "AGENT_EDESC",
        dataValueField: "AGENT_CODE",

    }



    var branchUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllBranchs";
    $scope.branchDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: branchUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.branchOptions = {
        dataSource: $scope.branchDataSource,
        filter: "contains",
        optionLabel: "--Select Branch--",
        dataTextField: "BRANCH_EDESC",
        dataValueField: "BRANCH_CODE",

    }

    //pricelist dropdown

    var priceUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllPricelist";
    $scope.pricelistDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: priceUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.pricelistOptions = {
        dataSource: $scope.pricelistDataSource,
        filter: "contains",
        optionLabel: "--Select PriceList--",
        dataTextField: "PRICE_LIST_NAME",
        dataValueField: "MASTER_ID",

    }


    //var accMapUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllAccountMaps";
    var accMapUrl = window.location.protocol + "//" + window.location.host + "/api/TemplateApi/GetAllAccountCodesupp";
    $scope.accMapDataSource = new kendo.data.DataSource({
        serverFiltering: true,
        transport: {
            read: {
                url: accMapUrl,
            },
            parameterMap: function (data, action) {
                var newParams;
                if (data.filter != undefined) {
                    if (data.filter.filters[0] != undefined) {
                        newParams = {
                            filter: data.filter.filters[0].value
                        };
                        return newParams;
                    }
                    else {
                        newParams = {
                            filter: ""
                        };
                        return newParams;
                    }
                }
                else {
                    newParams = {
                        filter: ""
                    };
                    return newParams;
                }
            }
        }
    });
    $scope.accMapOptions = {
        dataSource: $scope.accMapDataSource,
        filter: "contains",
        optionLabel: "--Select Account--",
        dataTextField: "ACC_EDESC",
        dataValueField: "ACC_CODE",

    }

    //Commented by aakash : getAllDivision Method is not present on SetupAPI
    //var divisionUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/getAllDivisions";
    //$scope.divisionDataSource = new kendo.data.DataSource({
    //    serverFiltering: true,
    //    transport: {
    //        read: {
    //            url: divisionUrl,
    //        },
    //        parameterMap: function (data, action) {
    //            var newParams;
    //            if (data.filter != undefined) {
    //                if (data.filter.filters[0] != undefined) {
    //                    newParams = {
    //                        filter: data.filter.filters[0].value
    //                    };
    //                    return newParams;
    //                }
    //                else {
    //                    newParams = {
    //                        filter: ""
    //                    };
    //                    return newParams;
    //                }
    //            }
    //            else {
    //                newParams = {
    //                    filter: ""
    //                };
    //                return newParams;
    //            }
    //        }
    //    }
    //});
    //$scope.divisionOptions = {
    //    dataSource: $scope.divisionDataSource,
    //    filter: "contains",
    //    dataTextField: "DIVISION_EDESC",
    //    dataValueField: "DIVISION_CODE",

    //}

    $scope.customertypeDataSource = [
        { text: "Dealer", value: "D" },
        { text: "Sales Depo", value: "S" },
        { text: "Customer", value: "C" },

    ];
    $scope.customerTypeOptions = {
        dataSource: $scope.customertypeDataSource,
        optionLabel: "--Select Type--",
        dataTextField: "text",
        dataValueField: "value",
    };

    $scope.creditActionDataSource = [
        { text: "Alert", value: "A" },
        { text: "Warning", value: "W" },
        { text: "Stop", value: "S" },

    ];
    $scope.creditActionOptions = {
        dataSource: $scope.creditActionDataSource,
        optionLabel: "--Select Credit Action--",
        dataTextField: "text",
        dataValueField: "value",
    };

    $scope.transactionTypeDataSource = [
        { text: "DR", value: "DR" },
        { text: "CR", value: "CR" },
    ];
    $scope.transactionTypeOptions = {
        dataSource: $scope.transactionTypeDataSource,
        dataTextField: "text",
        dataValueField: "value",
    };

    var customerDropDownForGroupPopupUrl = window.location.protocol + "//" + window.location.host + "/api/TemplateApi/customerDropDownForGroupPopup";
    $scope.customerGroupDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: customerDropDownForGroupPopupUrl,
            }
        }
    });
    $scope.customerGroupOptions = {
        dataSource: $scope.customerGroupDataSource,
        optionLabel: "<PRIMARY>",
        dataTextField: "CUSTOMER_EDESC",
        dataValueField: "CUSTOMER_CODE",
        change: function (e) {

        },
        dataBound: function () {

        },
        select: function (e) {
            $rootScope.quickmastercustomercode = e.dataItem.MASTER_CUSTOMER_CODE;

        },

    };



    $scope.monthSelectorOptions = {
        open: function () {
            var calendar = this.dateView.calendar;

            calendar.wrapper.width(this.wrapper.width() + 100);
        },
        change: function () {
            debugger;
            var id = this.element.attr('id');
            $scope.ConvertEngToNepang(kendo.toString(this.value(), 'yyyy-MM-dd'), id)
        },
        format: "dd-MMM-yyyy",

        // specifies that DateInput is used for masking the input element
        dateInput: true
    };
    $scope.monthSelectorOptionsbirth = {
        open: function () {
            var calendar = this.dateView.calendar;

            calendar.wrapper.width(this.wrapper.width() + 100);
        },
        change: function () {
            debugger;
            var id = this.element.attr('id');
            $scope.ConvertEngToNepangbirth(kendo.toString(this.value(), 'yyyy-MM-dd'), id)
        },
        format: "dd-MMM-yyyy",

        // specifies that DateInput is used for masking the input element
        dateInput: true
    };
    $scope.ConvertEngToNepang = function (data, id) {
        debugger;
        var lastChar = id[id.length - 1];
        var ids = "#nepaliDate" + lastChar + "";
        $(ids).val(AD2BS(data));
    };
    $scope.ConvertEngToNepangbirth = function (data, id) {
        debugger;
        var lastChar = id[id.length - 1];
        var ids = "#nepaliDate" + lastChar + "";
        $('#nepaliDateBirthdate').val(AD2BS(data));
    };
    $scope.ConvertNepToEng = function ($event) {
        debugger;
        //$event.stopPropagation();
        console.log($(this));
        var date = BS2AD($("#nepaliDateBirthdate").val());
        $("#englishdatedocument5").val($filter('date')(date, "dd-MMM-yyyy"));
        $('#nepaliDateBirthdate').trigger('change');


        // var date1 = moment(maturityDate).format("DD-MM-YYYY")


    };
    var getCustomerCodeByUrl = window.location.protocol + "//" + window.location.host + "/api/TemplateApi/GetCustomers";
    $scope.customertreeData = new kendo.data.HierarchicalDataSource({

        transport: {
            read: {
                url: getCustomerCodeByUrl,
                type: 'GET',
                data: function (data, evt) {
                }
            },

        },
        schema: {
            parse: function (data) {
                return data;
            },
            model: {
                id: "masterCustomerCode",
                parentId: "preCustomerCode",
                children: "Items",
                fields: {
                    CUSTOMER_CODE: { field: "CUSTOMER_CODE", type: "string" },
                    CUSTOMER_EDESC: { field: "CUSTOMER_EDESC", type: "string" },
                    parentId: { field: "preCustomerCode", type: "string", defaultValue: "00" },
                }
            }
        }
    });

    //Grid Binding main Part

    $scope.customeronDataBound = function () {
        //   $('#customertree').data("kendoTreeView").expand('.k-item');
    }

    //treeview on select
    $scope.customerOptions = {
        loadOnDemand: false,
        select: function (e) {
            debugger;
            var currentItem = e.sender.dataItem(e.node);
            $scope.treenodeselected = "Y";
            $('#accountGrid').removeClass("show-displaygrid");
            $("#accountGrid").html("");
            $($(this._current).parents('ul')[$(this._current).parents('ul').length - 1]).find('span').removeClass('hasTreeCustomMenu');
            $(this._current.context).find('span').addClass('hasTreeCustomMenu');
            $scope.customersetup.CUSTOMER_CODE = currentItem.customerId;
            $scope.customersetup.CUSTOMER_EDESC = currentItem.customerName;
            $scope.customersetup.MASTER_CUSTOMER_CODE = currentItem.masterCustomerCode;
            $scope.customersetup.PRE_CUSTOMER_CODE = currentItem.preCustomerCode;
            $scope.customersetup.GROUP_SKU_FLAG = currentItem.groupSkuFlag;
            $scope.customersetup.CUSTOMER_ACCOUNT = currentItem.ACC_CODE;
            $scope.customersetup.CUSTOMER_TYPE = currentItem.CUSTOMER_FLAG;
            $scope.customersetup.CUSTOMER_NDESC = currentItem.CUSTOMER_NDESC;
            $scope.customersetup.CUSTOMER_PREFIX = currentItem.CUSTOMER_PREFIX;
            $scope.customersetup.CUSTOMER_STARTID = currentItem.CUSTOMER_STARTID;
            $scope.customersetup.REMARKS = currentItem.REMARKS;
            $scope.customersetup.PARENT_CUSTOMER_CODE = currentItem.PARENT_CUSTOMER_CODE;
            $scope.newbuttondisabled = false;
            $scope.treeSelectedCustomerCode = currentItem.customerId;
            //$scope.movescrollbar();

        },

    };

    $scope.movescrollbar = function () {

        var element = $(".k-in");
        for (var i = 0; i < element.length; i++) {
            var selectnode = $(element[i]).hasClass("k-state-focused");
            if (selectnode) {
                $("#customertree").animate({
                    scrollTop: (parseInt(i * 12))
                });
                break;
            }
        }
    }
    $scope.onContextSelect = function (event) {

        if ($scope.customersetup.CUSTOMER_CODE == "")
            return displayPopupNotification("Select account.", "error");;
        $scope.saveupdatebtn = "Save";
        if (event.item.innerText.trim() == "Delete") {

            bootbox.confirm({
                title: "Delete",
                message: "Are you sure?",
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success',
                        label: '<i class="fa fa-check"></i> Yes',
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger',
                        label: '<i class="fa fa-times"></i> No',
                    }
                },
                callback: function (result) {

                    if (result == true) {

                        var delUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/DeleteCustomerTreeByCustomerCode?customerCode=" + $scope.customersetup.CUSTOMER_CODE;
                        $http({
                            method: 'POST',
                            url: delUrl
                        }).then(function successCallback(response) {

                            if (response.data.MESSAGE == "DELETED") {
                                var tree = $("#customertree").data("kendoTreeView");
                                tree.dataSource.read();
                                $scope.treenodeselected = "N";
                                displayPopupNotification("Data succesfully deleted ", "success");
                            }
                            if (response.data.MESSAGE == "HAS_CHILD") {
                                displayPopupNotification("Please delete child first", "warning");
                            }
                        }, function errorCallback(response) {
                            displayPopupNotification(response.data.STATUS_CODE, "error");
                            // called asynchronously if an error occurs
                            // or server returns response with an error status.
                        });

                    }

                    else {
                        bootbox.hideAll();
                        //displayPopupNotification(response.data.message, "error");
                    }
                }
            });
        }
        else if (event.item.innerText.trim() == "Update") {
            debugger;
            $scope.customersArr.CUSTOMER_CODE = $scope.treeSelectedCustomerCode;
            $scope.saveupdatebtn = "Update";
            if ($scope.customersetup.PARENT_CUSTOMER_CODE == null || $scope.customersetup.PARENT_CUSTOMER_CODE == undefined) {
                var popUpDropdown = $("#mastercustomercode").data("kendoDropDownList");
                popUpDropdown.value('');
            }
            else {
                var popUpDropdown = $("#mastercustomercode").data("kendoDropDownList");
                popUpDropdown.value($scope.customersetup.PARENT_CUSTOMER_CODE);
            }


            $scope.customersArr.CUSTOMER_TYPE = $scope.customersetup.CUSTOMER_TYPE;
            $scope.customersArr.CUSTOMER_EDESC = $scope.customersetup.CUSTOMER_EDESC;
            $scope.customersArr.CUSTOMER_ACCOUNT = $scope.customersetup.CUSTOMER_ACCOUNT;
            $scope.customersArr.CUSTOMER_CODE = $scope.treeSelectedCustomerCode;
            $scope.customersArr.MASTER_CUSTOMER_CODE = $scope.customersetup.MASTER_CUSTOMER_CODE;
            $scope.customersArr.CUSTOMER_NDESC = $scope.customersetup.CUSTOMER_NDESC;
            $scope.customersArr.CUSTOMER_PREFIX = $scope.customersetup.CUSTOMER_PREFIX;
            $scope.customersArr.CUSTOMER_STARTID = $scope.customersetup.CUSTOMER_STARTID;
            $scope.customersArr.REMARKS = $scope.customersetup.REMARKS;
            $scope.customersArr["PRE_CUSTOMER_CODE"] = $scope.customersetup.PRE_CUSTOMER_CODE;
            $("#groupCustomerModal").modal();
        }
        else if (event.item.innerText.trim() == "Add") {

            $scope.savegroup = true;
            $scope.customersArr = [];
            var popUpDropdown = $("#mastercustomercode").data("kendoDropDownList");
            popUpDropdown.value($scope.treeSelectedCustomerCode);



            $scope.customersArr.CUSTOMER_CODE = $scope.treeSelectedCustomerCode;
            $scope.customersArr.MASTER_CUSTOMER_CODE = $scope.customersetup.MASTER_CUSTOMER_CODE;

            $scope.customersArr["PRE_CUSTOMER_CODE"] = $scope.customersetup.PRE_CUSTOMER_CODE;
            $("#groupCustomerModal").modal();

        }
    }
    $scope.saveNewCustomer = function (isValid) {
        debugger;
        if (!isValid) {
            displayPopupNotification("Input fields are not valid. Please review and try again", "warning");
            return;
        }
        if ($scope.saveupdatebtn == "Save") {

            var createUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/createNewCustomerGroup";
            var model = {
                CUSTOMER_CODE: $scope.customersArr.CUSTOMER_CODE,
                CUSTOMER_EDESC: $scope.customersArr.CUSTOMER_EDESC,
                CUSTOMER_NDESC: $scope.customersArr.CUSTOMER_NDESC,
                MASTER_CUSTOMER_CODE: $scope.customersArr.MASTER_CUSTOMER_CODE,
                PRE_CUSTOMER_CODE: $scope.customersArr.PRE_CUSTOMER_CODE,
                CUSTOMER_ACCOUNT: $scope.customersArr.CUSTOMER_ACCOUNT,
                CUSTOMER_TYPE: $scope.customersArr.CUSTOMER_TYPE,
                CUSTOMER_PREFIX: $scope.customersArr.CUSTOMER_PREFIX,
                CUSTOMER_STARTID: $scope.customersArr.CUSTOMER_STARTID,
                REMARKS: $scope.customersArr.REMARKS,
                GROUP_SKU_FLAG: "G"
            }
            $http({
                method: 'POST',
                url: createUrl,
                data: model
            }).then(function successCallback(response) {

                if (response.data.MESSAGE == "INSERTED") {

                    $scope.customersArr = [];
                    var tree = $("#customertree").data("kendoTreeView");
                    tree.dataSource.read();
                    var dropdown = $("#mastercustomercode").data("kendoDropDownList");
                    dropdown.dataSource.read();
                    if ($scope.savegroup == false)
                    { $("#groupCustomerModal").modal("toggle"); }
                    else
                    { $("#groupCustomerModal").modal("toggle"); }
                    $scope.treenodeselected = "N";
                    displayPopupNotification("Data succesfully saved ", "success");
                }
                else {
                    displayPopupNotification("Something went wrong.Please try again later.", "error");
                }
                // this callback will be called asynchronously
                // when the response is available
            }, function errorCallback(response) {
                displayPopupNotification("Something went wrong.Please try again later.", "error");
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });
        }
        else {
            var updateUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/updateCustomerByCustomerCode";
            var model = {
                CUSTOMER_CODE: $scope.customersArr.CUSTOMER_CODE,
                CUSTOMER_EDESC: $scope.customersArr.CUSTOMER_EDESC,
                CUSTOMER_NDESC: $scope.customersArr.CUSTOMER_NDESC,
                MASTER_CUSTOMER_CODE: $scope.customersArr.MASTER_CUSTOMER_CODE,
                PRE_CUSTOMER_CODE: $scope.customersArr.PRE_CUSTOMER_CODE,
                CUSTOMER_ACCOUNT: $scope.customersArr.CUSTOMER_ACCOUNT,
                CUSTOMER_TYPE: $scope.customersArr.CUSTOMER_TYPE,
                CUSTOMER_PREFIX: $scope.customersArr.CUSTOMER_PREFIX,
                CUSTOMER_STARTID: $scope.customersArr.CUSTOMER_STARTID,
                REMARKS: $scope.customersArr.REMARKS,
                GROUP_SKU_FLAG: "G"
            }
            $scope.saveupdatebtn = "Update";
            $http({
                method: 'POST',
                url: updateUrl,
                data: model
            }).then(function successCallback(response) {


                if (response.data.MESSAGE == "UPDATED") {

                    $scope.customersArr = [];
                    var tree = $("#customertree").data("kendoTreeView");
                    tree.dataSource.read();
                    var dropdown = $("#mastercustomercode").data("kendoDropDownList");
                    dropdown.dataSource.read();
                    if ($scope.savegroup == false)
                    { $("#groupCustomerModal").modal("toggle"); }
                    else
                    { $("#groupCustomerModal").modal("toggle"); }
                    $scope.treenodeselected = "N";
                    displayPopupNotification("Data succesfully updated ", "success");
                }
                if (response.data.MESSAGE == "ERROR") {

                    displayPopupNotification("Something went wrong.Please try again later.", "error");
                }
                // this callback will be called asynchronously
                // when the response is available
            }, function errorCallback(response) {


                displayPopupNotification("Something went wrong.Please try again later.", "error");
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });
        }
    }

    $scope.saveKycForm = function (isValid) {
        debugger;
        if (!isValid) {
            displayPopupNotification("Input fields are not valid. Please review and try again", "warning");
            return;
        }
        if ($scope.saveupdatebtn == "Save" || $scope.saveupdatebtn=="Update") {

            var createUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/createKYCForm";
            var model = {
                //BirthDate: $scope.KYCForm.BirthDate,
                //BirthDate_bs: $scope.KYCForm.BirthDate_bs,
                BirthDate: $("#BirthDate").val(),
                BirthDate_bs: $("#nepaliDateBirthdate").val(),
                Gender: $scope.KYCForm.Gender,
                MaritalStatus: $scope.KYCForm.MaritalStatus,
                Religion: $scope.KYCForm.Religion,
                Bloadgroup: $scope.KYCForm.Bloadgroup,
                telephoneNo: $scope.KYCForm.telephoneNo,
                MobileNo: $scope.KYCForm.MobileNo,
                Companyname: $scope.KYCForm.Companyname,
                EmailOffice: $scope.KYCForm.EmailOffice,
                Address: $scope.KYCForm.Address,
                PermanentHouseNo: $scope.KYCForm.PermanentHouseNo,
                PWARDNO: $scope.KYCForm.PWARDNO,
                PSTEETADDRESS: $scope.KYCForm.PSTEETADDRESS,
                PZONE: $scope.KYCForm.PZONE,
                PDIStrict: $scope.KYCForm.PDIStrict,
                PVDCMunicipality: $scope.KYCForm.PVDCMunicipality,
                THouseNo: $scope.KYCForm.THouseNo,
                TWARDNO: $scope.KYCForm.TWARDNO,
                TSTEETADDRESS: $scope.KYCForm.TSTEETADDRESS,
                TZONE: $scope.KYCForm.TZONE,
                TDIStrict: $scope.KYCForm.TDIStrict,
                TVDCMunicipality: $scope.KYCForm.TVDCMunicipality,
                EmergencyName: $scope.KYCForm.EmergencyName,
                Emergencyrelationship: $scope.KYCForm.Emergencyrelationship,
                Emergencyaddress: $scope.KYCForm.Emergencyaddress,
                Emergencyphoneno: $scope.KYCForm.Emergencyphoneno,
                FamilyName: $scope.KYCForm.FamilyName,
                FamilyMotherName: $scope.KYCForm.FamilyMotherName,
                FamilyspouseName: $scope.KYCForm.FamilyspouseName,
                weddingDate: $scope.KYCForm.weddingDate,
                Childname: $scope.KYCForm.Childname,
                Organizationtype: $scope.KYCForm.Organizationtype,
                organizationname: $scope.KYCForm.organizationname,
                Position: $scope.KYCForm.Position,
                FromDate: $scope.KYCForm.FromDate,
                FromDate: $scope.KYCForm.FromDate,
                Todate: "",
                KYCCustomerName: $scope.KYCForm.KYCCustomerName,
                CustomerId: $scope.KYCForm.CustomerId,
            }
            $http({
                method: 'POST',
                url: createUrl,
                data: model
            }).then(function successCallback(response) {

                if (response.data.MESSAGE == "INSERTED") {

                   
                    displayPopupNotification("Data succesfully saved ", "success");
                }
                else {
                    displayPopupNotification("Something went wrong.Please try again later.", "error");
                }
                if ($scope.saveupdatebtn == "Save") {
                    $scope.saveupdatebtn = "Update"
                }
                else {
                    $scope.saveupdatebtn = "Save"
                }
                $("#KYCFORM").modal("toggle");

                // this callback will be called asynchronously
                // when the response is available
            }, function errorCallback(response) {
                    $("#KYCFORM").modal("toggle");
                displayPopupNotification("Something went wrong.Please try again later.", "error");
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });
        }

    }


    var reinitialize = function () {
        $scope.customersChildArr.IS_ACTIVE = "";
        $scope.CHILD_UPDATE_CUSTOMER_CODE = "";
        $scope.customersChildArr.EXCLUSIVE = false;
        //var tree = $("#customertree").data("kendoTreeView");
        //tree.dataSource.read();
        //var dropdown = $("#mastercustomercode").data("kendoDropDownList");
        //dropdown.dataSource.read();
        var grid = $("#kGrid").data("kendoGrid");
        grid.dataSource.read();
        $scope.immediateStopPropogation = "enableTab";
        $scope.divisionList.push({ DIVISION_CODE: '', CREDIT_LIMIT: '', BLOCK_FLAG: '', REMARKS: '' });
        $scope.ownerList.push({ OWNER_NAME: '', DESIGNATION: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', REMARKS: '', IMAGE_FILE_NAME: '', IMAGE_FILE_CITIZENSHIP: '', IMAGE_FILE_COMPANY_REG: '', IMAGE_FILE_COMPANY_PAN: '' });
        $scope.invoiceWiseList.push({ REFERENCE_NO: '', INVOICE_DATE: $filter('date')(new Date, "dd-MMM-yyyy"), DUE_DATE: '', TRANSACTION_TYPE: 'DR', BALANCE_AMOUNT: '', CURRENCY_CODE: 'NRS', EXCHANGE_RATE: '', DIVISION_CODE: '', ACCOUNT_CODE: '', PARTY_TYPE_CODE: '', EMPLOYEE_CODE: '', REMARKS: '' });
        $scope.otherTermsConditionsList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_TERMS_CONDITIONS
        $scope.otherInfoList.push({ FIELD_NAME: '', FIELD_VALUE: '', REMARKS: '' });//SA_CUSTOMER_OTHER_INFO
        $scope.alternativeLocationInfoList.push({ LOCATION_CODE: '', LOCATION_EDESC: '', CONTACT_PERSON: '', ADDRESS: '', TEL_MOBILE_NO: '', FAX_NO: '', EMAIL: '', OFFICE_EDESC: '', REMARKS: '' });//SA_CUSTOMER_ALT_LOCATION_INFO
        $scope.budgetCenterList.push({ BUDGET_CODE: '', REMARKS: '' }); //SA_CUSTOMER_BUDGETCENTER_INFO
        $scope.sisterConcernsList.push({ SISTER_CONCERN_EDESC: '', SISTER_CONCERN_NDESC: '', REMARKS: '' });//SA_CUSTOMER_SISTER_CONCERN
        $scope.customerStockStatusList.push({ ITEM_CODE: '', STOCK_DATE: '', QUANTITY: '', REMARKS: '' });//SA_CUSTOMER_STOCK_INFO
    }
    //Account Mapping
    var CANature = [
         { key: "AB", text: "Cash In Hand" }
    ]
    var SDNature = [
       { key: "AE", text: "Sundry Debtors" }
    ]


    $scope.saveNewCustomerChild = function (isValid) {
        debugger;
        var validation = [
               { childCustomerEdesc: $scope.customersChildArrform.childCustomerEdesc.$invalid },
               { childPermanentAddress: $scope.customersChildArrform.childPermanentAddress.$invalid },
               { childPanVat: $scope.customersChildArrform.childPanVat.$invalid },
               { childPartyType: $scope.customersChildArrform.childPartyType.$invalid },

        ]

        if (validation[0].childCustomerEdesc == true) {

            displayPopupNotification("Enter English Nmae", "warning");
            return
        }
        if (validation[1].childPermanentAddress == true) {

            displayPopupNotification(" Enter Permanent Address", "warning");

            return
        }

        if (validation[2].childPanVat == true) {

            displayPopupNotification("PAN Number Should be 9 Letter only", "warning");

            return
        }
        if (validation[3].childPartyType == true) {

            displayPopupNotification("Enter Party Type ", "warning");

            return
        }






        for (var i = 0; i < $scope.divisionList.length; i++) {
            if ($scope.divisionList[i].CREDIT_LIMIT == "" || $scope.divisionList[i].DIVISION_CODE == "") {
                $scope.divisionList.splice(i, 1);
                i--;
            }
            else {
                $scope.divisionList[i].BLOCK_FLAG = $scope.divisionList[i].BLOCK_FLAG == true ? "Y" : "N";
            }
        };
        for (var i = 0; i < $scope.ownerList.length; i++) {
            if ($scope.ownerList[i].OWNER_NAME == "") {
                $scope.ownerList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.invoiceWiseList.length; i++) {
            if ($scope.invoiceWiseList[i].ACC_CODE == "" || $scope.invoiceWiseList[i].BALANCE_AMOUNT == "" || $scope.invoiceWiseList[i].INVOICE_DATE == "" || $scope.invoiceWiseList[i].REFERENCE_NO == "") {
                $scope.invoiceWiseList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.otherInfoList.length; i++) {
            if ($scope.otherInfoList[i].FIELD_NAME == "" || $scope.otherInfoList[i].FIELD_VALUE == "") {
                $scope.otherInfoList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.alternativeLocationInfoList.length; i++) {
            if ($scope.alternativeLocationInfoList[i].OFFICE_EDESC == "") {
                $scope.alternativeLocationInfoList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.budgetCenterList.length; i++) {
            if ($scope.budgetCenterList[i].BUDGET_CODE == "") {
                $scope.budgetCenterList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.sisterConcernsList.length; i++) {
            if ($scope.sisterConcernsList[i].SISTER_CONCERN_EDESC == "") {
                $scope.sisterConcernsList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.otherTermsConditionsList.length; i++) {
            if ($scope.otherTermsConditionsList[i].FIELD_NAME == "" || $scope.otherTermsConditionsList[i].FIELD_VALUE == "") {
                $scope.otherTermsConditionsList.splice(i, 1);
                i--;
            }
        };
        for (var i = 0; i < $scope.customerStockStatusList.length; i++) {
            if ($scope.customerStockStatusList[i].ITEM_CODE == "" || $scope.customerStockStatusList[i].QUANTITY == "" || $scope.customerStockStatusList[i].STOCK_DATE == "") {
                $scope.customerStockStatusList.splice(i, 1);
                i--;
            }
        };
        debugger;
        $scope.customersChildArr.IS_ACTIVE = $scope.customersChildArr.IS_ACTIVE;
        $scope.customersChildArr.IS_CASH = $scope.customersChildArr.IS_CASH == true ? "Y" : "N";
        $scope.customersChildArr.CASH_CUSTOMER_FLAG = $scope.customersChildArr.CASH_CUSTOMER_FLAG == "true" ? "Y" : "N";
        $scope.customersChildArr.EXCLUSIVE = $scope.customersChildArr.EXCLUSIVE == true ? "Y" : "N";
        //if (!isValid) {
        //    displayPopupNotification("Input fields are not valid. Please review and try again", "warning");
        //    return;
        //}

        //onchnge of checkbox
        //$scope.change = function (evt) {
        //    debugger;
        //    if($scope.customersChildArr.CASH_CUSTOMER_FLAG==="Y")
        //    {
        //        $scope.partyTypeOptions = {
        //            dataSource: CANature,
        //            dataTextField: "text",
        //            dataValueField: "key",
        //        }
        //    }
        //    else
        //    {
        //        $scope.partyTypeOptions = {
        //            dataSource: SDNature,
        //            dataTextField: "text",
        //            dataValueField: "key",
        //        }
               
        //    }
        //};
        var createCustomerChildUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/createChildCustomer";
        var model = {
            AfterSaveCustomerCode: $scope.AfterSaveCustomerCode,
            CHILD_UPDATE_CUSTOMER_CODE: $scope.CHILD_UPDATE_CUSTOMER_CODE,
            CUSTOMER_EDESC: $scope.customersChildArr.CHILD_CUSTOMER_EDESC,
            CUSTOMER_NDESC: $scope.customersChildArr.CHILD_CUSTOMER_NDESC,
            GROUP_SKU_FLAG: "I",
            MASTER_CUSTOMER_CODE: $scope.customersetup.MASTER_CUSTOMER_CODE,
            PRE_CUSTOMER_CODE: $scope.customersetup.MASTER_CUSTOMER_CODE,
            REGD_OFFICE_NADDRESS: $scope.customersChildArr.TEMPORARY_ADDRESS,
            REGD_OFFICE_EADDRESS: $scope.customersChildArr.PERMANENT_ADDRESS,
            TEL_MOBILE_NO1: $scope.customersChildArr.TELEPHONE,
            TEL_MOBILE_NO2: $scope.customersChildArr.TELEPHONE2,
            TEL_MOBILE_NO3: $scope.customersChildArr.TELEPHONE3,
            FAX: $scope.customersChildArr.FAX,
            PAN_VAT: $scope.customersChildArr.PAN_VAT,
            REMARKS: $scope.customersChildArr.REMARKS,
            EXCISE: $scope.customersChildArr.EXCISE,
            EMAIL: $scope.customersChildArr.EMAIL,
            PARTY_TYPE_CODE: $scope.customersChildArr.PARTY_TYPE,
            ACC_CODE: $scope.customersChildArr.ACCOUNTMAP,
            CITY_CODE: $scope.customersChildArr.CITY,
            DISTRICT_CODE: $scope.customersChildArr.DISTRICT,
            REGION_CODE: $scope.customersChildArr.REGION,
            ZONE_CODE: $scope.customersChildArr.ZONE,
            COUNTRY_CODE: $scope.customersChildArr.COUNTRY,
            AGENT_CODE: $scope.customersChildArr.AGENTNAME,
            BRANCH_CODE: $scope.customersChildArr.BRANCHNAME,
            CHILD_AUTOGENERATED: $scope.customersChildArr.CHILD_AUTOGENERATED,
            CUSTOMER_ID: $scope.customersChildArr.CHILD_CUSTOMER_ID,
            CUSTOMER_GROUP_ID: $scope.customersChildArr.CHILD_GROUP_ID,
            CASH_CUSTOMER_FLAG: $scope.customersChildArr.CASH_CUSTOMER_FLAG,
            APPROVED_FLAG: $scope.customersChildArr.APPROVED_FLAG,
            ACTIVE_FLAG: $scope.customersChildArr.IS_ACTIVE,
            DEALING_PERSON: $scope.customersChildArr.DEALINGPERSON,
            CREDIT_RATE: $scope.customersChildArr.CREDIT_RATING,
            CREDIT_LIMIT: $scope.customersChildArr.CREDIT_LIMIT,
            PRE_CREDIT_LIMIT: $scope.customersChildArr.PRE_CREDIT_LIMIT,
            DUE_BILL_COUNT: $scope.customersChildArr.DUE_BILL_COUNT,
            EXCEED_LIMIT_PERCENTAGE: $scope.customersChildArr.CREDIT_EXCEED,
            INTEREST_RATE: $scope.customersChildArr.INTEREST_RATE,
            OPENING_DATE: $scope.customersChildArr.OPENING_DATE,
            EXPIRY_DATE: $scope.customersChildArr.BG_EXPIRY_DATE,
            MATURITY_DATE: $scope.customersChildArr.LAST_PAYMENT_DATE,
            DISCOUNT_FLAT_RATE: $scope.customersChildArr.CUSTOMER_SPECIFIC_DISCOUNT,
            DISCOUNT_DAYS: $scope.customersChildArr.CUSTOMER_DAYS,
            DISCOUNT_PERCENT: $scope.customersChildArr.CUSTOMER_DISCOUNT,
            EXCLUSIVE_FLAG: $scope.customersChildArr.EXCLUSIVE,
            CREDIT_DAYS: $scope.customersChildArr.CREDIT_DAYS,
            CREDIT_ACTION_FLAG: $scope.customersChildArr.CREDIT_ACTION,
            TERMS_CONDITIONS: $scope.customersChildArr.TERMS_CONDITIONS,
            CUSHION_PERCENT: $scope.customersChildArr.CUSHION,
            BANK_GUARANTEE: $scope.customersChildArr.BANK_GUARANTEE,
            customerDivision: $scope.divisionList,
            ownerInfo: $scope.ownerList,
            customerInvoiceWiseOpening: $scope.invoiceWiseList,
            customerInfoList: $scope.otherInfoList,
            alternativeLocationInfoList: $scope.alternativeLocationInfoList,
            budgetCenterList: $scope.budgetCenterList,
            sisterConcernsList: $scope.sisterConcernsList,
            otherTermsConditionsList: $scope.otherTermsConditionsList,
            customerStockStatusList: $scope.customerStockStatusList,
            PRICE_LIST_ID: $scope.customersChildArr.PRICE_LIST_ID
        }
        $http({
            method: 'POST',
            url: createCustomerChildUrl,
            data: model,
        }).then(function successCallback(response) {

            //if (response.data.MESSAGE == "INSERTED") {
            if (isValid == "saveAndContinuee") {
                $scope.AfterSaveCustomerCode = $scope.customersChildArr.CHILD_AUTOGENERATED;
            }
            else {
                $scope.clearCustomersChildArr();
                $scope.AfterSaveCustomerCode = "";
                $scope.divisionList = [];
                $scope.ownerList = [];
                $scope.invoiceWiseList = [];
                $scope.otherTermsConditionsList = [];
                $scope.otherInfoList = [];
                $scope.alternativeLocationInfoList = [];
                $scope.budgetCenterList = [];
                $scope.sisterConcernsList = [];
                $scope.customerStockStatusList = [];
            }
            //}
            //else {

            //}
            reinitialize();
            //$scope.treenodeselected = "N";
            displayPopupNotification("Data succesfully saved ", "success");
            $("#customerModal").modal("toggle");



            //else {


            //    displayPopupNotification(response.data.STATUS_CODE, "error");
            //}
            // this callback will be called asynchronously
            // when the response is available
        }, function errorCallback(response) {
            var message = response.data.MESSAGE.replace(/ *\([^)]*\) */g, " ");
            displayPopupNotification(message, "error");
            // called asynchronously if an error occurs
            // or server returns response with an error status.
        });
    }



    $scope.DeleteCustomerInfo = function (customerCode) {
        bootbox.confirm({
            title: "Delete",
            message: "Are you sure?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success',
                    label: '<i class="fa fa-check"></i> Yes',
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger',
                    label: '<i class="fa fa-times"></i> No',
                }
            },
            callback: function (result) {

                if (result == true) {

                    var delUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/DeleteCustomerByCustomerCode?customerCode=" + customerCode;
                    $http({
                        method: 'POST',
                        url: delUrl
                    }).then(function successCallback(response) {

                        if (response.data.MESSAGE == "DELETED") {
                            var grid = $("#kGrid").data("kendoGrid");
                            grid.dataSource.read();
                            $scope.treenodeselected = "N";
                            bootbox.hideAll();
                            displayPopupNotification("Data succesfully deleted ", "success");
                        }
                        if (response.data.MESSAGE == "HAS_CHILD") {
                            $scope.supplierArr = [];
                            bootbox.hideAll();
                            displayPopupNotification("Cannot Delete", "warning");
                        }
                        // this callback will be called asynchronously
                        // when the response is available
                    }, function errorCallback(response) {
                        $scope.refresh();
                        displayPopupNotification(response.data.STATUS_CODE, "error");
                        // called asynchronously if an error occurs
                        // or server returns response with an error status.
                    });

                }
                else if (result == false) {


                    bootbox.hideAll();
                }

            }
        });
    }
    $scope.PrintKYCForm = function () {
        var innerContents = document.getElementById('kycformprintdev').innerHTML;
        var popupWinindow = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
        popupWinindow.document.open();
        popupWinindow.document.write('<html><head></head><body onload="window.print()">' + innerContents + '</html>');
        popupWinindow.document.close();
    }
    $scope.KycCustomerInfo = function (customerCode) {
        debugger;
        
        $("#KYCFORM").modal("toggle");
        var editCustomerChildUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/GetKfcFormByCustomerCode?customerCode=" + customerCode;
        $http({
            method: 'GET',
            url: editCustomerChildUrl,

        }).then(function successCallback(response) {
            debugger;
            if (response.data == null) {
               
                $scope.KYCForm.BirthDate = "",
                    $scope.KYCForm.Gender = "",
                    $scope.KYCForm.MaritalStatus = "",
                    $scope.KYCForm.Religion = "",
                    $scope.KYCForm.Bloadgroup = "",
                    $scope.KYCForm.telephoneNo = "",
                    $scope.KYCForm.MobileNo = "",
                    $scope.KYCForm.Companyname = "",
                    $scope.KYCForm.EmailOffice = "",
                    $scope.KYCForm.Address = "",
                    $scope.KYCForm.PermanentHouseNo = "",
                    $scope.KYCForm.PWARDNO = "",
                    $scope.KYCForm.PSTEETADDRESS = "",
                    $scope.KYCForm.PZONE = "",
                    $scope.KYCForm.PDIStrict = "",
                    $scope.KYCForm.PVDCMunicipality = "",
                    $scope.KYCForm.THouseNo = "",
                    $scope.KYCForm.TWARDNO = "",
                    $scope.KYCForm.TSTEETADDRESS = "",
                    $scope.KYCForm.TZONE = "",
                    $scope.KYCForm.TDIStrict = "",
                    $scope.KYCForm.TVDCMunicipality = "",
                    $scope.KYCForm.EmergencyName = "",
                    $scope.KYCForm.Emergencyrelationship = "",
                    $scope.KYCForm.Emergencyaddress = "",
                    $scope.KYCForm.Emergencyphoneno = "",
                    $scope.KYCForm.FamilyName = "",
                    $scope.KYCForm.FamilyMotherName = "",
                    $scope.KYCForm.FamilyspouseName = "",
                    $scope.KYCForm.weddingDate = "",
                    $scope.KYCForm.Childname = "",
                    $scope.KYCForm.Organizationtype = "",
                    $scope.KYCForm.organizationname = "",
                    $scope.KYCForm.Position = "",
                    $scope.KYCForm.FromDate = "",
                    $scope.KYCForm.KYCCustomerName = ""
                $scope.KYCForm.CustomerId = customerCode;
                $scope.KYCForm.BirthDate = $filter('date')(new Date(), 'dd-MMM-yyyy');
                //$scope.supplierArr.MATURITY_DATE = $filter('date')(new Date(), 'dd-MMM-yyyy');
                $scope.ConvertEngToNepangbirth(moment($scope.KYCForm.BirthDate).format('YYYY-MM-DD'), "englishdatedocument5");
                $scope.saveupdatebtn="Save"
                //return true;
            }
            else {
                debugger;
                $scope.KYCForm.BirthDate = response.data.BirthDate,
                    $scope.KYCForm.BirthDate_bs = response.data.BirthDate_bs,
                    $scope.KYCForm.Gender = response.data.Gender,
                    $scope.KYCForm.MaritalStatus = response.data.MaritalStatus,
                    $scope.KYCForm.Religion = response.data.Religion,
                    $scope.KYCForm.Bloadgroup = response.data.Bloadgroup,
                    $scope.KYCForm.telephoneNo = response.data.telephoneNo,
                    $scope.KYCForm.MobileNo = response.data.MobileNo,
                    $scope.KYCForm.Companyname = response.data.Companyname,
                    $scope.KYCForm.EmailOffice = response.data.EmailOffice,
                    $scope.KYCForm.Address = response.data.Address,
                    $scope.KYCForm.PermanentHouseNo = response.data.PermanentHouseNo,
                    $scope.KYCForm.PWARDNO = response.data.PWARDNO,
                    $scope.KYCForm.PSTEETADDRESS = response.data.PSTEETADDRESS,
                    $scope.KYCForm.PZONE = response.data.PZONE,
                    $scope.KYCForm.PDIStrict = response.data.PDIStrict,
                    $scope.KYCForm.PVDCMunicipality = response.data.PVDCMunicipality,
                    $scope.KYCForm.THouseNo = response.data.PVDCMunicipality,
                    $scope.KYCForm.TWARDNO = response.data.TWARDNO,
                    $scope.KYCForm.TSTEETADDRESS = response.data.TWARDNO,
                    $scope.KYCForm.TZONE = response.data.TZONE,
                    $scope.KYCForm.TDIStrict = response.data.TDIStrict,
                    $scope.KYCForm.TVDCMunicipality = response.data.TVDCMunicipality,
                    $scope.KYCForm.EmergencyName = response.data.EmergencyName,
                    $scope.KYCForm.Emergencyrelationship = response.data.Emergencyrelationship,
                    $scope.KYCForm.Emergencyaddress = response.data.Emergencyaddress,
                    $scope.KYCForm.Emergencyphoneno = response.data.Emergencyphoneno,
                    $scope.KYCForm.FamilyName = response.data.FamilyName,
                    $scope.KYCForm.FamilyMotherName = response.data.FamilyMotherName,
                    $scope.KYCForm.FamilyspouseName = response.data.FamilyspouseName,
                    $scope.KYCForm.weddingDate = response.data.weddingDate,
                    $scope.KYCForm.Childname = response.data.Childname,
                    $scope.KYCForm.Organizationtype = response.data.Organizationtype,
                    $scope.KYCForm.organizationname = response.data.organizationname,
                    $scope.KYCForm.Position = response.data.Position,
                    $scope.KYCForm.FromDate = response.data.FromDate,
                    $scope.KYCForm.KYCCustomerName = response.data.KYCCustomerName,
                    $scope.KYCForm.CustomerId = response.data.CustomerId

               $scope.saveupdatebtn = "Update";
            }

        }, function errorCallback(response) {
            displayPopupNotification(response.data.STATUS_CODE, "error");

        });
    }
    $scope.EditCusomerInfo = function (customerCode) {

        $scope.clearAllDynamicTables();
        var editCustomerChildUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/GetChildCustomerByCustomerCode?customerCode=" + customerCode;
        $http({
            method: 'GET',
            url: editCustomerChildUrl,

        }).then(function successCallback(response) {
            debugger;
            $scope.immediateStopPropogation = "enableTab";
            $scope.saveAndContinue = true;
            $scope.saveupdatebtn = "Update";
            //$scope.saveupdatecontinuebtn = "Update & Continue";
            $scope.mastercustomerdisabled = true;
            $scope.CHILD_UPDATE_CUSTOMER_CODE = response.data.CUSTOMER_CODE;
            $scope.customersChildArr.CHILD_AUTOGENERATED = response.data.CUSTOMER_CODE;
            $scope.customersChildArr.CUSTOMER_CODE = response.data.CUSTOMER_CODE;
            $scope.customersChildArr.CHILD_CUSTOMER_CODE = $scope.treeSelectedCustomerCode;
            $scope.customersChildArr.CHILD_CUSTOMER_EDESC = response.data.CUSTOMER_EDESC;
            $scope.customersChildArr.CHILD_CUSTOMER_ID = response.data.CUSTOMER_ID;
            $scope.customersChildArr.CHILD_CUSTOMER_NDESC = response.data.CUSTOMER_NDESC;
            $scope.customersChildArr.CHILD_GROUP_ID = response.data.CUSTOMER_GROUP_ID;
            $scope.customersChildArr.PERMANENT_ADDRESS = response.data.REGD_OFFICE_EADDRESS;
            $scope.customersChildArr.TEMPORARY_ADDRESS = response.data.REGD_OFFICE_NADDRESS;
            $scope.customersChildArr.TELEPHONE = response.data.TEL_MOBILE_NO1;
            $scope.customersChildArr.FAX = response.data.FAX_NO;
            $scope.customersChildArr.TELEPHONE2 = response.data.TEL_MOBILE_NO2;
            $scope.customersChildArr.IS_CASH = response.data.CASH_CUSTOMER_FLAG,
            $scope.customersChildArr.CASH_CUSTOMER_FLAG = response.data.CASH_CUSTOMER_FLAG == 'Y' ? "true": "false",
            $scope.customersChildArr.APPROVED_FLAG = response.data.APPROVED_FLAG;
            $scope.customersChildArr.TELEPHONE3 = response.data.TEL_MOBILE_NO3;
            $scope.customersChildArr.IS_ACTIVE = response.data.ACTIVE_FLAG;
            $scope.customersChildArr.PAN_VAT = response.data.TPIN_VAT_NO;
            $scope.customersChildArr.EXCISE = response.data.EXCISE_NO;
            $scope.customersChildArr.EMAIL = response.data.EMAIL;
            $scope.customersChildArr.PARTY_TYPE_CODE = response.data.PARTY_TYPE_CODE;
            $scope.customersChildArr.PARTY_TYPE = response.data.PARTY_TYPE_CODE;
            $scope.customersChildArr.ACCOUNTMAP = response.data.ACC_CODE;
            $scope.customersChildArr.ACCOUNT_MAP = response.data.ACC_CODE;
            $scope.customersChildArr.CITY = response.data.CITY_CODE;
            $scope.customersChildArr.DISTRICT = response.data.DISTRICT_CODE;
            $scope.customersChildArr.REGION = response.data.REGION_CODE;
            $scope.customersChildArr.ZONE = response.data.ZONE_CODE;
            $scope.customersChildArr.COUNTRY = response.data.COUNTRY_CODE;
            $scope.customersChildArr.AGENTNAME = response.data.AGENT_CODE;
            $scope.customersChildArr.BRANCHNAME = response.data.BRANCH_CODE;
            $scope.customersChildArr.PRICE_LIST_ID = response.data.PRICE_LIST_ID;
            $scope.customersChildArr.DEALINGPERSON = response.data.DEALING_PERSON;
            $scope.customersChildArr.CREDIT_RATING = response.data.CREDIT_RATE;
            $scope.customersChildArr.CREDIT_LIMIT = response.data.CREDIT_LIMIT;
            $scope.customersChildArr.CUSHION = response.data.CUSHION_PERCENT;
            $scope.customersChildArr.PRE_CREDIT_LIMIT = response.data.PRE_CREDIT_LIMIT;
            $scope.customersChildArr.DUE_BILL_COUNT = response.data.DUE_BILL_COUNT;
            $scope.customersChildArr.CREDIT_EXCEED = response.data.EXCEED_LIMIT_PERCENTAGE;
            $scope.customersChildArr.INTEREST_RATE = response.data.INTEREST_RATE;
            $scope.customersChildArr.BANK_GUARANTEE = response.data.BANK_GUARANTEE;
            //$scope.customersChildArr.BALANCE
            $scope.customersChildArr.BG_EXPIRY_DATE = response.data.EXPIRY_DATE;
            if (response.data.EXPIRY_DATE != null)
            { $scope.ConvertEngToNepang(moment(response.data.EXPIRY_DATE).format('YYYY-MM-DD'), "englishdatedocument5"); }
            $scope.customersChildArr.OPENING_DATE = response.data.OPENING_DATE;
            if (response.data.OPENING_DATE != null)
            { $scope.ConvertEngToNepang(moment(response.data.OPENING_DATE).format('YYYY-MM-DD'), "englishdatedocument6"); }
            $scope.customersChildArr.LAST_PAYMENT_DATE = response.data.MATURITY_DATE;
            if (response.data.MATURITY_DATE != null)
            { $scope.ConvertEngToNepang(moment(response.data.MATURITY_DATE).format('YYYY-MM-DD'), "englishdatedocument7"); }
            $scope.customersChildArr.CUSTOMER_SPECIFIC_DISCOUNT = response.data.DISCOUNT_FLAT_RATE;
            $scope.customersChildArr.CUSTOMER_DAYS = response.data.DISCOUNT_DAYS;
            $scope.customersChildArr.CUSTOMER_DISCOUNT = response.data.DISCOUNT_PERCENT;
            $scope.customersChildArr.EXCLUSIVE = response.data.EXCLUSIVE_FLAG == "Y" || response.data.EXCLUSIVE_FLAG == "" ? true : false;
            $scope.customersChildArr.CREDIT_DAYS = response.data.CREDIT_DAYS;
            $scope.customersChildArr.CREDIT_ACTION = response.data.CREDIT_ACTION_FLAG;
            $scope.customersChildArr.TERMS_CONDITIONS = response.data.TERMS_CONDITIONS;

            if (response.data.ownerInfo.length > 0) {
                $scope.ownerList = response.data.ownerInfo;
            }
            if (response.data.customerInvoiceWiseOpening.length > 0) {
                $scope.invoiceWiseList = response.data.customerInvoiceWiseOpening;
            }

            if (response.data.customerDivision.length > 0) {
                $scope.divisionList = response.data.customerDivision;
            }
            if (response.data.customerInfoList.length > 0) {
                $scope.otherInfoList = response.data.customerInfoList;
            }
            if (response.data.alternativeLocationInfoList.length > 0) {
                $scope.alternativeLocationInfoList = response.data.alternativeLocationInfoList;
            }
            if (response.data.budgetCenterList.length > 0) {
                $scope.budgetCenterList = response.data.budgetCenterList;
            }
            if (response.data.sisterConcernsList.length > 0) {
                $scope.sisterConcernsList = response.data.sisterConcernsList;
            }
            if (response.data.otherTermsConditionsList.length > 0) {
                $scope.otherTermsConditionsList = response.data.otherTermsConditionsList;
            }
            if (response.data.customerStockStatusList.length > 0) {
                $scope.customerStockStatusList = response.data.customerStockStatusList;
            }

            $("#customerModal").modal("toggle");
            $('#myTab a[href="#tab-1"]').tab('show');

        }, function errorCallback(response) {
            displayPopupNotification(response.data.STATUS_CODE, "error");

        });
    }

    $scope.BindGrid = function (groupId) {
        $(".topsearch").show();
        var url = null;
        if (groupId == "All") {
            if ($('#custtxtSearchString').val() == null || $('#custtxtSearchString').val() == '' || $('#custtxtSearchString').val() == undefined || $('#custtxtSearchString').val() == 'undefined') {
                alert('Input is empty or undefined.');
                return;
            }
            url = "/api/SetupApi/GetAllAccountListByCustomerCode123?searchtext=" + $('#custtxtSearchString').val();
        }
        else {
            $("#custtxtSearchString").val('');
            url = "/api/SetupApi/GetChildOfCustomerByGroup?groupId=" + groupId;
        }
        $scope.customerChildGridOptions = {

            dataSource: {
                type: "json",
                transport: {
                    read: url,
                },
                pageSize: 50,
                //serverPaging: true,
                serverSorting: true
            },
            resizable: true,
            scrollable: true,
            height: 450,
            sortable: true,
            pageable: true,
            dataBound: function (e) {
                $("#kGrid tbody tr").css("cursor", "pointer");
                DisplayNoResultsFound($('#kGrid'));
                $("#kGrid tbody tr").on('dblclick', function () {
                    var customerCode = $(this).find('td span').html()
                    $scope.EditCusomerInfo(customerCode);
                    //var tree = $("#customertree").data("kendoTreeView");
                    //tree.dataSource.read();
                })
            },
            columns: [
                {
                    hidden: true,
                    field: "CUSTOMER_CODE",

                },
                {
                    field: "CUSTOMER_EDESC",
                    title: "Customer Name",
                    width: "120px"
                },
                {
                    field: "REGD_OFFICE_EADDRESS",
                    title: "Address",
                    width: "120px"
                },
                {
                    field: "TELEPHONE",
                    title: "TEL 1",
                    width: "80px"
                },

                {
                    field: "EMAIL",
                    title: "EMAIL",
                    width: "120px"
                },

                {
                    field: "ACC_EDESC",
                    title: "ACCOUNT",
                    width: "120px"
                },


                {
                    title: "Action ",
                    template: '<a class="fa fa-pencil-square-o editAction" title="Edit" ng-click="EditCusomerInfo(dataItem.CUSTOMER_CODE)"><span class="sr-only"></span> </a><a class="fa fa-trash deleteAction" title="Delete" ng-click="DeleteCustomerInfo(dataItem.CUSTOMER_CODE)"><span class="sr-only"></span> </a><a class="fa fa-file-text KYCAction" title="Kyc" ng-click="KycCustomerInfo(dataItem.CUSTOMER_CODE)"><span class="sr-only"></span> </a>',
                    width: "60px"
                }
            ],


        };

        //$scope.onsiteSearch = function ($this) {

        //    var q = $("#txtSearchString").val();
        //    var grid = $("#kGrid").data("kendo-grid");
        //    grid.dataSource.query({
        //        page: 1,
        //        pageSize: 50,
        //        filter: {
        //            logic: "or",
        //            filters: [
        //                { field: "ORDER_NO", operator: "contains", value: q },
        //                { field: "ORDER_DATE", operator: "contains", value: q },
        //                { field: "CREATED_BY", operator: "contains", value: q }
        //            ]
        //        }
        //    });
        //}
    }

    $scope.addDivisionInfo = function () {
        $scope.divisionList.push({
            DIVISION_CODE: '',
            CREDIT_LIMIT: '',
            REMARKS: '',
            BLOCK_FLAG: '',
        });
    }
    $scope.removeDivisionList = function (i) {
        if ($scope.divisionList.length > 1) {
            $scope.divisionList.splice(i, 1);
        }
    }
    $scope.addCustomerStockStatusList = function () {
        $scope.customerStockStatusList.push({
            ITEM_CODE: '',
            STOCK_DATE: '',
            QUANTITY: '',
            REMARKS: ''
        });
    }

    $scope.removeCustomerStockStatusList = function (i) {
        if ($scope.customerStockStatusList.length > 1) {
            $scope.customerStockStatusList.splice(i, 1);
        }
    }
    $scope.addSisterConcernsList = function () {
        for (var i = 0; i <= $scope.sisterConcernsList.length - 1; i++) {

            if ($(".sconcernname_" + i).parent().hasClass("borderRed")) {
                displayPopupNotification("Same Name.", "warning");
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }
        $scope.sisterConcernsList.push({
            SISTER_CONCERN_EDESC: '',
            SISTER_CONCERN_NDESC: '',
            REMARKS: ''
        });
    }
    $scope.removeSisterConcernsList = function (i) {
        if ($scope.sisterConcernsList.length > 1) {
            $scope.sisterConcernsList.splice(i, 1);
        }
    }

    $scope.addBudgetCenterList = function () {
        if ($scope.budgetcentercount === true) {
            displayPopupNotification("Same Code Or Budget Center cannot be selected", "warning");
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        $scope.budgetCenterList.push({
            BUDGET_CODE: '',
            BUDGET_EDESC: '',
            REMARKS: ''
        });
    }

    $scope.removeBudgetCenterList = function (i) {
        if ($scope.budgetCenterList.length > 1) {
            $scope.budgetCenterList.splice(i, 1);
        }
    }
    $scope.addOtherInfoList = function () {

        for (var i = 0; i <= $scope.otherInfoList.length - 1; i++) {

            if ($(".fieldname_" + i).parent().hasClass("borderRed")) {
                displayPopupNotification("Same field Name.", "warning");
                e.preventDefault();
                e.stopPropagation();
                return;
            }

        }
        $scope.otherInfoList.push({
            FIELD_NAME: '',
            FIELD_VALUE: '',
            REMARKS: ''
        });
    }

    $scope.addAlternativeLocationInfoList = function () {
        if ($scope.locationcount === true) {
            displayPopupNotification("Same Code Or location cannot be selected", "warning");
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        for (var i = 0; i <= $scope.alternativeLocationInfoList.length - 1; i++)
            if ($(".officename_" + i).parent().hasClass("borderRed")) {
                displayPopupNotification("Same Office Name.", "warning");
                e.preventDefault();
                e.stopPropagation();
                return false;
            }

        $scope.alternativeLocationInfoList.push({
            LOCATION_CODE: '',
            LOCAITON_EDESC: '',
            CONTACT_PERSON: '',
            ADDRESS: '',
            TEL_MOBILE_NO: '',
            FAX_NO: '',
            EMAIL: '',
            OFFICE_EDESC: '',
            REMARKS: ''
        });
    }

    $scope.removeAlternativeLocationInfoList = function (i) {
        if ($scope.alternativeLocationInfoList.length > 1) {
            $scope.alternativeLocationInfoList.splice(i, 1);
        }
    }

    $scope.removeOtherInfoList = function (i) {
        if ($scope.otherInfoList.length > 1) {
            $scope.otherInfoList.splice(i, 1);
        }
    }

    $scope.addTermsConditionsList = function () {
        $scope.otherTermsConditionsList.push({
            FIELD_NAME: '',
            FIELD_VALUE: '',
            REMARKS: ''
        });
    }

    $scope.removeTermsConditionsList = function (i) {
        if ($scope.otherTermsConditionsList.length > 1) {
            $scope.otherTermsConditionsList.splice(i, 1);
        }

    }

    $scope.addInvoiceWiseInfo = function () {

        $scope.invoiceWiseList.push({
            REFERENCE_NO: '',
            INVOICE_DATE: $filter('date')(new Date, "dd-MMM-yyyy"),
            DUE_DATE: '',
            TRANSACTION_TYPE: 'DR',
            BALANCE: '',
            CURRENCY_CODE: 'NRS',
            EXCHANGE_RATE: '',
            DIVISION_CODE: '',
            ACC_CODE: '',
            PARTY_TYPE_CODE: '',
            EMPLOYEE_CODE: '',
            REMARKS: ''
        });

    }
    $scope.addOwnerInfo = function () {


        for (var i = 0; i <= $scope.ownerList.length - 1; i++) {

            if ($(".OWNER_" + i).parent().hasClass("borderRed")) {
                displayPopupNotification("Same Owner Name.", "warning");
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }
        //if ($scope.ownercount === true) {
        //    displayPopupNotification("Same Owner Name.", "warning");
        //    e.preventDefault();
        //    e.stopPropagation();
        //    return false;
        //}
        $scope.ownerList.push({
            OWNER_NAME: '',
            DESIGNATION: '',
            CONTACT_PERSON: '',
            ADDRESS: '',
            TEL_MOBILE_NO: '',
            FAX_NO: '',
            EMAIL: '',
            REMARKS: '',
            IMAGE_FILE_NAME: '',
            IMAGE_FILE_CITIZENSHIP: '',
            IMAGE_FILE_COMPANY_REG: '',
            IMAGE_FILE_COMPANY_PAN: ''
        });

    }

    $scope.removeOwnerInfo = function (i) {
        if ($scope.ownerList.length > 1) {
            $scope.ownerList.splice(i, 1);
        }
    }
    $scope.removeInvoiceWiseInfo = function (i) {
        if ($scope.invoiceWiseList.length > 1) {
            $scope.invoiceWiseList.splice(i, 1);
        }
    }

    $scope.addNewCustomer = function () {

        $scope.editFlag = "N";
        $scope.saveupdatebtn = "Save"
        $scope.customersArr = [];
        var returnMaxCustomerUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/MaxCustomer";

        $http({
            method: 'GET',
            url: returnMaxCustomerUrl,
        }).then(function successCallback(response) {

            $scope.customersArr.MASTER_CUSTOMER_CODE = response.data;
        }, function errorCallback(response) {
            displayPopupNotification(response.data.STATUS_CODE, "error");

        });
        $("#groupCustomerModal").modal("toggle");
    }

    $scope.showModalForNewChildCustomer = function () {
        //$scope.customersChildArr.CASH_CUSTOMER_FLAG = false;
        //$scope.partyTypeOptions = {
        //    dataSource: SDNature,
        //    dataTextField: "text",
        //    dataValueField: "key",
        //}
        if ($scope.customersetup.CUSTOMER_CODE != null && $scope.customersetup.CUSTOMER_CODE != undefined && $scope.customersetup.CUSTOMER_CODE != "" && $scope.customersetup.GROUP_SKU_FLAG != "I") {

            showloader();
            $scope.saveupdatebtn = "Save";
            if ($scope.saveupdatebtn == "Save") $scope.customersChildArr.CASH_CUSTOMER_FLAG = false;
            //
          //  $scope.change = function (evt) {
               // debugger;
                //if ($scope.customersChildArr.CASH_CUSTOMER_FLAG === "Y") {
                //    $scope.partyTypeOptions = {
                //        dataSource: CANature,
                //        dataTextField: "text",
                //        dataValueField: "key",
                //    }
                //}
                
           // };
            //
            $scope.saveupdatecontinuebtn = "Save & Continue";
            $scope.clearCustomersChildArr();
            $scope.saveAndContinue = false;
            $scope.mastercustomerdisabled = true;
            $scope.CHILD_UPDATE_CUSTOMER_CODE = "";
            $scope.customersArr = [];

            $scope.customersChildArr.CHILD_CUSTOMER_CODE = $scope.treeSelectedCustomerCode;
            var returnMaxCustomerUrl = window.location.protocol + "//" + window.location.host + "/api/SetupApi/MaxCustomerChild";
            $http({
                method: 'GET',
                url: returnMaxCustomerUrl,
            }).then(function successCallback(response) {

                $scope.customersChildArr.CHILD_AUTOGENERATED = response.data;
            }, function errorCallback(response) {
                displayPopupNotification(response.data.STATUS_CODE, "error");

            });
            $("#customerModal").modal("toggle");
            $('#myTab a[href="#tab-1"]').tab('show');
            $scope.immediateStopPropogation = "disableTab";
            hideloader();
        }
        else {
            var tree = $("#customertree").data("kendoTreeView");
            tree.dataSource.read();
            displayPopupNotification("Please select the customer head first", "warning");
        }
    }
    $scope.checkdupowner = function (key, index) {


        for (var i = 0; i <= $scope.ownerList.length - 1; i++) {
            $(".OWNER_" + i).parent().removeClass("borderRed");
            $("#savedocumentformdatachild").prop("disabled", false);
        }

        for (var a = 0; a <= $scope.ownerList.length - 1; a++) {
            for (var b = 0; b <= $scope.ownerList.length - 1; b++) {
                if ($scope.ownerList[a] != $scope.ownerList[b]) {
                    if ($scope.ownerList[a].OWNER_NAME === $scope.ownerList[b].OWNER_NAME) {

                        $(".OWNER_" + b).parent().addClass("borderRed");
                        $("#savedocumentformdatachild").prop("disabled", true);
                        //$scope.ownercount = true;
                    }
                }

            }

        }

    }
    $scope.checkdupsconcern = function (key, index) {


        for (var i = 0; i <= $scope.sisterConcernsList.length - 1; i++) {
            $(".sconcernname_" + i).parent().removeClass("borderRed");
            $("#savedocumentformdatachild").prop("disabled", false);
        }

        for (var a = 0; a <= $scope.sisterConcernsList.length - 1; a++) {
            for (var b = 0; b <= $scope.sisterConcernsList.length - 1; b++) {
                if ($scope.sisterConcernsList[a] != $scope.sisterConcernsList[b]) {
                    if ($scope.sisterConcernsList[a].SISTER_CONCERN_EDESC === $scope.sisterConcernsList[b].SISTER_CONCERN_EDESC) {

                        $(".sconcernname_" + b).parent().addClass("borderRed");
                        $("#savedocumentformdatachild").prop("disabled", true);
                    }
                }
            }

        }

    }
    $scope.checkdupfieldname = function (key, index) {


        for (var i = 0; i <= $scope.otherInfoList.length - 1; i++) {
            $(".fieldname_" + i).parent().removeClass("borderRed");
            $("#savedocumentformdatachild").prop("disabled", false);
        }

        for (var a = 0; a <= $scope.otherInfoList.length - 1; a++) {
            for (var b = 0; b <= $scope.otherInfoList.length - 1; b++) {
                if ($scope.otherInfoList[a] != $scope.otherInfoList[b]) {
                    if ($scope.otherInfoList[a].FIELD_NAME === $scope.otherInfoList[b].FIELD_NAME) {

                        $(".fieldname_" + b).parent().addClass("borderRed");
                        $("#savedocumentformdatachild").prop("disabled", true);
                    }
                }
            }

        }

    }
    $scope.checkdupofficename = function (key, index) {


        for (var i = 0; i <= $scope.alternativeLocationInfoList.length - 1; i++) {
            $(".officename_" + i).parent().removeClass("borderRed");
            $("#savedocumentformdatachild").prop("disabled", false);
        }

        for (var a = 0; a <= $scope.alternativeLocationInfoList.length - 1; a++) {
            for (var b = 0; b <= $scope.alternativeLocationInfoList.length - 1; b++) {
                if ($scope.alternativeLocationInfoList[a] != $scope.alternativeLocationInfoList[b]) {
                    if ($scope.alternativeLocationInfoList[a].OFFICE_EDESC === $scope.alternativeLocationInfoList[b].OFFICE_EDESC) {

                        $(".officename_" + b).parent().addClass("borderRed");
                        $("#savedocumentformdatachild").prop("disabled", true);
                    }
                }
            }

        }

    }
    $scope.budgetCodeOnChange = function (kendoEvent) {
        var Code = kendoEvent.sender.dataItem().BUDGET_CODE;
        var index = this.$index;
        var sublen = $scope.budgetCenterList.length;

        for (var j = 0; j < sublen; j++) {

            var subcode = $scope.budgetCenterList[j].BUDGET_CODE;
            if (index != j) {

                if (subcode === Code) {

                    $($(".budgetcentercode_" + index)[0]).addClass("borderRed");
                    $("#savedocumentformdatachild").prop("disabled", true);
                    $scope.budgetcentercount = true;
                    return;

                }
                else {

                    $($(".budgetcentercode_" + index)[0]).removeClass("borderRed");
                    $scope.budgetcentercount = false;
                    $("#savedocumentformdatachild").prop("disabled", false);
                };

            }


        }
    }
    $scope.locationCodeOnChange = function (kendoEvent) {
        var Code = kendoEvent.sender.dataItem().LOCATION_CODE;
        var index = this.$index;
        var sublen = $scope.alternativeLocationInfoList.length;

        for (var j = 0; j < sublen; j++) {

            var subcode = $scope.alternativeLocationInfoList[j].LOCATION_CODE;
            if (index != j) {

                if (subcode === Code) {

                    $($(".locationcode_" + index)[0]).addClass("borderRed");
                    $("#savedocumentformdatachild").prop("disabled", true);
                    $scope.locationcount = true;
                    return;

                }
                else {

                    $($(".locationcode_" + index)[0]).removeClass("borderRed");
                    $scope.locationcount = false;
                    $("#savedocumentformdatachild").prop("disabled", false);
                };

            }


        }
    }
    function DisplayNoResultsFound(grid) {

        // Get the number of Columns in the grid
        //var grid = $("#kGrid").data("kendo-grid");
        var dataSource = grid.data("kendoGrid").dataSource;
        var colCount = grid.find('.k-grid-header colgroup > col').length;

        // If there are no results place an indicator row
        if (dataSource._view.length == 0) {
            grid.find('.k-grid-content tbody')
                .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" style="text-align:center"><b>No Results Found!</b></td></tr>');
        }

        // Get visible row count
        var rowCount = grid.find('.k-grid-content tbody tr').length;

        // If the row count is less that the page size add in the number of missing rows
        if (rowCount < dataSource._take) {
            var addRows = dataSource._take - rowCount;
            for (var i = 0; i < addRows; i++) {
                grid.find('.k-grid-content tbody').append('<tr class="kendo-data-row"><td>&nbsp;</td></tr>');
            }
        }
    }

    //$scope.panLimitChecker = function () {
    //    debugger;
    //    //var creditDays = $scope.customersChildArr.PAN_VAT;
    //    //var stringCreditDays = creditDays.toString();
    //    //var limitCreditDaysToFiveDigit = stringCreditDays.substring(0, 9);
    //    //var creditDaysLen = parseInt(limitCreditDaysToFiveDigit);

    //    //if (stringCreditDays.length < 9 ) {
    //    //    //$scope.customersChildArr.PAN_VAT = creditDaysLen;
    //    //   displayPopupNotification("Credit Days can not greater then 9 digit.", "warning");
    //    //    return;
    //    //}


    //}

    

});

